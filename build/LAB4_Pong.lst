
build/LAB4_Pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
20000000:	4807      	ldr	r0, [pc, #28]	@ (20000020 <startup+0x20>)
20000002:	4685      	mov	sp, r0
20000004:	f001 ffe2 	bl	20001fcc <md407_runtime_clockinit>
20000008:	f001 ffac 	bl	20001f64 <md407_runtime_portinit>
2000000c:	f001 ff14 	bl	20001e38 <md407_runtime_uartinit>
20000010:	f001 feba 	bl	20001d88 <_crt_init>
20000014:	f001 fa7d 	bl	20001512 <main>
20000018:	f001 fee6 	bl	20001de8 <_crt_deinit>
2000001c:	e7fe      	b.n	2000001c <startup+0x1c>
2000001e:	0000      	.short	0x0000
20000020:	20003800 	.word	0x20003800

20000024 <ascii_ctrl_bit_set>:
20000024:	b580      	push	{r7, lr}
20000026:	b084      	sub	sp, #16
20000028:	af00      	add	r7, sp, #0
2000002a:	0002      	movs	r2, r0
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	701a      	strb	r2, [r3, #0]
20000030:	4b0a      	ldr	r3, [pc, #40]	@ (2000005c <ascii_ctrl_bit_set+0x38>)
20000032:	681a      	ldr	r2, [r3, #0]
20000034:	210f      	movs	r1, #15
20000036:	187b      	adds	r3, r7, r1
20000038:	7d12      	ldrb	r2, [r2, #20]
2000003a:	701a      	strb	r2, [r3, #0]
2000003c:	1dfa      	adds	r2, r7, #7
2000003e:	187b      	adds	r3, r7, r1
20000040:	7812      	ldrb	r2, [r2, #0]
20000042:	781b      	ldrb	r3, [r3, #0]
20000044:	4313      	orrs	r3, r2
20000046:	b2da      	uxtb	r2, r3
20000048:	4b04      	ldr	r3, [pc, #16]	@ (2000005c <ascii_ctrl_bit_set+0x38>)
2000004a:	681b      	ldr	r3, [r3, #0]
2000004c:	2104      	movs	r1, #4
2000004e:	430a      	orrs	r2, r1
20000050:	b2d2      	uxtb	r2, r2
20000052:	751a      	strb	r2, [r3, #20]
20000054:	46c0      	nop			@ (mov r8, r8)
20000056:	46bd      	mov	sp, r7
20000058:	b004      	add	sp, #16
2000005a:	bd80      	pop	{r7, pc}
2000005c:	20002bcc 	.word	0x20002bcc

20000060 <ascii_ctrl_bit_clear>:
20000060:	b580      	push	{r7, lr}
20000062:	b084      	sub	sp, #16
20000064:	af00      	add	r7, sp, #0
20000066:	0002      	movs	r2, r0
20000068:	1dfb      	adds	r3, r7, #7
2000006a:	701a      	strb	r2, [r3, #0]
2000006c:	4b0e      	ldr	r3, [pc, #56]	@ (200000a8 <ascii_ctrl_bit_clear+0x48>)
2000006e:	681a      	ldr	r2, [r3, #0]
20000070:	210f      	movs	r1, #15
20000072:	187b      	adds	r3, r7, r1
20000074:	7d12      	ldrb	r2, [r2, #20]
20000076:	701a      	strb	r2, [r3, #0]
20000078:	1dfb      	adds	r3, r7, #7
2000007a:	781b      	ldrb	r3, [r3, #0]
2000007c:	b25b      	sxtb	r3, r3
2000007e:	43db      	mvns	r3, r3
20000080:	b25b      	sxtb	r3, r3
20000082:	187a      	adds	r2, r7, r1
20000084:	7812      	ldrb	r2, [r2, #0]
20000086:	b252      	sxtb	r2, r2
20000088:	4013      	ands	r3, r2
2000008a:	b25a      	sxtb	r2, r3
2000008c:	187b      	adds	r3, r7, r1
2000008e:	701a      	strb	r2, [r3, #0]
20000090:	4b05      	ldr	r3, [pc, #20]	@ (200000a8 <ascii_ctrl_bit_clear+0x48>)
20000092:	681b      	ldr	r3, [r3, #0]
20000094:	187a      	adds	r2, r7, r1
20000096:	7812      	ldrb	r2, [r2, #0]
20000098:	2104      	movs	r1, #4
2000009a:	430a      	orrs	r2, r1
2000009c:	b2d2      	uxtb	r2, r2
2000009e:	751a      	strb	r2, [r3, #20]
200000a0:	46c0      	nop			@ (mov r8, r8)
200000a2:	46bd      	mov	sp, r7
200000a4:	b004      	add	sp, #16
200000a6:	bd80      	pop	{r7, pc}
200000a8:	20002bcc 	.word	0x20002bcc

200000ac <ascii_write_controller>:
200000ac:	b580      	push	{r7, lr}
200000ae:	b082      	sub	sp, #8
200000b0:	af00      	add	r7, sp, #0
200000b2:	0002      	movs	r2, r0
200000b4:	1dfb      	adds	r3, r7, #7
200000b6:	701a      	strb	r2, [r3, #0]
200000b8:	2040      	movs	r0, #64	@ 0x40
200000ba:	f7ff ffb3 	bl	20000024 <ascii_ctrl_bit_set>
200000be:	4b06      	ldr	r3, [pc, #24]	@ (200000d8 <ascii_write_controller+0x2c>)
200000c0:	681b      	ldr	r3, [r3, #0]
200000c2:	1dfa      	adds	r2, r7, #7
200000c4:	7812      	ldrb	r2, [r2, #0]
200000c6:	755a      	strb	r2, [r3, #21]
200000c8:	2040      	movs	r0, #64	@ 0x40
200000ca:	f7ff ffc9 	bl	20000060 <ascii_ctrl_bit_clear>
200000ce:	46c0      	nop			@ (mov r8, r8)
200000d0:	46bd      	mov	sp, r7
200000d2:	b002      	add	sp, #8
200000d4:	bd80      	pop	{r7, pc}
200000d6:	46c0      	nop			@ (mov r8, r8)
200000d8:	20002bcc 	.word	0x20002bcc

200000dc <ascii_read_controller>:
200000dc:	b580      	push	{r7, lr}
200000de:	b082      	sub	sp, #8
200000e0:	af00      	add	r7, sp, #0
200000e2:	2040      	movs	r0, #64	@ 0x40
200000e4:	f7ff ff9e 	bl	20000024 <ascii_ctrl_bit_set>
200000e8:	4b06      	ldr	r3, [pc, #24]	@ (20000104 <ascii_read_controller+0x28>)
200000ea:	681a      	ldr	r2, [r3, #0]
200000ec:	1dfb      	adds	r3, r7, #7
200000ee:	7c52      	ldrb	r2, [r2, #17]
200000f0:	701a      	strb	r2, [r3, #0]
200000f2:	2040      	movs	r0, #64	@ 0x40
200000f4:	f7ff ffb4 	bl	20000060 <ascii_ctrl_bit_clear>
200000f8:	1dfb      	adds	r3, r7, #7
200000fa:	781b      	ldrb	r3, [r3, #0]
200000fc:	0018      	movs	r0, r3
200000fe:	46bd      	mov	sp, r7
20000100:	b002      	add	sp, #8
20000102:	bd80      	pop	{r7, pc}
20000104:	20002bcc 	.word	0x20002bcc

20000108 <ascii_write_cmd>:
20000108:	b580      	push	{r7, lr}
2000010a:	b082      	sub	sp, #8
2000010c:	af00      	add	r7, sp, #0
2000010e:	0002      	movs	r2, r0
20000110:	1dfb      	adds	r3, r7, #7
20000112:	701a      	strb	r2, [r3, #0]
20000114:	2001      	movs	r0, #1
20000116:	f7ff ffa3 	bl	20000060 <ascii_ctrl_bit_clear>
2000011a:	2002      	movs	r0, #2
2000011c:	f7ff ffa0 	bl	20000060 <ascii_ctrl_bit_clear>
20000120:	1dfb      	adds	r3, r7, #7
20000122:	781b      	ldrb	r3, [r3, #0]
20000124:	0018      	movs	r0, r3
20000126:	f7ff ffc1 	bl	200000ac <ascii_write_controller>
2000012a:	46c0      	nop			@ (mov r8, r8)
2000012c:	46bd      	mov	sp, r7
2000012e:	b002      	add	sp, #8
20000130:	bd80      	pop	{r7, pc}

20000132 <ascii_write_data>:
20000132:	b580      	push	{r7, lr}
20000134:	b082      	sub	sp, #8
20000136:	af00      	add	r7, sp, #0
20000138:	0002      	movs	r2, r0
2000013a:	1dfb      	adds	r3, r7, #7
2000013c:	701a      	strb	r2, [r3, #0]
2000013e:	2001      	movs	r0, #1
20000140:	f7ff ff70 	bl	20000024 <ascii_ctrl_bit_set>
20000144:	2002      	movs	r0, #2
20000146:	f7ff ff8b 	bl	20000060 <ascii_ctrl_bit_clear>
2000014a:	1dfb      	adds	r3, r7, #7
2000014c:	781b      	ldrb	r3, [r3, #0]
2000014e:	0018      	movs	r0, r3
20000150:	f7ff ffac 	bl	200000ac <ascii_write_controller>
20000154:	46c0      	nop			@ (mov r8, r8)
20000156:	46bd      	mov	sp, r7
20000158:	b002      	add	sp, #8
2000015a:	bd80      	pop	{r7, pc}

2000015c <ascii_read_status>:
2000015c:	b590      	push	{r4, r7, lr}
2000015e:	b083      	sub	sp, #12
20000160:	af00      	add	r7, sp, #0
20000162:	4b0c      	ldr	r3, [pc, #48]	@ (20000194 <ascii_read_status+0x38>)
20000164:	681b      	ldr	r3, [r3, #0]
20000166:	2200      	movs	r2, #0
20000168:	805a      	strh	r2, [r3, #2]
2000016a:	2001      	movs	r0, #1
2000016c:	f7ff ff78 	bl	20000060 <ascii_ctrl_bit_clear>
20000170:	2002      	movs	r0, #2
20000172:	f7ff ff57 	bl	20000024 <ascii_ctrl_bit_set>
20000176:	1dfc      	adds	r4, r7, #7
20000178:	f7ff ffb0 	bl	200000dc <ascii_read_controller>
2000017c:	0003      	movs	r3, r0
2000017e:	7023      	strb	r3, [r4, #0]
20000180:	4b04      	ldr	r3, [pc, #16]	@ (20000194 <ascii_read_status+0x38>)
20000182:	681b      	ldr	r3, [r3, #0]
20000184:	4a04      	ldr	r2, [pc, #16]	@ (20000198 <ascii_read_status+0x3c>)
20000186:	805a      	strh	r2, [r3, #2]
20000188:	1dfb      	adds	r3, r7, #7
2000018a:	781b      	ldrb	r3, [r3, #0]
2000018c:	0018      	movs	r0, r3
2000018e:	46bd      	mov	sp, r7
20000190:	b003      	add	sp, #12
20000192:	bd90      	pop	{r4, r7, pc}
20000194:	20002bcc 	.word	0x20002bcc
20000198:	00005555 	.word	0x00005555

2000019c <ascii_read_data>:
2000019c:	b590      	push	{r4, r7, lr}
2000019e:	b083      	sub	sp, #12
200001a0:	af00      	add	r7, sp, #0
200001a2:	4b0c      	ldr	r3, [pc, #48]	@ (200001d4 <ascii_read_data+0x38>)
200001a4:	681b      	ldr	r3, [r3, #0]
200001a6:	2200      	movs	r2, #0
200001a8:	805a      	strh	r2, [r3, #2]
200001aa:	2001      	movs	r0, #1
200001ac:	f7ff ff3a 	bl	20000024 <ascii_ctrl_bit_set>
200001b0:	2002      	movs	r0, #2
200001b2:	f7ff ff37 	bl	20000024 <ascii_ctrl_bit_set>
200001b6:	1dfc      	adds	r4, r7, #7
200001b8:	f7ff ff90 	bl	200000dc <ascii_read_controller>
200001bc:	0003      	movs	r3, r0
200001be:	7023      	strb	r3, [r4, #0]
200001c0:	4b04      	ldr	r3, [pc, #16]	@ (200001d4 <ascii_read_data+0x38>)
200001c2:	681b      	ldr	r3, [r3, #0]
200001c4:	4a04      	ldr	r2, [pc, #16]	@ (200001d8 <ascii_read_data+0x3c>)
200001c6:	805a      	strh	r2, [r3, #2]
200001c8:	1dfb      	adds	r3, r7, #7
200001ca:	781b      	ldrb	r3, [r3, #0]
200001cc:	0018      	movs	r0, r3
200001ce:	46bd      	mov	sp, r7
200001d0:	b003      	add	sp, #12
200001d2:	bd90      	pop	{r4, r7, pc}
200001d4:	20002bcc 	.word	0x20002bcc
200001d8:	00005555 	.word	0x00005555

200001dc <ascii_command>:
200001dc:	b580      	push	{r7, lr}
200001de:	b084      	sub	sp, #16
200001e0:	af00      	add	r7, sp, #0
200001e2:	60b9      	str	r1, [r7, #8]
200001e4:	607a      	str	r2, [r7, #4]
200001e6:	230f      	movs	r3, #15
200001e8:	18fb      	adds	r3, r7, r3
200001ea:	1c02      	adds	r2, r0, #0
200001ec:	701a      	strb	r2, [r3, #0]
200001ee:	46c0      	nop			@ (mov r8, r8)
200001f0:	f7ff ffb4 	bl	2000015c <ascii_read_status>
200001f4:	0003      	movs	r3, r0
200001f6:	001a      	movs	r2, r3
200001f8:	2380      	movs	r3, #128	@ 0x80
200001fa:	4013      	ands	r3, r2
200001fc:	2b80      	cmp	r3, #128	@ 0x80
200001fe:	d0f7      	beq.n	200001f0 <ascii_command+0x14>
20000200:	2008      	movs	r0, #8
20000202:	f000 f9a3 	bl	2000054c <delay_mikro>
20000206:	230f      	movs	r3, #15
20000208:	18fb      	adds	r3, r7, r3
2000020a:	781b      	ldrb	r3, [r3, #0]
2000020c:	0018      	movs	r0, r3
2000020e:	f7ff ff7b 	bl	20000108 <ascii_write_cmd>
20000212:	687a      	ldr	r2, [r7, #4]
20000214:	68bb      	ldr	r3, [r7, #8]
20000216:	0010      	movs	r0, r2
20000218:	4798      	blx	r3
2000021a:	46c0      	nop			@ (mov r8, r8)
2000021c:	46bd      	mov	sp, r7
2000021e:	b004      	add	sp, #16
20000220:	bd80      	pop	{r7, pc}

20000222 <ascii_data>:
20000222:	b580      	push	{r7, lr}
20000224:	b084      	sub	sp, #16
20000226:	af00      	add	r7, sp, #0
20000228:	60b9      	str	r1, [r7, #8]
2000022a:	607a      	str	r2, [r7, #4]
2000022c:	230f      	movs	r3, #15
2000022e:	18fb      	adds	r3, r7, r3
20000230:	1c02      	adds	r2, r0, #0
20000232:	701a      	strb	r2, [r3, #0]
20000234:	46c0      	nop			@ (mov r8, r8)
20000236:	f7ff ff91 	bl	2000015c <ascii_read_status>
2000023a:	0003      	movs	r3, r0
2000023c:	001a      	movs	r2, r3
2000023e:	2380      	movs	r3, #128	@ 0x80
20000240:	4013      	ands	r3, r2
20000242:	2b80      	cmp	r3, #128	@ 0x80
20000244:	d0f7      	beq.n	20000236 <ascii_data+0x14>
20000246:	2008      	movs	r0, #8
20000248:	f000 f980 	bl	2000054c <delay_mikro>
2000024c:	230f      	movs	r3, #15
2000024e:	18fb      	adds	r3, r7, r3
20000250:	781b      	ldrb	r3, [r3, #0]
20000252:	0018      	movs	r0, r3
20000254:	f7ff ff6d 	bl	20000132 <ascii_write_data>
20000258:	687a      	ldr	r2, [r7, #4]
2000025a:	68bb      	ldr	r3, [r7, #8]
2000025c:	0010      	movs	r0, r2
2000025e:	4798      	blx	r3
20000260:	46c0      	nop			@ (mov r8, r8)
20000262:	46bd      	mov	sp, r7
20000264:	b004      	add	sp, #16
20000266:	bd80      	pop	{r7, pc}

20000268 <ascii_init>:
20000268:	b580      	push	{r7, lr}
2000026a:	af00      	add	r7, sp, #0
2000026c:	4b0d      	ldr	r3, [pc, #52]	@ (200002a4 <ascii_init+0x3c>)
2000026e:	2228      	movs	r2, #40	@ 0x28
20000270:	0019      	movs	r1, r3
20000272:	2038      	movs	r0, #56	@ 0x38
20000274:	f7ff ffb2 	bl	200001dc <ascii_command>
20000278:	4b0a      	ldr	r3, [pc, #40]	@ (200002a4 <ascii_init+0x3c>)
2000027a:	2228      	movs	r2, #40	@ 0x28
2000027c:	0019      	movs	r1, r3
2000027e:	200e      	movs	r0, #14
20000280:	f7ff ffac 	bl	200001dc <ascii_command>
20000284:	4b08      	ldr	r3, [pc, #32]	@ (200002a8 <ascii_init+0x40>)
20000286:	2202      	movs	r2, #2
20000288:	0019      	movs	r1, r3
2000028a:	2001      	movs	r0, #1
2000028c:	f7ff ffa6 	bl	200001dc <ascii_command>
20000290:	4b04      	ldr	r3, [pc, #16]	@ (200002a4 <ascii_init+0x3c>)
20000292:	2228      	movs	r2, #40	@ 0x28
20000294:	0019      	movs	r1, r3
20000296:	2004      	movs	r0, #4
20000298:	f7ff ffa0 	bl	200001dc <ascii_command>
2000029c:	46c0      	nop			@ (mov r8, r8)
2000029e:	46bd      	mov	sp, r7
200002a0:	bd80      	pop	{r7, pc}
200002a2:	46c0      	nop			@ (mov r8, r8)
200002a4:	2000054d 	.word	0x2000054d
200002a8:	20000593 	.word	0x20000593

200002ac <ascii_goto>:
200002ac:	b580      	push	{r7, lr}
200002ae:	b084      	sub	sp, #16
200002b0:	af00      	add	r7, sp, #0
200002b2:	6078      	str	r0, [r7, #4]
200002b4:	6039      	str	r1, [r7, #0]
200002b6:	687b      	ldr	r3, [r7, #4]
200002b8:	3b01      	subs	r3, #1
200002ba:	60fb      	str	r3, [r7, #12]
200002bc:	683b      	ldr	r3, [r7, #0]
200002be:	2b02      	cmp	r3, #2
200002c0:	d102      	bne.n	200002c8 <ascii_goto+0x1c>
200002c2:	68fb      	ldr	r3, [r7, #12]
200002c4:	3340      	adds	r3, #64	@ 0x40
200002c6:	60fb      	str	r3, [r7, #12]
200002c8:	68fb      	ldr	r3, [r7, #12]
200002ca:	b2db      	uxtb	r3, r3
200002cc:	2280      	movs	r2, #128	@ 0x80
200002ce:	4252      	negs	r2, r2
200002d0:	4313      	orrs	r3, r2
200002d2:	b2db      	uxtb	r3, r3
200002d4:	0018      	movs	r0, r3
200002d6:	f7ff ff17 	bl	20000108 <ascii_write_cmd>
200002da:	46c0      	nop			@ (mov r8, r8)
200002dc:	46bd      	mov	sp, r7
200002de:	b004      	add	sp, #16
200002e0:	bd80      	pop	{r7, pc}

200002e2 <ascii_write_char>:
200002e2:	b580      	push	{r7, lr}
200002e4:	b082      	sub	sp, #8
200002e6:	af00      	add	r7, sp, #0
200002e8:	0002      	movs	r2, r0
200002ea:	1dfb      	adds	r3, r7, #7
200002ec:	701a      	strb	r2, [r3, #0]
200002ee:	4905      	ldr	r1, [pc, #20]	@ (20000304 <ascii_write_char+0x22>)
200002f0:	1dfb      	adds	r3, r7, #7
200002f2:	781b      	ldrb	r3, [r3, #0]
200002f4:	222b      	movs	r2, #43	@ 0x2b
200002f6:	0018      	movs	r0, r3
200002f8:	f7ff ff93 	bl	20000222 <ascii_data>
200002fc:	46c0      	nop			@ (mov r8, r8)
200002fe:	46bd      	mov	sp, r7
20000300:	b002      	add	sp, #8
20000302:	bd80      	pop	{r7, pc}
20000304:	2000054d 	.word	0x2000054d

20000308 <ascii_draw_score>:
20000308:	b580      	push	{r7, lr}
2000030a:	b082      	sub	sp, #8
2000030c:	af00      	add	r7, sp, #0
2000030e:	6078      	str	r0, [r7, #4]
20000310:	687b      	ldr	r3, [r7, #4]
20000312:	7c1b      	ldrb	r3, [r3, #16]
20000314:	3307      	adds	r3, #7
20000316:	2102      	movs	r1, #2
20000318:	0018      	movs	r0, r3
2000031a:	f7ff ffc7 	bl	200002ac <ascii_goto>
2000031e:	687b      	ldr	r3, [r7, #4]
20000320:	695b      	ldr	r3, [r3, #20]
20000322:	b2db      	uxtb	r3, r3
20000324:	3330      	adds	r3, #48	@ 0x30
20000326:	b2db      	uxtb	r3, r3
20000328:	0018      	movs	r0, r3
2000032a:	f7ff ffda 	bl	200002e2 <ascii_write_char>
2000032e:	46c0      	nop			@ (mov r8, r8)
20000330:	46bd      	mov	sp, r7
20000332:	b002      	add	sp, #8
20000334:	bd80      	pop	{r7, pc}

20000336 <ascii_draw_name>:
20000336:	b580      	push	{r7, lr}
20000338:	b084      	sub	sp, #16
2000033a:	af00      	add	r7, sp, #0
2000033c:	6078      	str	r0, [r7, #4]
2000033e:	687b      	ldr	r3, [r7, #4]
20000340:	7c1b      	ldrb	r3, [r3, #16]
20000342:	2101      	movs	r1, #1
20000344:	0018      	movs	r0, r3
20000346:	f7ff ffb1 	bl	200002ac <ascii_goto>
2000034a:	687b      	ldr	r3, [r7, #4]
2000034c:	60fb      	str	r3, [r7, #12]
2000034e:	e006      	b.n	2000035e <ascii_draw_name+0x28>
20000350:	68fb      	ldr	r3, [r7, #12]
20000352:	1c5a      	adds	r2, r3, #1
20000354:	60fa      	str	r2, [r7, #12]
20000356:	781b      	ldrb	r3, [r3, #0]
20000358:	0018      	movs	r0, r3
2000035a:	f7ff ffc2 	bl	200002e2 <ascii_write_char>
2000035e:	68fb      	ldr	r3, [r7, #12]
20000360:	781b      	ldrb	r3, [r3, #0]
20000362:	2b00      	cmp	r3, #0
20000364:	d1f4      	bne.n	20000350 <ascii_draw_name+0x1a>
20000366:	46c0      	nop			@ (mov r8, r8)
20000368:	46c0      	nop			@ (mov r8, r8)
2000036a:	46bd      	mov	sp, r7
2000036c:	b004      	add	sp, #16
2000036e:	bd80      	pop	{r7, pc}

20000370 <ascii_init_game>:
20000370:	b590      	push	{r4, r7, lr}
20000372:	b087      	sub	sp, #28
20000374:	af00      	add	r7, sp, #0
20000376:	6078      	str	r0, [r7, #4]
20000378:	6039      	str	r1, [r7, #0]
2000037a:	687b      	ldr	r3, [r7, #4]
2000037c:	0018      	movs	r0, r3
2000037e:	f7ff ffda 	bl	20000336 <ascii_draw_name>
20000382:	683b      	ldr	r3, [r7, #0]
20000384:	0018      	movs	r0, r3
20000386:	f7ff ffd6 	bl	20000336 <ascii_draw_name>
2000038a:	240c      	movs	r4, #12
2000038c:	193b      	adds	r3, r7, r4
2000038e:	4a18      	ldr	r2, [pc, #96]	@ (200003f0 <ascii_init_game+0x80>)
20000390:	ca03      	ldmia	r2!, {r0, r1}
20000392:	c303      	stmia	r3!, {r0, r1}
20000394:	687b      	ldr	r3, [r7, #4]
20000396:	7c1b      	ldrb	r3, [r3, #16]
20000398:	2102      	movs	r1, #2
2000039a:	0018      	movs	r0, r3
2000039c:	f7ff ff86 	bl	200002ac <ascii_goto>
200003a0:	193b      	adds	r3, r7, r4
200003a2:	617b      	str	r3, [r7, #20]
200003a4:	e006      	b.n	200003b4 <ascii_init_game+0x44>
200003a6:	697b      	ldr	r3, [r7, #20]
200003a8:	1c5a      	adds	r2, r3, #1
200003aa:	617a      	str	r2, [r7, #20]
200003ac:	781b      	ldrb	r3, [r3, #0]
200003ae:	0018      	movs	r0, r3
200003b0:	f7ff ff97 	bl	200002e2 <ascii_write_char>
200003b4:	697b      	ldr	r3, [r7, #20]
200003b6:	781b      	ldrb	r3, [r3, #0]
200003b8:	2b00      	cmp	r3, #0
200003ba:	d1f4      	bne.n	200003a6 <ascii_init_game+0x36>
200003bc:	683b      	ldr	r3, [r7, #0]
200003be:	7c1b      	ldrb	r3, [r3, #16]
200003c0:	2102      	movs	r1, #2
200003c2:	0018      	movs	r0, r3
200003c4:	f7ff ff72 	bl	200002ac <ascii_goto>
200003c8:	230c      	movs	r3, #12
200003ca:	18fb      	adds	r3, r7, r3
200003cc:	617b      	str	r3, [r7, #20]
200003ce:	e006      	b.n	200003de <ascii_init_game+0x6e>
200003d0:	697b      	ldr	r3, [r7, #20]
200003d2:	1c5a      	adds	r2, r3, #1
200003d4:	617a      	str	r2, [r7, #20]
200003d6:	781b      	ldrb	r3, [r3, #0]
200003d8:	0018      	movs	r0, r3
200003da:	f7ff ff82 	bl	200002e2 <ascii_write_char>
200003de:	697b      	ldr	r3, [r7, #20]
200003e0:	781b      	ldrb	r3, [r3, #0]
200003e2:	2b00      	cmp	r3, #0
200003e4:	d1f4      	bne.n	200003d0 <ascii_init_game+0x60>
200003e6:	46c0      	nop			@ (mov r8, r8)
200003e8:	46c0      	nop			@ (mov r8, r8)
200003ea:	46bd      	mov	sp, r7
200003ec:	b007      	add	sp, #28
200003ee:	bd90      	pop	{r4, r7, pc}
200003f0:	20002d18 	.word	0x20002d18

200003f4 <ascii_player_wins>:
200003f4:	b580      	push	{r7, lr}
200003f6:	b086      	sub	sp, #24
200003f8:	af00      	add	r7, sp, #0
200003fa:	6078      	str	r0, [r7, #4]
200003fc:	f000 f8f9 	bl	200005f2 <graphic_clear_screen>
20000400:	230c      	movs	r3, #12
20000402:	18fb      	adds	r3, r7, r3
20000404:	4a15      	ldr	r2, [pc, #84]	@ (2000045c <ascii_player_wins+0x68>)
20000406:	6811      	ldr	r1, [r2, #0]
20000408:	6019      	str	r1, [r3, #0]
2000040a:	8892      	ldrh	r2, [r2, #4]
2000040c:	809a      	strh	r2, [r3, #4]
2000040e:	2101      	movs	r1, #1
20000410:	2001      	movs	r0, #1
20000412:	f7ff ff4b 	bl	200002ac <ascii_goto>
20000416:	687b      	ldr	r3, [r7, #4]
20000418:	617b      	str	r3, [r7, #20]
2000041a:	e006      	b.n	2000042a <ascii_player_wins+0x36>
2000041c:	697b      	ldr	r3, [r7, #20]
2000041e:	1c5a      	adds	r2, r3, #1
20000420:	617a      	str	r2, [r7, #20]
20000422:	781b      	ldrb	r3, [r3, #0]
20000424:	0018      	movs	r0, r3
20000426:	f7ff ff5c 	bl	200002e2 <ascii_write_char>
2000042a:	697b      	ldr	r3, [r7, #20]
2000042c:	781b      	ldrb	r3, [r3, #0]
2000042e:	2b00      	cmp	r3, #0
20000430:	d1f4      	bne.n	2000041c <ascii_player_wins+0x28>
20000432:	230c      	movs	r3, #12
20000434:	18fb      	adds	r3, r7, r3
20000436:	617b      	str	r3, [r7, #20]
20000438:	e006      	b.n	20000448 <ascii_player_wins+0x54>
2000043a:	697b      	ldr	r3, [r7, #20]
2000043c:	1c5a      	adds	r2, r3, #1
2000043e:	617a      	str	r2, [r7, #20]
20000440:	781b      	ldrb	r3, [r3, #0]
20000442:	0018      	movs	r0, r3
20000444:	f7ff ff4d 	bl	200002e2 <ascii_write_char>
20000448:	697b      	ldr	r3, [r7, #20]
2000044a:	781b      	ldrb	r3, [r3, #0]
2000044c:	2b00      	cmp	r3, #0
2000044e:	d1f4      	bne.n	2000043a <ascii_player_wins+0x46>
20000450:	46c0      	nop			@ (mov r8, r8)
20000452:	46c0      	nop			@ (mov r8, r8)
20000454:	46bd      	mov	sp, r7
20000456:	b006      	add	sp, #24
20000458:	bd80      	pop	{r7, pc}
2000045a:	46c0      	nop			@ (mov r8, r8)
2000045c:	20002d20 	.word	0x20002d20

20000460 <ascii_start_screen>:
20000460:	b5b0      	push	{r4, r5, r7, lr}
20000462:	b08c      	sub	sp, #48	@ 0x30
20000464:	af00      	add	r7, sp, #0
20000466:	4b20      	ldr	r3, [pc, #128]	@ (200004e8 <ascii_start_screen+0x88>)
20000468:	2202      	movs	r2, #2
2000046a:	0019      	movs	r1, r3
2000046c:	2001      	movs	r0, #1
2000046e:	f7ff feb5 	bl	200001dc <ascii_command>
20000472:	2514      	movs	r5, #20
20000474:	197b      	adds	r3, r7, r5
20000476:	4a1d      	ldr	r2, [pc, #116]	@ (200004ec <ascii_start_screen+0x8c>)
20000478:	ca13      	ldmia	r2!, {r0, r1, r4}
2000047a:	c313      	stmia	r3!, {r0, r1, r4}
2000047c:	ca03      	ldmia	r2!, {r0, r1}
2000047e:	c303      	stmia	r3!, {r0, r1}
20000480:	8812      	ldrh	r2, [r2, #0]
20000482:	801a      	strh	r2, [r3, #0]
20000484:	003b      	movs	r3, r7
20000486:	4a1a      	ldr	r2, [pc, #104]	@ (200004f0 <ascii_start_screen+0x90>)
20000488:	ca13      	ldmia	r2!, {r0, r1, r4}
2000048a:	c313      	stmia	r3!, {r0, r1, r4}
2000048c:	6811      	ldr	r1, [r2, #0]
2000048e:	6019      	str	r1, [r3, #0]
20000490:	8892      	ldrh	r2, [r2, #4]
20000492:	809a      	strh	r2, [r3, #4]
20000494:	2101      	movs	r1, #1
20000496:	2001      	movs	r0, #1
20000498:	f7ff ff08 	bl	200002ac <ascii_goto>
2000049c:	197b      	adds	r3, r7, r5
2000049e:	62fb      	str	r3, [r7, #44]	@ 0x2c
200004a0:	e006      	b.n	200004b0 <ascii_start_screen+0x50>
200004a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200004a4:	1c5a      	adds	r2, r3, #1
200004a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	0018      	movs	r0, r3
200004ac:	f7ff ff19 	bl	200002e2 <ascii_write_char>
200004b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200004b2:	781b      	ldrb	r3, [r3, #0]
200004b4:	2b00      	cmp	r3, #0
200004b6:	d1f4      	bne.n	200004a2 <ascii_start_screen+0x42>
200004b8:	2102      	movs	r1, #2
200004ba:	2001      	movs	r0, #1
200004bc:	f7ff fef6 	bl	200002ac <ascii_goto>
200004c0:	003b      	movs	r3, r7
200004c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
200004c4:	e006      	b.n	200004d4 <ascii_start_screen+0x74>
200004c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200004c8:	1c5a      	adds	r2, r3, #1
200004ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
200004cc:	781b      	ldrb	r3, [r3, #0]
200004ce:	0018      	movs	r0, r3
200004d0:	f7ff ff07 	bl	200002e2 <ascii_write_char>
200004d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200004d6:	781b      	ldrb	r3, [r3, #0]
200004d8:	2b00      	cmp	r3, #0
200004da:	d1f4      	bne.n	200004c6 <ascii_start_screen+0x66>
200004dc:	46c0      	nop			@ (mov r8, r8)
200004de:	46c0      	nop			@ (mov r8, r8)
200004e0:	46bd      	mov	sp, r7
200004e2:	b00c      	add	sp, #48	@ 0x30
200004e4:	bdb0      	pop	{r4, r5, r7, pc}
200004e6:	46c0      	nop			@ (mov r8, r8)
200004e8:	20000593 	.word	0x20000593
200004ec:	20002d28 	.word	0x20002d28
200004f0:	20002d40 	.word	0x20002d40

200004f4 <delay_250ns>:
200004f4:	b580      	push	{r7, lr}
200004f6:	b082      	sub	sp, #8
200004f8:	af00      	add	r7, sp, #0
200004fa:	4b13      	ldr	r3, [pc, #76]	@ (20000548 <delay_250ns+0x54>)
200004fc:	607b      	str	r3, [r7, #4]
200004fe:	687b      	ldr	r3, [r7, #4]
20000500:	2200      	movs	r2, #0
20000502:	601a      	str	r2, [r3, #0]
20000504:	2329      	movs	r3, #41	@ 0x29
20000506:	021b      	lsls	r3, r3, #8
20000508:	0a19      	lsrs	r1, r3, #8
2000050a:	687b      	ldr	r3, [r7, #4]
2000050c:	685a      	ldr	r2, [r3, #4]
2000050e:	0209      	lsls	r1, r1, #8
20000510:	0a09      	lsrs	r1, r1, #8
20000512:	0e12      	lsrs	r2, r2, #24
20000514:	0612      	lsls	r2, r2, #24
20000516:	430a      	orrs	r2, r1
20000518:	605a      	str	r2, [r3, #4]
2000051a:	687b      	ldr	r3, [r7, #4]
2000051c:	689a      	ldr	r2, [r3, #8]
2000051e:	0e12      	lsrs	r2, r2, #24
20000520:	0612      	lsls	r2, r2, #24
20000522:	609a      	str	r2, [r3, #8]
20000524:	687b      	ldr	r3, [r7, #4]
20000526:	2205      	movs	r2, #5
20000528:	601a      	str	r2, [r3, #0]
2000052a:	46c0      	nop			@ (mov r8, r8)
2000052c:	687b      	ldr	r3, [r7, #4]
2000052e:	681b      	ldr	r3, [r3, #0]
20000530:	03db      	lsls	r3, r3, #15
20000532:	0fdb      	lsrs	r3, r3, #31
20000534:	b2db      	uxtb	r3, r3
20000536:	2b00      	cmp	r3, #0
20000538:	d0f8      	beq.n	2000052c <delay_250ns+0x38>
2000053a:	687b      	ldr	r3, [r7, #4]
2000053c:	2200      	movs	r2, #0
2000053e:	601a      	str	r2, [r3, #0]
20000540:	46c0      	nop			@ (mov r8, r8)
20000542:	46bd      	mov	sp, r7
20000544:	b002      	add	sp, #8
20000546:	bd80      	pop	{r7, pc}
20000548:	e000e010 	.word	0xe000e010

2000054c <delay_mikro>:
2000054c:	b580      	push	{r7, lr}
2000054e:	b082      	sub	sp, #8
20000550:	af00      	add	r7, sp, #0
20000552:	6078      	str	r0, [r7, #4]
20000554:	687b      	ldr	r3, [r7, #4]
20000556:	22fa      	movs	r2, #250	@ 0xfa
20000558:	0091      	lsls	r1, r2, #2
2000055a:	0018      	movs	r0, r3
2000055c:	f001 fda8 	bl	200020b0 <__udivsi3>
20000560:	0003      	movs	r3, r0
20000562:	607b      	str	r3, [r7, #4]
20000564:	687b      	ldr	r3, [r7, #4]
20000566:	3301      	adds	r3, #1
20000568:	607b      	str	r3, [r7, #4]
2000056a:	e00a      	b.n	20000582 <delay_mikro+0x36>
2000056c:	f7ff ffc2 	bl	200004f4 <delay_250ns>
20000570:	f7ff ffc0 	bl	200004f4 <delay_250ns>
20000574:	f7ff ffbe 	bl	200004f4 <delay_250ns>
20000578:	f7ff ffbc 	bl	200004f4 <delay_250ns>
2000057c:	687b      	ldr	r3, [r7, #4]
2000057e:	3b01      	subs	r3, #1
20000580:	607b      	str	r3, [r7, #4]
20000582:	687b      	ldr	r3, [r7, #4]
20000584:	2b00      	cmp	r3, #0
20000586:	d1f1      	bne.n	2000056c <delay_mikro+0x20>
20000588:	46c0      	nop			@ (mov r8, r8)
2000058a:	46c0      	nop			@ (mov r8, r8)
2000058c:	46bd      	mov	sp, r7
2000058e:	b002      	add	sp, #8
20000590:	bd80      	pop	{r7, pc}

20000592 <delay_milli>:
20000592:	b580      	push	{r7, lr}
20000594:	b084      	sub	sp, #16
20000596:	af00      	add	r7, sp, #0
20000598:	6078      	str	r0, [r7, #4]
2000059a:	687b      	ldr	r3, [r7, #4]
2000059c:	22fa      	movs	r2, #250	@ 0xfa
2000059e:	0091      	lsls	r1, r2, #2
200005a0:	0018      	movs	r0, r3
200005a2:	f001 fd85 	bl	200020b0 <__udivsi3>
200005a6:	0003      	movs	r3, r0
200005a8:	607b      	str	r3, [r7, #4]
200005aa:	687b      	ldr	r3, [r7, #4]
200005ac:	3301      	adds	r3, #1
200005ae:	607b      	str	r3, [r7, #4]
200005b0:	2300      	movs	r3, #0
200005b2:	60fb      	str	r3, [r7, #12]
200005b4:	e00a      	b.n	200005cc <delay_milli+0x3a>
200005b6:	f7ff ff9d 	bl	200004f4 <delay_250ns>
200005ba:	f7ff ff9b 	bl	200004f4 <delay_250ns>
200005be:	f7ff ff99 	bl	200004f4 <delay_250ns>
200005c2:	f7ff ff97 	bl	200004f4 <delay_250ns>
200005c6:	68fb      	ldr	r3, [r7, #12]
200005c8:	3301      	adds	r3, #1
200005ca:	60fb      	str	r3, [r7, #12]
200005cc:	687a      	ldr	r2, [r7, #4]
200005ce:	0013      	movs	r3, r2
200005d0:	015b      	lsls	r3, r3, #5
200005d2:	1a9b      	subs	r3, r3, r2
200005d4:	009b      	lsls	r3, r3, #2
200005d6:	189b      	adds	r3, r3, r2
200005d8:	00db      	lsls	r3, r3, #3
200005da:	001a      	movs	r2, r3
200005dc:	68fb      	ldr	r3, [r7, #12]
200005de:	4293      	cmp	r3, r2
200005e0:	d3e9      	bcc.n	200005b6 <delay_milli+0x24>
200005e2:	46c0      	nop			@ (mov r8, r8)
200005e4:	46c0      	nop			@ (mov r8, r8)
200005e6:	46bd      	mov	sp, r7
200005e8:	b004      	add	sp, #16
200005ea:	bd80      	pop	{r7, pc}

200005ec <graphic_initialize>:
200005ec:	dff0      	.short	0xdff0
200005ee:	4770      	bx	lr
200005f0:	46c0      	nop			@ (mov r8, r8)

200005f2 <graphic_clear_screen>:
200005f2:	dff1      	.short	0xdff1
200005f4:	4770      	bx	lr
200005f6:	46c0      	nop			@ (mov r8, r8)

200005f8 <graphic_pixel_set>:
200005f8:	dff2      	.short	0xdff2
200005fa:	4770      	bx	lr
200005fc:	46c0      	nop			@ (mov r8, r8)

200005fe <graphic_pixel_clear>:
200005fe:	dff3      	.short	0xdff3
20000600:	4770      	bx	lr
20000602:	46c0      	nop			@ (mov r8, r8)

20000604 <draw_line>:
20000604:	b5f0      	push	{r4, r5, r6, r7, lr}
20000606:	b087      	sub	sp, #28
20000608:	af00      	add	r7, sp, #0
2000060a:	6078      	str	r0, [r7, #4]
2000060c:	687b      	ldr	r3, [r7, #4]
2000060e:	2200      	movs	r2, #0
20000610:	569a      	ldrsb	r2, [r3, r2]
20000612:	2510      	movs	r5, #16
20000614:	197b      	adds	r3, r7, r5
20000616:	701a      	strb	r2, [r3, #0]
20000618:	687b      	ldr	r3, [r7, #4]
2000061a:	2201      	movs	r2, #1
2000061c:	569a      	ldrsb	r2, [r3, r2]
2000061e:	210f      	movs	r1, #15
20000620:	187b      	adds	r3, r7, r1
20000622:	701a      	strb	r2, [r3, #0]
20000624:	687b      	ldr	r3, [r7, #4]
20000626:	2202      	movs	r2, #2
20000628:	569a      	ldrsb	r2, [r3, r2]
2000062a:	260e      	movs	r6, #14
2000062c:	19bb      	adds	r3, r7, r6
2000062e:	701a      	strb	r2, [r3, #0]
20000630:	687b      	ldr	r3, [r7, #4]
20000632:	2203      	movs	r2, #3
20000634:	569a      	ldrsb	r2, [r3, r2]
20000636:	200d      	movs	r0, #13
20000638:	183b      	adds	r3, r7, r0
2000063a:	701a      	strb	r2, [r3, #0]
2000063c:	183b      	adds	r3, r7, r0
2000063e:	781b      	ldrb	r3, [r3, #0]
20000640:	b25b      	sxtb	r3, r3
20000642:	b2da      	uxtb	r2, r3
20000644:	187b      	adds	r3, r7, r1
20000646:	781b      	ldrb	r3, [r3, #0]
20000648:	b25b      	sxtb	r3, r3
2000064a:	b2db      	uxtb	r3, r3
2000064c:	1ad3      	subs	r3, r2, r3
2000064e:	b2db      	uxtb	r3, r3
20000650:	b25b      	sxtb	r3, r3
20000652:	0018      	movs	r0, r3
20000654:	f000 fa17 	bl	20000a86 <abs>
20000658:	0003      	movs	r3, r0
2000065a:	001c      	movs	r4, r3
2000065c:	19bb      	adds	r3, r7, r6
2000065e:	781b      	ldrb	r3, [r3, #0]
20000660:	b25b      	sxtb	r3, r3
20000662:	b2da      	uxtb	r2, r3
20000664:	197b      	adds	r3, r7, r5
20000666:	781b      	ldrb	r3, [r3, #0]
20000668:	b25b      	sxtb	r3, r3
2000066a:	b2db      	uxtb	r3, r3
2000066c:	1ad3      	subs	r3, r2, r3
2000066e:	b2db      	uxtb	r3, r3
20000670:	b25b      	sxtb	r3, r3
20000672:	0018      	movs	r0, r3
20000674:	f000 fa07 	bl	20000a86 <abs>
20000678:	0003      	movs	r3, r0
2000067a:	2201      	movs	r2, #1
2000067c:	429c      	cmp	r4, r3
2000067e:	dc01      	bgt.n	20000684 <draw_line+0x80>
20000680:	2300      	movs	r3, #0
20000682:	1c1a      	adds	r2, r3, #0
20000684:	b2d2      	uxtb	r2, r2
20000686:	2114      	movs	r1, #20
20000688:	187b      	adds	r3, r7, r1
2000068a:	701a      	strb	r2, [r3, #0]
2000068c:	187b      	adds	r3, r7, r1
2000068e:	781b      	ldrb	r3, [r3, #0]
20000690:	2b00      	cmp	r3, #0
20000692:	d00f      	beq.n	200006b4 <draw_line+0xb0>
20000694:	230f      	movs	r3, #15
20000696:	18fa      	adds	r2, r7, r3
20000698:	2310      	movs	r3, #16
2000069a:	18fb      	adds	r3, r7, r3
2000069c:	0011      	movs	r1, r2
2000069e:	0018      	movs	r0, r3
200006a0:	f000 fa08 	bl	20000ab4 <swap>
200006a4:	230d      	movs	r3, #13
200006a6:	18fa      	adds	r2, r7, r3
200006a8:	230e      	movs	r3, #14
200006aa:	18fb      	adds	r3, r7, r3
200006ac:	0011      	movs	r1, r2
200006ae:	0018      	movs	r0, r3
200006b0:	f000 fa00 	bl	20000ab4 <swap>
200006b4:	2110      	movs	r1, #16
200006b6:	187b      	adds	r3, r7, r1
200006b8:	2200      	movs	r2, #0
200006ba:	569a      	ldrsb	r2, [r3, r2]
200006bc:	200e      	movs	r0, #14
200006be:	183b      	adds	r3, r7, r0
200006c0:	781b      	ldrb	r3, [r3, #0]
200006c2:	b25b      	sxtb	r3, r3
200006c4:	429a      	cmp	r2, r3
200006c6:	dd0d      	ble.n	200006e4 <draw_line+0xe0>
200006c8:	183a      	adds	r2, r7, r0
200006ca:	187b      	adds	r3, r7, r1
200006cc:	0011      	movs	r1, r2
200006ce:	0018      	movs	r0, r3
200006d0:	f000 f9f0 	bl	20000ab4 <swap>
200006d4:	230d      	movs	r3, #13
200006d6:	18fa      	adds	r2, r7, r3
200006d8:	230f      	movs	r3, #15
200006da:	18fb      	adds	r3, r7, r3
200006dc:	0011      	movs	r1, r2
200006de:	0018      	movs	r0, r3
200006e0:	f000 f9e8 	bl	20000ab4 <swap>
200006e4:	230e      	movs	r3, #14
200006e6:	18fb      	adds	r3, r7, r3
200006e8:	781b      	ldrb	r3, [r3, #0]
200006ea:	b25b      	sxtb	r3, r3
200006ec:	b2da      	uxtb	r2, r3
200006ee:	2310      	movs	r3, #16
200006f0:	18fb      	adds	r3, r7, r3
200006f2:	781b      	ldrb	r3, [r3, #0]
200006f4:	b25b      	sxtb	r3, r3
200006f6:	b2db      	uxtb	r3, r3
200006f8:	1ad3      	subs	r3, r2, r3
200006fa:	b2da      	uxtb	r2, r3
200006fc:	2313      	movs	r3, #19
200006fe:	18fb      	adds	r3, r7, r3
20000700:	701a      	strb	r2, [r3, #0]
20000702:	260d      	movs	r6, #13
20000704:	19bb      	adds	r3, r7, r6
20000706:	781b      	ldrb	r3, [r3, #0]
20000708:	b25b      	sxtb	r3, r3
2000070a:	b2da      	uxtb	r2, r3
2000070c:	250f      	movs	r5, #15
2000070e:	197b      	adds	r3, r7, r5
20000710:	781b      	ldrb	r3, [r3, #0]
20000712:	b25b      	sxtb	r3, r3
20000714:	b2db      	uxtb	r3, r3
20000716:	1ad3      	subs	r3, r2, r3
20000718:	b2db      	uxtb	r3, r3
2000071a:	b25b      	sxtb	r3, r3
2000071c:	2212      	movs	r2, #18
2000071e:	18bc      	adds	r4, r7, r2
20000720:	0018      	movs	r0, r3
20000722:	f000 f9b0 	bl	20000a86 <abs>
20000726:	0003      	movs	r3, r0
20000728:	7023      	strb	r3, [r4, #0]
2000072a:	2317      	movs	r3, #23
2000072c:	18fb      	adds	r3, r7, r3
2000072e:	2200      	movs	r2, #0
20000730:	701a      	strb	r2, [r3, #0]
20000732:	2316      	movs	r3, #22
20000734:	18fb      	adds	r3, r7, r3
20000736:	197a      	adds	r2, r7, r5
20000738:	7812      	ldrb	r2, [r2, #0]
2000073a:	701a      	strb	r2, [r3, #0]
2000073c:	197b      	adds	r3, r7, r5
2000073e:	2200      	movs	r2, #0
20000740:	569a      	ldrsb	r2, [r3, r2]
20000742:	19bb      	adds	r3, r7, r6
20000744:	781b      	ldrb	r3, [r3, #0]
20000746:	b25b      	sxtb	r3, r3
20000748:	429a      	cmp	r2, r3
2000074a:	da01      	bge.n	20000750 <draw_line+0x14c>
2000074c:	2201      	movs	r2, #1
2000074e:	e001      	b.n	20000754 <draw_line+0x150>
20000750:	2301      	movs	r3, #1
20000752:	425a      	negs	r2, r3
20000754:	2311      	movs	r3, #17
20000756:	18fb      	adds	r3, r7, r3
20000758:	701a      	strb	r2, [r3, #0]
2000075a:	2315      	movs	r3, #21
2000075c:	18fb      	adds	r3, r7, r3
2000075e:	2210      	movs	r2, #16
20000760:	18ba      	adds	r2, r7, r2
20000762:	7812      	ldrb	r2, [r2, #0]
20000764:	701a      	strb	r2, [r3, #0]
20000766:	e04b      	b.n	20000800 <draw_line+0x1fc>
20000768:	2314      	movs	r3, #20
2000076a:	18fb      	adds	r3, r7, r3
2000076c:	781b      	ldrb	r3, [r3, #0]
2000076e:	2b00      	cmp	r3, #0
20000770:	d00c      	beq.n	2000078c <draw_line+0x188>
20000772:	2316      	movs	r3, #22
20000774:	18fb      	adds	r3, r7, r3
20000776:	2200      	movs	r2, #0
20000778:	569a      	ldrsb	r2, [r3, r2]
2000077a:	2315      	movs	r3, #21
2000077c:	18fb      	adds	r3, r7, r3
2000077e:	781b      	ldrb	r3, [r3, #0]
20000780:	b25b      	sxtb	r3, r3
20000782:	0019      	movs	r1, r3
20000784:	0010      	movs	r0, r2
20000786:	f7ff ff37 	bl	200005f8 <graphic_pixel_set>
2000078a:	e00b      	b.n	200007a4 <draw_line+0x1a0>
2000078c:	2315      	movs	r3, #21
2000078e:	18fb      	adds	r3, r7, r3
20000790:	2200      	movs	r2, #0
20000792:	569a      	ldrsb	r2, [r3, r2]
20000794:	2316      	movs	r3, #22
20000796:	18fb      	adds	r3, r7, r3
20000798:	781b      	ldrb	r3, [r3, #0]
2000079a:	b25b      	sxtb	r3, r3
2000079c:	0019      	movs	r1, r3
2000079e:	0010      	movs	r0, r2
200007a0:	f7ff ff2a 	bl	200005f8 <graphic_pixel_set>
200007a4:	2117      	movs	r1, #23
200007a6:	187b      	adds	r3, r7, r1
200007a8:	781a      	ldrb	r2, [r3, #0]
200007aa:	2312      	movs	r3, #18
200007ac:	18fb      	adds	r3, r7, r3
200007ae:	781b      	ldrb	r3, [r3, #0]
200007b0:	18d3      	adds	r3, r2, r3
200007b2:	b2da      	uxtb	r2, r3
200007b4:	187b      	adds	r3, r7, r1
200007b6:	701a      	strb	r2, [r3, #0]
200007b8:	187a      	adds	r2, r7, r1
200007ba:	2013      	movs	r0, #19
200007bc:	183b      	adds	r3, r7, r0
200007be:	7812      	ldrb	r2, [r2, #0]
200007c0:	b252      	sxtb	r2, r2
200007c2:	781b      	ldrb	r3, [r3, #0]
200007c4:	b25b      	sxtb	r3, r3
200007c6:	429a      	cmp	r2, r3
200007c8:	db11      	blt.n	200007ee <draw_line+0x1ea>
200007ca:	2416      	movs	r4, #22
200007cc:	193b      	adds	r3, r7, r4
200007ce:	781a      	ldrb	r2, [r3, #0]
200007d0:	2311      	movs	r3, #17
200007d2:	18fb      	adds	r3, r7, r3
200007d4:	781b      	ldrb	r3, [r3, #0]
200007d6:	18d3      	adds	r3, r2, r3
200007d8:	b2da      	uxtb	r2, r3
200007da:	193b      	adds	r3, r7, r4
200007dc:	701a      	strb	r2, [r3, #0]
200007de:	187b      	adds	r3, r7, r1
200007e0:	781a      	ldrb	r2, [r3, #0]
200007e2:	183b      	adds	r3, r7, r0
200007e4:	781b      	ldrb	r3, [r3, #0]
200007e6:	1ad3      	subs	r3, r2, r3
200007e8:	b2da      	uxtb	r2, r3
200007ea:	187b      	adds	r3, r7, r1
200007ec:	701a      	strb	r2, [r3, #0]
200007ee:	2115      	movs	r1, #21
200007f0:	187b      	adds	r3, r7, r1
200007f2:	781b      	ldrb	r3, [r3, #0]
200007f4:	b25b      	sxtb	r3, r3
200007f6:	b2db      	uxtb	r3, r3
200007f8:	3301      	adds	r3, #1
200007fa:	b2da      	uxtb	r2, r3
200007fc:	187b      	adds	r3, r7, r1
200007fe:	701a      	strb	r2, [r3, #0]
20000800:	230e      	movs	r3, #14
20000802:	18fb      	adds	r3, r7, r3
20000804:	781b      	ldrb	r3, [r3, #0]
20000806:	b25b      	sxtb	r3, r3
20000808:	2215      	movs	r2, #21
2000080a:	18ba      	adds	r2, r7, r2
2000080c:	7812      	ldrb	r2, [r2, #0]
2000080e:	b252      	sxtb	r2, r2
20000810:	429a      	cmp	r2, r3
20000812:	dda9      	ble.n	20000768 <draw_line+0x164>
20000814:	46c0      	nop			@ (mov r8, r8)
20000816:	0018      	movs	r0, r3
20000818:	46bd      	mov	sp, r7
2000081a:	b007      	add	sp, #28
2000081c:	bdf0      	pop	{r4, r5, r6, r7, pc}

2000081e <draw_rect>:
2000081e:	b5f0      	push	{r4, r5, r6, r7, lr}
20000820:	b087      	sub	sp, #28
20000822:	af00      	add	r7, sp, #0
20000824:	6078      	str	r0, [r7, #4]
20000826:	2517      	movs	r5, #23
20000828:	197b      	adds	r3, r7, r5
2000082a:	687a      	ldr	r2, [r7, #4]
2000082c:	7812      	ldrb	r2, [r2, #0]
2000082e:	701a      	strb	r2, [r3, #0]
20000830:	2616      	movs	r6, #22
20000832:	19bb      	adds	r3, r7, r6
20000834:	687a      	ldr	r2, [r7, #4]
20000836:	7852      	ldrb	r2, [r2, #1]
20000838:	701a      	strb	r2, [r3, #0]
2000083a:	2115      	movs	r1, #21
2000083c:	187b      	adds	r3, r7, r1
2000083e:	687a      	ldr	r2, [r7, #4]
20000840:	7892      	ldrb	r2, [r2, #2]
20000842:	701a      	strb	r2, [r3, #0]
20000844:	2314      	movs	r3, #20
20000846:	18fb      	adds	r3, r7, r3
20000848:	687a      	ldr	r2, [r7, #4]
2000084a:	78d2      	ldrb	r2, [r2, #3]
2000084c:	701a      	strb	r2, [r3, #0]
2000084e:	2010      	movs	r0, #16
20000850:	183b      	adds	r3, r7, r0
20000852:	197a      	adds	r2, r7, r5
20000854:	7812      	ldrb	r2, [r2, #0]
20000856:	701a      	strb	r2, [r3, #0]
20000858:	183b      	adds	r3, r7, r0
2000085a:	19ba      	adds	r2, r7, r6
2000085c:	7812      	ldrb	r2, [r2, #0]
2000085e:	705a      	strb	r2, [r3, #1]
20000860:	197b      	adds	r3, r7, r5
20000862:	781a      	ldrb	r2, [r3, #0]
20000864:	187b      	adds	r3, r7, r1
20000866:	781b      	ldrb	r3, [r3, #0]
20000868:	18d3      	adds	r3, r2, r3
2000086a:	b2db      	uxtb	r3, r3
2000086c:	b25a      	sxtb	r2, r3
2000086e:	240c      	movs	r4, #12
20000870:	193b      	adds	r3, r7, r4
20000872:	701a      	strb	r2, [r3, #0]
20000874:	193b      	adds	r3, r7, r4
20000876:	19ba      	adds	r2, r7, r6
20000878:	7812      	ldrb	r2, [r2, #0]
2000087a:	705a      	strb	r2, [r3, #1]
2000087c:	2408      	movs	r4, #8
2000087e:	193b      	adds	r3, r7, r4
20000880:	183a      	adds	r2, r7, r0
20000882:	8812      	ldrh	r2, [r2, #0]
20000884:	801a      	strh	r2, [r3, #0]
20000886:	193b      	adds	r3, r7, r4
20000888:	2102      	movs	r1, #2
2000088a:	220c      	movs	r2, #12
2000088c:	18ba      	adds	r2, r7, r2
2000088e:	8812      	ldrh	r2, [r2, #0]
20000890:	525a      	strh	r2, [r3, r1]
20000892:	193b      	adds	r3, r7, r4
20000894:	0018      	movs	r0, r3
20000896:	f7ff feb5 	bl	20000604 <draw_line>
2000089a:	197b      	adds	r3, r7, r5
2000089c:	781a      	ldrb	r2, [r3, #0]
2000089e:	2115      	movs	r1, #21
200008a0:	187b      	adds	r3, r7, r1
200008a2:	781b      	ldrb	r3, [r3, #0]
200008a4:	18d3      	adds	r3, r2, r3
200008a6:	b2db      	uxtb	r3, r3
200008a8:	b25a      	sxtb	r2, r3
200008aa:	0021      	movs	r1, r4
200008ac:	187b      	adds	r3, r7, r1
200008ae:	701a      	strb	r2, [r3, #0]
200008b0:	19bb      	adds	r3, r7, r6
200008b2:	781a      	ldrb	r2, [r3, #0]
200008b4:	2314      	movs	r3, #20
200008b6:	18fb      	adds	r3, r7, r3
200008b8:	781b      	ldrb	r3, [r3, #0]
200008ba:	18d3      	adds	r3, r2, r3
200008bc:	b2db      	uxtb	r3, r3
200008be:	b25a      	sxtb	r2, r3
200008c0:	187b      	adds	r3, r7, r1
200008c2:	70da      	strb	r2, [r3, #3]
200008c4:	000c      	movs	r4, r1
200008c6:	187b      	adds	r3, r7, r1
200008c8:	0018      	movs	r0, r3
200008ca:	f7ff fe9b 	bl	20000604 <draw_line>
200008ce:	19bb      	adds	r3, r7, r6
200008d0:	781a      	ldrb	r2, [r3, #0]
200008d2:	2314      	movs	r3, #20
200008d4:	18fb      	adds	r3, r7, r3
200008d6:	781b      	ldrb	r3, [r3, #0]
200008d8:	18d3      	adds	r3, r2, r3
200008da:	b2db      	uxtb	r3, r3
200008dc:	b25a      	sxtb	r2, r3
200008de:	0021      	movs	r1, r4
200008e0:	187b      	adds	r3, r7, r1
200008e2:	705a      	strb	r2, [r3, #1]
200008e4:	187b      	adds	r3, r7, r1
200008e6:	197a      	adds	r2, r7, r5
200008e8:	7812      	ldrb	r2, [r2, #0]
200008ea:	701a      	strb	r2, [r3, #0]
200008ec:	000c      	movs	r4, r1
200008ee:	187b      	adds	r3, r7, r1
200008f0:	0018      	movs	r0, r3
200008f2:	f7ff fe87 	bl	20000604 <draw_line>
200008f6:	0021      	movs	r1, r4
200008f8:	187b      	adds	r3, r7, r1
200008fa:	197a      	adds	r2, r7, r5
200008fc:	7812      	ldrb	r2, [r2, #0]
200008fe:	709a      	strb	r2, [r3, #2]
20000900:	187b      	adds	r3, r7, r1
20000902:	19ba      	adds	r2, r7, r6
20000904:	7812      	ldrb	r2, [r2, #0]
20000906:	70da      	strb	r2, [r3, #3]
20000908:	187b      	adds	r3, r7, r1
2000090a:	0018      	movs	r0, r3
2000090c:	f7ff fe7a 	bl	20000604 <draw_line>
20000910:	46c0      	nop			@ (mov r8, r8)
20000912:	0018      	movs	r0, r3
20000914:	46bd      	mov	sp, r7
20000916:	b007      	add	sp, #28
20000918:	bdf0      	pop	{r4, r5, r6, r7, pc}

2000091a <draw_poly>:
2000091a:	b5f0      	push	{r4, r5, r6, r7, lr}
2000091c:	b087      	sub	sp, #28
2000091e:	af00      	add	r7, sp, #0
20000920:	6078      	str	r0, [r7, #4]
20000922:	687b      	ldr	r3, [r7, #4]
20000924:	2200      	movs	r2, #0
20000926:	569a      	ldrsb	r2, [r3, r2]
20000928:	2110      	movs	r1, #16
2000092a:	187b      	adds	r3, r7, r1
2000092c:	701a      	strb	r2, [r3, #0]
2000092e:	687b      	ldr	r3, [r7, #4]
20000930:	2201      	movs	r2, #1
20000932:	569a      	ldrsb	r2, [r3, r2]
20000934:	187b      	adds	r3, r7, r1
20000936:	705a      	strb	r2, [r3, #1]
20000938:	687b      	ldr	r3, [r7, #4]
2000093a:	685b      	ldr	r3, [r3, #4]
2000093c:	617b      	str	r3, [r7, #20]
2000093e:	e028      	b.n	20000992 <draw_poly+0x78>
20000940:	697b      	ldr	r3, [r7, #20]
20000942:	2200      	movs	r2, #0
20000944:	569a      	ldrsb	r2, [r3, r2]
20000946:	200c      	movs	r0, #12
20000948:	183b      	adds	r3, r7, r0
2000094a:	701a      	strb	r2, [r3, #0]
2000094c:	697b      	ldr	r3, [r7, #20]
2000094e:	2201      	movs	r2, #1
20000950:	569a      	ldrsb	r2, [r3, r2]
20000952:	183b      	adds	r3, r7, r0
20000954:	705a      	strb	r2, [r3, #1]
20000956:	2508      	movs	r5, #8
20000958:	197b      	adds	r3, r7, r5
2000095a:	2610      	movs	r6, #16
2000095c:	19ba      	adds	r2, r7, r6
2000095e:	8812      	ldrh	r2, [r2, #0]
20000960:	801a      	strh	r2, [r3, #0]
20000962:	197b      	adds	r3, r7, r5
20000964:	2102      	movs	r1, #2
20000966:	0004      	movs	r4, r0
20000968:	183a      	adds	r2, r7, r0
2000096a:	8812      	ldrh	r2, [r2, #0]
2000096c:	525a      	strh	r2, [r3, r1]
2000096e:	197b      	adds	r3, r7, r5
20000970:	0018      	movs	r0, r3
20000972:	f7ff fe47 	bl	20000604 <draw_line>
20000976:	0020      	movs	r0, r4
20000978:	183b      	adds	r3, r7, r0
2000097a:	2200      	movs	r2, #0
2000097c:	569a      	ldrsb	r2, [r3, r2]
2000097e:	19bb      	adds	r3, r7, r6
20000980:	701a      	strb	r2, [r3, #0]
20000982:	183b      	adds	r3, r7, r0
20000984:	2201      	movs	r2, #1
20000986:	569a      	ldrsb	r2, [r3, r2]
20000988:	19bb      	adds	r3, r7, r6
2000098a:	705a      	strb	r2, [r3, #1]
2000098c:	697b      	ldr	r3, [r7, #20]
2000098e:	685b      	ldr	r3, [r3, #4]
20000990:	617b      	str	r3, [r7, #20]
20000992:	697b      	ldr	r3, [r7, #20]
20000994:	2b00      	cmp	r3, #0
20000996:	d1d3      	bne.n	20000940 <draw_poly+0x26>
20000998:	46c0      	nop			@ (mov r8, r8)
2000099a:	0018      	movs	r0, r3
2000099c:	46bd      	mov	sp, r7
2000099e:	b007      	add	sp, #28
200009a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

200009a2 <draw_object>:
200009a2:	b590      	push	{r4, r7, lr}
200009a4:	b087      	sub	sp, #28
200009a6:	af00      	add	r7, sp, #0
200009a8:	6078      	str	r0, [r7, #4]
200009aa:	687b      	ldr	r3, [r7, #4]
200009ac:	68db      	ldr	r3, [r3, #12]
200009ae:	613b      	str	r3, [r7, #16]
200009b0:	687b      	ldr	r3, [r7, #4]
200009b2:	691b      	ldr	r3, [r3, #16]
200009b4:	60fb      	str	r3, [r7, #12]
200009b6:	687b      	ldr	r3, [r7, #4]
200009b8:	681b      	ldr	r3, [r3, #0]
200009ba:	330c      	adds	r3, #12
200009bc:	60bb      	str	r3, [r7, #8]
200009be:	2317      	movs	r3, #23
200009c0:	18fb      	adds	r3, r7, r3
200009c2:	2200      	movs	r2, #0
200009c4:	701a      	strb	r2, [r3, #0]
200009c6:	e01c      	b.n	20000a02 <draw_object+0x60>
200009c8:	2417      	movs	r4, #23
200009ca:	193b      	adds	r3, r7, r4
200009cc:	781b      	ldrb	r3, [r3, #0]
200009ce:	005b      	lsls	r3, r3, #1
200009d0:	68ba      	ldr	r2, [r7, #8]
200009d2:	18d3      	adds	r3, r2, r3
200009d4:	781b      	ldrb	r3, [r3, #0]
200009d6:	b25b      	sxtb	r3, r3
200009d8:	001a      	movs	r2, r3
200009da:	693b      	ldr	r3, [r7, #16]
200009dc:	18d0      	adds	r0, r2, r3
200009de:	193b      	adds	r3, r7, r4
200009e0:	781b      	ldrb	r3, [r3, #0]
200009e2:	005b      	lsls	r3, r3, #1
200009e4:	68ba      	ldr	r2, [r7, #8]
200009e6:	18d3      	adds	r3, r2, r3
200009e8:	785b      	ldrb	r3, [r3, #1]
200009ea:	b25b      	sxtb	r3, r3
200009ec:	001a      	movs	r2, r3
200009ee:	68fb      	ldr	r3, [r7, #12]
200009f0:	18d3      	adds	r3, r2, r3
200009f2:	0019      	movs	r1, r3
200009f4:	f7ff fe00 	bl	200005f8 <graphic_pixel_set>
200009f8:	193b      	adds	r3, r7, r4
200009fa:	781a      	ldrb	r2, [r3, #0]
200009fc:	193b      	adds	r3, r7, r4
200009fe:	3201      	adds	r2, #1
20000a00:	701a      	strb	r2, [r3, #0]
20000a02:	2317      	movs	r3, #23
20000a04:	18fb      	adds	r3, r7, r3
20000a06:	781b      	ldrb	r3, [r3, #0]
20000a08:	2b1f      	cmp	r3, #31
20000a0a:	d9dd      	bls.n	200009c8 <draw_object+0x26>
20000a0c:	46c0      	nop			@ (mov r8, r8)
20000a0e:	46c0      	nop			@ (mov r8, r8)
20000a10:	46bd      	mov	sp, r7
20000a12:	b007      	add	sp, #28
20000a14:	bd90      	pop	{r4, r7, pc}

20000a16 <clear_object>:
20000a16:	b580      	push	{r7, lr}
20000a18:	b088      	sub	sp, #32
20000a1a:	af00      	add	r7, sp, #0
20000a1c:	6078      	str	r0, [r7, #4]
20000a1e:	687b      	ldr	r3, [r7, #4]
20000a20:	68db      	ldr	r3, [r3, #12]
20000a22:	61bb      	str	r3, [r7, #24]
20000a24:	687b      	ldr	r3, [r7, #4]
20000a26:	691b      	ldr	r3, [r3, #16]
20000a28:	617b      	str	r3, [r7, #20]
20000a2a:	687b      	ldr	r3, [r7, #4]
20000a2c:	681b      	ldr	r3, [r3, #0]
20000a2e:	330c      	adds	r3, #12
20000a30:	613b      	str	r3, [r7, #16]
20000a32:	230f      	movs	r3, #15
20000a34:	18fb      	adds	r3, r7, r3
20000a36:	2220      	movs	r2, #32
20000a38:	701a      	strb	r2, [r3, #0]
20000a3a:	2300      	movs	r3, #0
20000a3c:	61fb      	str	r3, [r7, #28]
20000a3e:	e017      	b.n	20000a70 <clear_object+0x5a>
20000a40:	69fb      	ldr	r3, [r7, #28]
20000a42:	005b      	lsls	r3, r3, #1
20000a44:	693a      	ldr	r2, [r7, #16]
20000a46:	18d3      	adds	r3, r2, r3
20000a48:	781b      	ldrb	r3, [r3, #0]
20000a4a:	b25b      	sxtb	r3, r3
20000a4c:	001a      	movs	r2, r3
20000a4e:	69bb      	ldr	r3, [r7, #24]
20000a50:	18d0      	adds	r0, r2, r3
20000a52:	69fb      	ldr	r3, [r7, #28]
20000a54:	005b      	lsls	r3, r3, #1
20000a56:	693a      	ldr	r2, [r7, #16]
20000a58:	18d3      	adds	r3, r2, r3
20000a5a:	785b      	ldrb	r3, [r3, #1]
20000a5c:	b25b      	sxtb	r3, r3
20000a5e:	001a      	movs	r2, r3
20000a60:	697b      	ldr	r3, [r7, #20]
20000a62:	18d3      	adds	r3, r2, r3
20000a64:	0019      	movs	r1, r3
20000a66:	f7ff fdca 	bl	200005fe <graphic_pixel_clear>
20000a6a:	69fb      	ldr	r3, [r7, #28]
20000a6c:	3301      	adds	r3, #1
20000a6e:	61fb      	str	r3, [r7, #28]
20000a70:	230f      	movs	r3, #15
20000a72:	18fb      	adds	r3, r7, r3
20000a74:	781b      	ldrb	r3, [r3, #0]
20000a76:	69fa      	ldr	r2, [r7, #28]
20000a78:	429a      	cmp	r2, r3
20000a7a:	dbe1      	blt.n	20000a40 <clear_object+0x2a>
20000a7c:	46c0      	nop			@ (mov r8, r8)
20000a7e:	46c0      	nop			@ (mov r8, r8)
20000a80:	46bd      	mov	sp, r7
20000a82:	b008      	add	sp, #32
20000a84:	bd80      	pop	{r7, pc}

20000a86 <abs>:
20000a86:	b580      	push	{r7, lr}
20000a88:	b082      	sub	sp, #8
20000a8a:	af00      	add	r7, sp, #0
20000a8c:	0002      	movs	r2, r0
20000a8e:	1dfb      	adds	r3, r7, #7
20000a90:	701a      	strb	r2, [r3, #0]
20000a92:	1dfb      	adds	r3, r7, #7
20000a94:	781b      	ldrb	r3, [r3, #0]
20000a96:	2b7f      	cmp	r3, #127	@ 0x7f
20000a98:	d905      	bls.n	20000aa6 <abs+0x20>
20000a9a:	1dfb      	adds	r3, r7, #7
20000a9c:	781b      	ldrb	r3, [r3, #0]
20000a9e:	425b      	negs	r3, r3
20000aa0:	b2db      	uxtb	r3, r3
20000aa2:	b25b      	sxtb	r3, r3
20000aa4:	e002      	b.n	20000aac <abs+0x26>
20000aa6:	1dfb      	adds	r3, r7, #7
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	b25b      	sxtb	r3, r3
20000aac:	0018      	movs	r0, r3
20000aae:	46bd      	mov	sp, r7
20000ab0:	b002      	add	sp, #8
20000ab2:	bd80      	pop	{r7, pc}

20000ab4 <swap>:
20000ab4:	b580      	push	{r7, lr}
20000ab6:	b084      	sub	sp, #16
20000ab8:	af00      	add	r7, sp, #0
20000aba:	6078      	str	r0, [r7, #4]
20000abc:	6039      	str	r1, [r7, #0]
20000abe:	687b      	ldr	r3, [r7, #4]
20000ac0:	2200      	movs	r2, #0
20000ac2:	569a      	ldrsb	r2, [r3, r2]
20000ac4:	210f      	movs	r1, #15
20000ac6:	187b      	adds	r3, r7, r1
20000ac8:	701a      	strb	r2, [r3, #0]
20000aca:	683b      	ldr	r3, [r7, #0]
20000acc:	2200      	movs	r2, #0
20000ace:	569a      	ldrsb	r2, [r3, r2]
20000ad0:	687b      	ldr	r3, [r7, #4]
20000ad2:	701a      	strb	r2, [r3, #0]
20000ad4:	187b      	adds	r3, r7, r1
20000ad6:	2200      	movs	r2, #0
20000ad8:	569a      	ldrsb	r2, [r3, r2]
20000ada:	683b      	ldr	r3, [r7, #0]
20000adc:	701a      	strb	r2, [r3, #0]
20000ade:	46c0      	nop			@ (mov r8, r8)
20000ae0:	46bd      	mov	sp, r7
20000ae2:	b004      	add	sp, #16
20000ae4:	bd80      	pop	{r7, pc}
	...

20000ae8 <keyb>:
20000ae8:	b5b0      	push	{r4, r5, r7, lr}
20000aea:	b084      	sub	sp, #16
20000aec:	af00      	add	r7, sp, #0
20000aee:	4b28      	ldr	r3, [pc, #160]	@ (20000b90 <keyb+0xa8>)
20000af0:	2200      	movs	r2, #0
20000af2:	711a      	strb	r2, [r3, #4]
20000af4:	4b27      	ldr	r3, [pc, #156]	@ (20000b94 <keyb+0xac>)
20000af6:	2200      	movs	r2, #0
20000af8:	701a      	strb	r2, [r3, #0]
20000afa:	230f      	movs	r3, #15
20000afc:	18fb      	adds	r3, r7, r3
20000afe:	2204      	movs	r2, #4
20000b00:	701a      	strb	r2, [r3, #0]
20000b02:	2301      	movs	r3, #1
20000b04:	60bb      	str	r3, [r7, #8]
20000b06:	e039      	b.n	20000b7c <keyb+0x94>
20000b08:	230f      	movs	r3, #15
20000b0a:	18fb      	adds	r3, r7, r3
20000b0c:	781b      	ldrb	r3, [r3, #0]
20000b0e:	2b00      	cmp	r3, #0
20000b10:	d038      	beq.n	20000b84 <keyb+0x9c>
20000b12:	68bb      	ldr	r3, [r7, #8]
20000b14:	0018      	movs	r0, r3
20000b16:	f000 f841 	bl	20000b9c <activate_row>
20000b1a:	f000 f86f 	bl	20000bfc <buffered_read_column>
20000b1e:	1dfb      	adds	r3, r7, #7
20000b20:	2200      	movs	r2, #0
20000b22:	701a      	strb	r2, [r3, #0]
20000b24:	e021      	b.n	20000b6a <keyb+0x82>
20000b26:	1dfb      	adds	r3, r7, #7
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	4a1b      	ldr	r2, [pc, #108]	@ (20000b98 <keyb+0xb0>)
20000b2c:	5cd3      	ldrb	r3, [r2, r3]
20000b2e:	0019      	movs	r1, r3
20000b30:	250f      	movs	r5, #15
20000b32:	197b      	adds	r3, r7, r5
20000b34:	781b      	ldrb	r3, [r3, #0]
20000b36:	2204      	movs	r2, #4
20000b38:	1ad4      	subs	r4, r2, r3
20000b3a:	68bb      	ldr	r3, [r7, #8]
20000b3c:	0018      	movs	r0, r3
20000b3e:	f000 f8ad 	bl	20000c9c <key_value>
20000b42:	0003      	movs	r3, r0
20000b44:	001a      	movs	r2, r3
20000b46:	4b12      	ldr	r3, [pc, #72]	@ (20000b90 <keyb+0xa8>)
20000b48:	551a      	strb	r2, [r3, r4]
20000b4a:	4b11      	ldr	r3, [pc, #68]	@ (20000b90 <keyb+0xa8>)
20000b4c:	791b      	ldrb	r3, [r3, #4]
20000b4e:	3301      	adds	r3, #1
20000b50:	b2da      	uxtb	r2, r3
20000b52:	4b0f      	ldr	r3, [pc, #60]	@ (20000b90 <keyb+0xa8>)
20000b54:	711a      	strb	r2, [r3, #4]
20000b56:	197b      	adds	r3, r7, r5
20000b58:	781a      	ldrb	r2, [r3, #0]
20000b5a:	197b      	adds	r3, r7, r5
20000b5c:	3a01      	subs	r2, #1
20000b5e:	701a      	strb	r2, [r3, #0]
20000b60:	1dfb      	adds	r3, r7, #7
20000b62:	781a      	ldrb	r2, [r3, #0]
20000b64:	1dfb      	adds	r3, r7, #7
20000b66:	3201      	adds	r2, #1
20000b68:	701a      	strb	r2, [r3, #0]
20000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (20000b94 <keyb+0xac>)
20000b6c:	781b      	ldrb	r3, [r3, #0]
20000b6e:	1dfa      	adds	r2, r7, #7
20000b70:	7812      	ldrb	r2, [r2, #0]
20000b72:	429a      	cmp	r2, r3
20000b74:	d3d7      	bcc.n	20000b26 <keyb+0x3e>
20000b76:	68bb      	ldr	r3, [r7, #8]
20000b78:	3301      	adds	r3, #1
20000b7a:	60bb      	str	r3, [r7, #8]
20000b7c:	68bb      	ldr	r3, [r7, #8]
20000b7e:	2b04      	cmp	r3, #4
20000b80:	d9c2      	bls.n	20000b08 <keyb+0x20>
20000b82:	e000      	b.n	20000b86 <keyb+0x9e>
20000b84:	46c0      	nop			@ (mov r8, r8)
20000b86:	4b02      	ldr	r3, [pc, #8]	@ (20000b90 <keyb+0xa8>)
20000b88:	0018      	movs	r0, r3
20000b8a:	46bd      	mov	sp, r7
20000b8c:	b004      	add	sp, #16
20000b8e:	bdb0      	pop	{r4, r5, r7, pc}
20000b90:	20002e0c 	.word	0x20002e0c
20000b94:	20002e18 	.word	0x20002e18
20000b98:	20002e14 	.word	0x20002e14

20000b9c <activate_row>:
20000b9c:	b580      	push	{r7, lr}
20000b9e:	b084      	sub	sp, #16
20000ba0:	af00      	add	r7, sp, #0
20000ba2:	6078      	str	r0, [r7, #4]
20000ba4:	4b14      	ldr	r3, [pc, #80]	@ (20000bf8 <activate_row+0x5c>)
20000ba6:	60fb      	str	r3, [r7, #12]
20000ba8:	687b      	ldr	r3, [r7, #4]
20000baa:	2b04      	cmp	r3, #4
20000bac:	d01b      	beq.n	20000be6 <activate_row+0x4a>
20000bae:	687b      	ldr	r3, [r7, #4]
20000bb0:	2b04      	cmp	r3, #4
20000bb2:	d81c      	bhi.n	20000bee <activate_row+0x52>
20000bb4:	687b      	ldr	r3, [r7, #4]
20000bb6:	2b03      	cmp	r3, #3
20000bb8:	d011      	beq.n	20000bde <activate_row+0x42>
20000bba:	687b      	ldr	r3, [r7, #4]
20000bbc:	2b03      	cmp	r3, #3
20000bbe:	d816      	bhi.n	20000bee <activate_row+0x52>
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	2b01      	cmp	r3, #1
20000bc4:	d003      	beq.n	20000bce <activate_row+0x32>
20000bc6:	687b      	ldr	r3, [r7, #4]
20000bc8:	2b02      	cmp	r3, #2
20000bca:	d004      	beq.n	20000bd6 <activate_row+0x3a>
20000bcc:	e00f      	b.n	20000bee <activate_row+0x52>
20000bce:	68fb      	ldr	r3, [r7, #12]
20000bd0:	2210      	movs	r2, #16
20000bd2:	755a      	strb	r2, [r3, #21]
20000bd4:	e00c      	b.n	20000bf0 <activate_row+0x54>
20000bd6:	68fb      	ldr	r3, [r7, #12]
20000bd8:	2220      	movs	r2, #32
20000bda:	755a      	strb	r2, [r3, #21]
20000bdc:	e008      	b.n	20000bf0 <activate_row+0x54>
20000bde:	68fb      	ldr	r3, [r7, #12]
20000be0:	2240      	movs	r2, #64	@ 0x40
20000be2:	755a      	strb	r2, [r3, #21]
20000be4:	e004      	b.n	20000bf0 <activate_row+0x54>
20000be6:	68fb      	ldr	r3, [r7, #12]
20000be8:	2280      	movs	r2, #128	@ 0x80
20000bea:	755a      	strb	r2, [r3, #21]
20000bec:	e000      	b.n	20000bf0 <activate_row+0x54>
20000bee:	46c0      	nop			@ (mov r8, r8)
20000bf0:	46c0      	nop			@ (mov r8, r8)
20000bf2:	46bd      	mov	sp, r7
20000bf4:	b004      	add	sp, #16
20000bf6:	bd80      	pop	{r7, pc}
20000bf8:	40020c00 	.word	0x40020c00

20000bfc <buffered_read_column>:
20000bfc:	b580      	push	{r7, lr}
20000bfe:	b082      	sub	sp, #8
20000c00:	af00      	add	r7, sp, #0
20000c02:	4b23      	ldr	r3, [pc, #140]	@ (20000c90 <buffered_read_column+0x94>)
20000c04:	607b      	str	r3, [r7, #4]
20000c06:	1cfb      	adds	r3, r7, #3
20000c08:	687a      	ldr	r2, [r7, #4]
20000c0a:	7c52      	ldrb	r2, [r2, #17]
20000c0c:	701a      	strb	r2, [r3, #0]
20000c0e:	1cfb      	adds	r3, r7, #3
20000c10:	781b      	ldrb	r3, [r3, #0]
20000c12:	2208      	movs	r2, #8
20000c14:	4013      	ands	r3, r2
20000c16:	d009      	beq.n	20000c2c <buffered_read_column+0x30>
20000c18:	4b1e      	ldr	r3, [pc, #120]	@ (20000c94 <buffered_read_column+0x98>)
20000c1a:	781b      	ldrb	r3, [r3, #0]
20000c1c:	1c5a      	adds	r2, r3, #1
20000c1e:	b2d1      	uxtb	r1, r2
20000c20:	4a1c      	ldr	r2, [pc, #112]	@ (20000c94 <buffered_read_column+0x98>)
20000c22:	7011      	strb	r1, [r2, #0]
20000c24:	001a      	movs	r2, r3
20000c26:	4b1c      	ldr	r3, [pc, #112]	@ (20000c98 <buffered_read_column+0x9c>)
20000c28:	2104      	movs	r1, #4
20000c2a:	5499      	strb	r1, [r3, r2]
20000c2c:	1cfb      	adds	r3, r7, #3
20000c2e:	781b      	ldrb	r3, [r3, #0]
20000c30:	2204      	movs	r2, #4
20000c32:	4013      	ands	r3, r2
20000c34:	d009      	beq.n	20000c4a <buffered_read_column+0x4e>
20000c36:	4b17      	ldr	r3, [pc, #92]	@ (20000c94 <buffered_read_column+0x98>)
20000c38:	781b      	ldrb	r3, [r3, #0]
20000c3a:	1c5a      	adds	r2, r3, #1
20000c3c:	b2d1      	uxtb	r1, r2
20000c3e:	4a15      	ldr	r2, [pc, #84]	@ (20000c94 <buffered_read_column+0x98>)
20000c40:	7011      	strb	r1, [r2, #0]
20000c42:	001a      	movs	r2, r3
20000c44:	4b14      	ldr	r3, [pc, #80]	@ (20000c98 <buffered_read_column+0x9c>)
20000c46:	2103      	movs	r1, #3
20000c48:	5499      	strb	r1, [r3, r2]
20000c4a:	1cfb      	adds	r3, r7, #3
20000c4c:	781b      	ldrb	r3, [r3, #0]
20000c4e:	2202      	movs	r2, #2
20000c50:	4013      	ands	r3, r2
20000c52:	d009      	beq.n	20000c68 <buffered_read_column+0x6c>
20000c54:	4b0f      	ldr	r3, [pc, #60]	@ (20000c94 <buffered_read_column+0x98>)
20000c56:	781b      	ldrb	r3, [r3, #0]
20000c58:	1c5a      	adds	r2, r3, #1
20000c5a:	b2d1      	uxtb	r1, r2
20000c5c:	4a0d      	ldr	r2, [pc, #52]	@ (20000c94 <buffered_read_column+0x98>)
20000c5e:	7011      	strb	r1, [r2, #0]
20000c60:	001a      	movs	r2, r3
20000c62:	4b0d      	ldr	r3, [pc, #52]	@ (20000c98 <buffered_read_column+0x9c>)
20000c64:	2102      	movs	r1, #2
20000c66:	5499      	strb	r1, [r3, r2]
20000c68:	1cfb      	adds	r3, r7, #3
20000c6a:	781b      	ldrb	r3, [r3, #0]
20000c6c:	2201      	movs	r2, #1
20000c6e:	4013      	ands	r3, r2
20000c70:	d009      	beq.n	20000c86 <buffered_read_column+0x8a>
20000c72:	4b08      	ldr	r3, [pc, #32]	@ (20000c94 <buffered_read_column+0x98>)
20000c74:	781b      	ldrb	r3, [r3, #0]
20000c76:	1c5a      	adds	r2, r3, #1
20000c78:	b2d1      	uxtb	r1, r2
20000c7a:	4a06      	ldr	r2, [pc, #24]	@ (20000c94 <buffered_read_column+0x98>)
20000c7c:	7011      	strb	r1, [r2, #0]
20000c7e:	001a      	movs	r2, r3
20000c80:	4b05      	ldr	r3, [pc, #20]	@ (20000c98 <buffered_read_column+0x9c>)
20000c82:	2101      	movs	r1, #1
20000c84:	5499      	strb	r1, [r3, r2]
20000c86:	46c0      	nop			@ (mov r8, r8)
20000c88:	46bd      	mov	sp, r7
20000c8a:	b002      	add	sp, #8
20000c8c:	bd80      	pop	{r7, pc}
20000c8e:	46c0      	nop			@ (mov r8, r8)
20000c90:	40020c00 	.word	0x40020c00
20000c94:	20002e18 	.word	0x20002e18
20000c98:	20002e14 	.word	0x20002e14

20000c9c <key_value>:
20000c9c:	b580      	push	{r7, lr}
20000c9e:	b082      	sub	sp, #8
20000ca0:	af00      	add	r7, sp, #0
20000ca2:	6078      	str	r0, [r7, #4]
20000ca4:	6039      	str	r1, [r7, #0]
20000ca6:	687b      	ldr	r3, [r7, #4]
20000ca8:	3b01      	subs	r3, #1
20000caa:	607b      	str	r3, [r7, #4]
20000cac:	683b      	ldr	r3, [r7, #0]
20000cae:	3b01      	subs	r3, #1
20000cb0:	603b      	str	r3, [r7, #0]
20000cb2:	4a05      	ldr	r2, [pc, #20]	@ (20000cc8 <key_value+0x2c>)
20000cb4:	687b      	ldr	r3, [r7, #4]
20000cb6:	009b      	lsls	r3, r3, #2
20000cb8:	18d2      	adds	r2, r2, r3
20000cba:	683b      	ldr	r3, [r7, #0]
20000cbc:	18d3      	adds	r3, r2, r3
20000cbe:	781b      	ldrb	r3, [r3, #0]
20000cc0:	0018      	movs	r0, r3
20000cc2:	46bd      	mov	sp, r7
20000cc4:	b002      	add	sp, #8
20000cc6:	bd80      	pop	{r7, pc}
20000cc8:	20002d58 	.word	0x20002d58

20000ccc <app_init>:
#define SCREEN_HEIGHT     64
#define MAX_LIVES         3

// Setup
void app_init(void)
{
20000ccc:	b580      	push	{r7, lr}
20000cce:	af00      	add	r7, sp, #0
    // Start clocks for port D and port E.
    *(ulong*)0x40023830 = 0x18;
20000cd0:	4b1e      	ldr	r3, [pc, #120]	@ (20000d4c <app_init+0x80>)
20000cd2:	2218      	movs	r2, #24
20000cd4:	601a      	str	r2, [r3, #0]
    // Start clocks for SYSCFG
    *(ulong*)0x40023844 |= 0x4000;
20000cd6:	4b1e      	ldr	r3, [pc, #120]	@ (20000d50 <app_init+0x84>)
20000cd8:	681a      	ldr	r2, [r3, #0]
20000cda:	4b1d      	ldr	r3, [pc, #116]	@ (20000d50 <app_init+0x84>)
20000cdc:	2180      	movs	r1, #128	@ 0x80
20000cde:	01c9      	lsls	r1, r1, #7
20000ce0:	430a      	orrs	r2, r1
20000ce2:	601a      	str	r2, [r3, #0]

    gpiod->MODER_LOW  =     0x5555;
20000ce4:	4b1b      	ldr	r3, [pc, #108]	@ (20000d54 <app_init+0x88>)
20000ce6:	681b      	ldr	r3, [r3, #0]
20000ce8:	4a1b      	ldr	r2, [pc, #108]	@ (20000d58 <app_init+0x8c>)
20000cea:	801a      	strh	r2, [r3, #0]
    gpiod->MODER_HIGH =     0x5500;
20000cec:	4b19      	ldr	r3, [pc, #100]	@ (20000d54 <app_init+0x88>)
20000cee:	681b      	ldr	r3, [r3, #0]
20000cf0:	22aa      	movs	r2, #170	@ 0xaa
20000cf2:	01d2      	lsls	r2, r2, #7
20000cf4:	805a      	strh	r2, [r3, #2]
    gpiod->OSPEEDR    = 0x55555555;
20000cf6:	4b17      	ldr	r3, [pc, #92]	@ (20000d54 <app_init+0x88>)
20000cf8:	681b      	ldr	r3, [r3, #0]
20000cfa:	4a18      	ldr	r2, [pc, #96]	@ (20000d5c <app_init+0x90>)
20000cfc:	609a      	str	r2, [r3, #8]
    gpiod->OTYPER    &=     0x00FF;
20000cfe:	4b15      	ldr	r3, [pc, #84]	@ (20000d54 <app_init+0x88>)
20000d00:	681b      	ldr	r3, [r3, #0]
20000d02:	889b      	ldrh	r3, [r3, #4]
20000d04:	b29a      	uxth	r2, r3
20000d06:	4b13      	ldr	r3, [pc, #76]	@ (20000d54 <app_init+0x88>)
20000d08:	681b      	ldr	r3, [r3, #0]
20000d0a:	21ff      	movs	r1, #255	@ 0xff
20000d0c:	400a      	ands	r2, r1
20000d0e:	b292      	uxth	r2, r2
20000d10:	809a      	strh	r2, [r3, #4]
    gpiod->PUPDR     &= 0x0000FFFF;
20000d12:	4b10      	ldr	r3, [pc, #64]	@ (20000d54 <app_init+0x88>)
20000d14:	681b      	ldr	r3, [r3, #0]
20000d16:	68da      	ldr	r2, [r3, #12]
20000d18:	4b0e      	ldr	r3, [pc, #56]	@ (20000d54 <app_init+0x88>)
20000d1a:	681b      	ldr	r3, [r3, #0]
20000d1c:	0412      	lsls	r2, r2, #16
20000d1e:	0c12      	lsrs	r2, r2, #16
20000d20:	60da      	str	r2, [r3, #12]
    gpiod->PUPDR     |= 0x00AA0000;
20000d22:	4b0c      	ldr	r3, [pc, #48]	@ (20000d54 <app_init+0x88>)
20000d24:	681b      	ldr	r3, [r3, #0]
20000d26:	68da      	ldr	r2, [r3, #12]
20000d28:	4b0a      	ldr	r3, [pc, #40]	@ (20000d54 <app_init+0x88>)
20000d2a:	681b      	ldr	r3, [r3, #0]
20000d2c:	21aa      	movs	r1, #170	@ 0xaa
20000d2e:	0409      	lsls	r1, r1, #16
20000d30:	430a      	orrs	r2, r1
20000d32:	60da      	str	r2, [r3, #12]

    gpioe->MODER   = 0x00005555;
20000d34:	4b0a      	ldr	r3, [pc, #40]	@ (20000d60 <app_init+0x94>)
20000d36:	681b      	ldr	r3, [r3, #0]
20000d38:	4a07      	ldr	r2, [pc, #28]	@ (20000d58 <app_init+0x8c>)
20000d3a:	601a      	str	r2, [r3, #0]
    gpioe->OSPEEDR = 0x55555555;
20000d3c:	4b08      	ldr	r3, [pc, #32]	@ (20000d60 <app_init+0x94>)
20000d3e:	681b      	ldr	r3, [r3, #0]
20000d40:	4a06      	ldr	r2, [pc, #24]	@ (20000d5c <app_init+0x90>)
20000d42:	609a      	str	r2, [r3, #8]
}
20000d44:	46c0      	nop			@ (mov r8, r8)
20000d46:	46bd      	mov	sp, r7
20000d48:	bd80      	pop	{r7, pc}
20000d4a:	46c0      	nop			@ (mov r8, r8)
20000d4c:	40023830 	.word	0x40023830
20000d50:	40023844 	.word	0x40023844
20000d54:	20002bd0 	.word	0x20002bd0
20000d58:	00005555 	.word	0x00005555
20000d5c:	55555555 	.word	0x55555555
20000d60:	20002bd4 	.word	0x20002bd4

20000d64 <wait_for_start_press>:

// Helper functions
void wait_for_start_press()
{
20000d64:	b580      	push	{r7, lr}
20000d66:	b084      	sub	sp, #16
20000d68:	af00      	add	r7, sp, #0
    bool start = false;
20000d6a:	230f      	movs	r3, #15
20000d6c:	18fb      	adds	r3, r7, r3
20000d6e:	2200      	movs	r2, #0
20000d70:	701a      	strb	r2, [r3, #0]
    while (true)
    {
        Input *keyb_input = keyb();
20000d72:	f7ff feb9 	bl	20000ae8 <keyb>
20000d76:	0003      	movs	r3, r0
20000d78:	60bb      	str	r3, [r7, #8]

        for (u8 i = 0; i < keyb_input->n_presses; i++)
20000d7a:	230e      	movs	r3, #14
20000d7c:	18fb      	adds	r3, r7, r3
20000d7e:	2200      	movs	r2, #0
20000d80:	701a      	strb	r2, [r3, #0]
20000d82:	e015      	b.n	20000db0 <wait_for_start_press+0x4c>
        {
            u8 current_input = keyb_input->buffer[i];
20000d84:	230e      	movs	r3, #14
20000d86:	18fb      	adds	r3, r7, r3
20000d88:	781a      	ldrb	r2, [r3, #0]
20000d8a:	1dfb      	adds	r3, r7, #7
20000d8c:	68b9      	ldr	r1, [r7, #8]
20000d8e:	5c8a      	ldrb	r2, [r1, r2]
20000d90:	701a      	strb	r2, [r3, #0]
            if (current_input == 5) {
20000d92:	1dfb      	adds	r3, r7, #7
20000d94:	781b      	ldrb	r3, [r3, #0]
20000d96:	2b05      	cmp	r3, #5
20000d98:	d104      	bne.n	20000da4 <wait_for_start_press+0x40>
                start = true;
20000d9a:	230f      	movs	r3, #15
20000d9c:	18fb      	adds	r3, r7, r3
20000d9e:	2201      	movs	r2, #1
20000da0:	701a      	strb	r2, [r3, #0]
                break;
20000da2:	e00c      	b.n	20000dbe <wait_for_start_press+0x5a>
        for (u8 i = 0; i < keyb_input->n_presses; i++)
20000da4:	210e      	movs	r1, #14
20000da6:	187b      	adds	r3, r7, r1
20000da8:	781a      	ldrb	r2, [r3, #0]
20000daa:	187b      	adds	r3, r7, r1
20000dac:	3201      	adds	r2, #1
20000dae:	701a      	strb	r2, [r3, #0]
20000db0:	68bb      	ldr	r3, [r7, #8]
20000db2:	791b      	ldrb	r3, [r3, #4]
20000db4:	220e      	movs	r2, #14
20000db6:	18ba      	adds	r2, r7, r2
20000db8:	7812      	ldrb	r2, [r2, #0]
20000dba:	429a      	cmp	r2, r3
20000dbc:	d3e2      	bcc.n	20000d84 <wait_for_start_press+0x20>
            }
        }

        if (start) break;
20000dbe:	230f      	movs	r3, #15
20000dc0:	18fb      	adds	r3, r7, r3
20000dc2:	781b      	ldrb	r3, [r3, #0]
20000dc4:	2b00      	cmp	r3, #0
20000dc6:	d100      	bne.n	20000dca <wait_for_start_press+0x66>
    {
20000dc8:	e7d3      	b.n	20000d72 <wait_for_start_press+0xe>
        if (start) break;
20000dca:	46c0      	nop			@ (mov r8, r8)
    }
}
20000dcc:	46c0      	nop			@ (mov r8, r8)
20000dce:	46bd      	mov	sp, r7
20000dd0:	b004      	add	sp, #16
20000dd2:	bd80      	pop	{r7, pc}

20000dd4 <colliding_with_paddle>:

/**
* @brief Checks if the ball collides with the paddle.
*/
bool colliding_with_paddle(P_Object ball, P_Object paddle)
{
20000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
20000dd6:	b085      	sub	sp, #20
20000dd8:	af00      	add	r7, sp, #0
20000dda:	6078      	str	r0, [r7, #4]
20000ddc:	6039      	str	r1, [r7, #0]
    i8 ball_min_x = ball->pos_x;
20000dde:	687b      	ldr	r3, [r7, #4]
20000de0:	68da      	ldr	r2, [r3, #12]
20000de2:	210f      	movs	r1, #15
20000de4:	187b      	adds	r3, r7, r1
20000de6:	701a      	strb	r2, [r3, #0]
    i8 ball_max_x = ball->pos_x + ball->geo->size_x;
20000de8:	687b      	ldr	r3, [r7, #4]
20000dea:	68db      	ldr	r3, [r3, #12]
20000dec:	b2da      	uxtb	r2, r3
20000dee:	687b      	ldr	r3, [r7, #4]
20000df0:	681b      	ldr	r3, [r3, #0]
20000df2:	685b      	ldr	r3, [r3, #4]
20000df4:	b2db      	uxtb	r3, r3
20000df6:	18d3      	adds	r3, r2, r3
20000df8:	b2da      	uxtb	r2, r3
20000dfa:	200e      	movs	r0, #14
20000dfc:	183b      	adds	r3, r7, r0
20000dfe:	701a      	strb	r2, [r3, #0]
    i8 ball_min_y = ball->pos_y;
20000e00:	687b      	ldr	r3, [r7, #4]
20000e02:	691a      	ldr	r2, [r3, #16]
20000e04:	240d      	movs	r4, #13
20000e06:	193b      	adds	r3, r7, r4
20000e08:	701a      	strb	r2, [r3, #0]
    i8 ball_max_y = ball->pos_y + ball->geo->size_y;
20000e0a:	687b      	ldr	r3, [r7, #4]
20000e0c:	691b      	ldr	r3, [r3, #16]
20000e0e:	b2da      	uxtb	r2, r3
20000e10:	687b      	ldr	r3, [r7, #4]
20000e12:	681b      	ldr	r3, [r3, #0]
20000e14:	689b      	ldr	r3, [r3, #8]
20000e16:	b2db      	uxtb	r3, r3
20000e18:	18d3      	adds	r3, r2, r3
20000e1a:	b2da      	uxtb	r2, r3
20000e1c:	250c      	movs	r5, #12
20000e1e:	197b      	adds	r3, r7, r5
20000e20:	701a      	strb	r2, [r3, #0]

    i8 paddle_min_x = paddle->pos_x;
20000e22:	683b      	ldr	r3, [r7, #0]
20000e24:	68da      	ldr	r2, [r3, #12]
20000e26:	260b      	movs	r6, #11
20000e28:	19bb      	adds	r3, r7, r6
20000e2a:	701a      	strb	r2, [r3, #0]
    i8 paddle_max_x = paddle->pos_x + paddle->geo->size_x;
20000e2c:	683b      	ldr	r3, [r7, #0]
20000e2e:	68db      	ldr	r3, [r3, #12]
20000e30:	b2da      	uxtb	r2, r3
20000e32:	683b      	ldr	r3, [r7, #0]
20000e34:	681b      	ldr	r3, [r3, #0]
20000e36:	685b      	ldr	r3, [r3, #4]
20000e38:	b2db      	uxtb	r3, r3
20000e3a:	18d3      	adds	r3, r2, r3
20000e3c:	b2da      	uxtb	r2, r3
20000e3e:	230a      	movs	r3, #10
20000e40:	18fb      	adds	r3, r7, r3
20000e42:	701a      	strb	r2, [r3, #0]
    i8 paddle_min_y = paddle->pos_y;
20000e44:	683b      	ldr	r3, [r7, #0]
20000e46:	691a      	ldr	r2, [r3, #16]
20000e48:	2309      	movs	r3, #9
20000e4a:	18fb      	adds	r3, r7, r3
20000e4c:	701a      	strb	r2, [r3, #0]
    i8 paddle_max_y = paddle->pos_y + paddle->geo->size_y;
20000e4e:	683b      	ldr	r3, [r7, #0]
20000e50:	691b      	ldr	r3, [r3, #16]
20000e52:	b2da      	uxtb	r2, r3
20000e54:	683b      	ldr	r3, [r7, #0]
20000e56:	681b      	ldr	r3, [r3, #0]
20000e58:	689b      	ldr	r3, [r3, #8]
20000e5a:	b2db      	uxtb	r3, r3
20000e5c:	18d3      	adds	r3, r2, r3
20000e5e:	b2da      	uxtb	r2, r3
20000e60:	2308      	movs	r3, #8
20000e62:	18fb      	adds	r3, r7, r3
20000e64:	701a      	strb	r2, [r3, #0]
        ball_min_x <= paddle_max_x
        &&
        ball_max_x >= paddle_min_x
        &&
        ball_min_y <= paddle_max_y
        &&
20000e66:	187a      	adds	r2, r7, r1
20000e68:	230a      	movs	r3, #10
20000e6a:	18fb      	adds	r3, r7, r3
20000e6c:	7812      	ldrb	r2, [r2, #0]
20000e6e:	b252      	sxtb	r2, r2
20000e70:	781b      	ldrb	r3, [r3, #0]
20000e72:	b25b      	sxtb	r3, r3
20000e74:	429a      	cmp	r2, r3
20000e76:	dc1b      	bgt.n	20000eb0 <colliding_with_paddle+0xdc>
        &&
20000e78:	183a      	adds	r2, r7, r0
20000e7a:	19bb      	adds	r3, r7, r6
20000e7c:	7812      	ldrb	r2, [r2, #0]
20000e7e:	b252      	sxtb	r2, r2
20000e80:	781b      	ldrb	r3, [r3, #0]
20000e82:	b25b      	sxtb	r3, r3
20000e84:	429a      	cmp	r2, r3
20000e86:	db13      	blt.n	20000eb0 <colliding_with_paddle+0xdc>
        &&
20000e88:	193a      	adds	r2, r7, r4
20000e8a:	2108      	movs	r1, #8
20000e8c:	187b      	adds	r3, r7, r1
20000e8e:	7812      	ldrb	r2, [r2, #0]
20000e90:	b252      	sxtb	r2, r2
20000e92:	781b      	ldrb	r3, [r3, #0]
20000e94:	b25b      	sxtb	r3, r3
20000e96:	429a      	cmp	r2, r3
20000e98:	dc0a      	bgt.n	20000eb0 <colliding_with_paddle+0xdc>
        &&
20000e9a:	197a      	adds	r2, r7, r5
20000e9c:	2309      	movs	r3, #9
20000e9e:	18fb      	adds	r3, r7, r3
20000ea0:	7812      	ldrb	r2, [r2, #0]
20000ea2:	b252      	sxtb	r2, r2
20000ea4:	781b      	ldrb	r3, [r3, #0]
20000ea6:	b25b      	sxtb	r3, r3
20000ea8:	429a      	cmp	r2, r3
20000eaa:	db01      	blt.n	20000eb0 <colliding_with_paddle+0xdc>
20000eac:	2301      	movs	r3, #1
20000eae:	e000      	b.n	20000eb2 <colliding_with_paddle+0xde>
20000eb0:	2300      	movs	r3, #0
20000eb2:	b2db      	uxtb	r3, r3
        ball_max_y >= paddle_min_y;
}
20000eb4:	0018      	movs	r0, r3
20000eb6:	46bd      	mov	sp, r7
20000eb8:	b005      	add	sp, #20
20000eba:	bdf0      	pop	{r4, r5, r6, r7, pc}

20000ebc <move_object>:

/**
* @brief Moves an object one "tick" by updating its coordinates with its speed.
*/
void move_object(P_Object object)
{
20000ebc:	b580      	push	{r7, lr}
20000ebe:	b082      	sub	sp, #8
20000ec0:	af00      	add	r7, sp, #0
20000ec2:	6078      	str	r0, [r7, #4]
    // Clear the object temporarily from the screen
    object->clear(object);
20000ec4:	687b      	ldr	r3, [r7, #4]
20000ec6:	699b      	ldr	r3, [r3, #24]
20000ec8:	687a      	ldr	r2, [r7, #4]
20000eca:	0010      	movs	r0, r2
20000ecc:	4798      	blx	r3

    // Update the position of the object
    object->pos_x += object->dir_x;
20000ece:	687b      	ldr	r3, [r7, #4]
20000ed0:	68da      	ldr	r2, [r3, #12]
20000ed2:	687b      	ldr	r3, [r7, #4]
20000ed4:	685b      	ldr	r3, [r3, #4]
20000ed6:	18d2      	adds	r2, r2, r3
20000ed8:	687b      	ldr	r3, [r7, #4]
20000eda:	60da      	str	r2, [r3, #12]
    object->pos_y += object->dir_y;
20000edc:	687b      	ldr	r3, [r7, #4]
20000ede:	691a      	ldr	r2, [r3, #16]
20000ee0:	687b      	ldr	r3, [r7, #4]
20000ee2:	689b      	ldr	r3, [r3, #8]
20000ee4:	18d2      	adds	r2, r2, r3
20000ee6:	687b      	ldr	r3, [r7, #4]
20000ee8:	611a      	str	r2, [r3, #16]

    // Draw the object with its new positions
    draw_object(object);
20000eea:	687b      	ldr	r3, [r7, #4]
20000eec:	0018      	movs	r0, r3
20000eee:	f7ff fd58 	bl	200009a2 <draw_object>
}
20000ef2:	46c0      	nop			@ (mov r8, r8)
20000ef4:	46bd      	mov	sp, r7
20000ef6:	b002      	add	sp, #8
20000ef8:	bd80      	pop	{r7, pc}

20000efa <set_object_speed>:

/**
* @brief Sets the speed of the given object
*/
void set_object_speed(P_Object object, int speed_x, int speed_y)
{
20000efa:	b580      	push	{r7, lr}
20000efc:	b084      	sub	sp, #16
20000efe:	af00      	add	r7, sp, #0
20000f00:	60f8      	str	r0, [r7, #12]
20000f02:	60b9      	str	r1, [r7, #8]
20000f04:	607a      	str	r2, [r7, #4]
    object->dir_x = speed_x;
20000f06:	68fb      	ldr	r3, [r7, #12]
20000f08:	68ba      	ldr	r2, [r7, #8]
20000f0a:	605a      	str	r2, [r3, #4]
    object->dir_y = speed_y;
20000f0c:	68fb      	ldr	r3, [r7, #12]
20000f0e:	687a      	ldr	r2, [r7, #4]
20000f10:	609a      	str	r2, [r3, #8]
}
20000f12:	46c0      	nop			@ (mov r8, r8)
20000f14:	46bd      	mov	sp, r7
20000f16:	b004      	add	sp, #16
20000f18:	bd80      	pop	{r7, pc}

20000f1a <check_wall_collision>:

/**
* @brief Checks if the ball collides with a wall.
*/
WallCollision check_wall_collision(P_Object ball)
{
20000f1a:	b580      	push	{r7, lr}
20000f1c:	b08c      	sub	sp, #48	@ 0x30
20000f1e:	af00      	add	r7, sp, #0
20000f20:	6078      	str	r0, [r7, #4]
    i16 ball_min_x = ball->pos_x;
20000f22:	687b      	ldr	r3, [r7, #4]
20000f24:	68da      	ldr	r2, [r3, #12]
20000f26:	212e      	movs	r1, #46	@ 0x2e
20000f28:	187b      	adds	r3, r7, r1
20000f2a:	801a      	strh	r2, [r3, #0]
    i16 ball_max_x = ball->pos_x + ball->geo->size_x;
20000f2c:	687b      	ldr	r3, [r7, #4]
20000f2e:	68db      	ldr	r3, [r3, #12]
20000f30:	b29a      	uxth	r2, r3
20000f32:	687b      	ldr	r3, [r7, #4]
20000f34:	681b      	ldr	r3, [r3, #0]
20000f36:	685b      	ldr	r3, [r3, #4]
20000f38:	b29b      	uxth	r3, r3
20000f3a:	18d3      	adds	r3, r2, r3
20000f3c:	b29a      	uxth	r2, r3
20000f3e:	232c      	movs	r3, #44	@ 0x2c
20000f40:	18fb      	adds	r3, r7, r3
20000f42:	801a      	strh	r2, [r3, #0]
    i16 ball_min_y = ball->pos_y;
20000f44:	687b      	ldr	r3, [r7, #4]
20000f46:	691a      	ldr	r2, [r3, #16]
20000f48:	232a      	movs	r3, #42	@ 0x2a
20000f4a:	18fb      	adds	r3, r7, r3
20000f4c:	801a      	strh	r2, [r3, #0]
    i16 ball_max_y = ball->pos_y + ball->geo->size_y;
20000f4e:	687b      	ldr	r3, [r7, #4]
20000f50:	691b      	ldr	r3, [r3, #16]
20000f52:	b29a      	uxth	r2, r3
20000f54:	687b      	ldr	r3, [r7, #4]
20000f56:	681b      	ldr	r3, [r3, #0]
20000f58:	689b      	ldr	r3, [r3, #8]
20000f5a:	b29b      	uxth	r3, r3
20000f5c:	18d3      	adds	r3, r2, r3
20000f5e:	b29a      	uxth	r2, r3
20000f60:	2328      	movs	r3, #40	@ 0x28
20000f62:	18fb      	adds	r3, r7, r3
20000f64:	801a      	strh	r2, [r3, #0]
    WallCollision result;

    // Check left wall collision
    if (ball_min_x < 1) {
20000f66:	187b      	adds	r3, r7, r1
20000f68:	2200      	movs	r2, #0
20000f6a:	5e9b      	ldrsh	r3, [r3, r2]
20000f6c:	2b00      	cmp	r3, #0
20000f6e:	dc0a      	bgt.n	20000f86 <check_wall_collision+0x6c>
        result = (WallCollision) { .is_colliding = true, .which = 'l'};
20000f70:	2120      	movs	r1, #32
20000f72:	187b      	adds	r3, r7, r1
20000f74:	4a2c      	ldr	r2, [pc, #176]	@ (20001028 <check_wall_collision+0x10e>)
20000f76:	8812      	ldrh	r2, [r2, #0]
20000f78:	801a      	strh	r2, [r3, #0]
        return result;
20000f7a:	2324      	movs	r3, #36	@ 0x24
20000f7c:	18fb      	adds	r3, r7, r3
20000f7e:	187a      	adds	r2, r7, r1
20000f80:	8812      	ldrh	r2, [r2, #0]
20000f82:	801a      	strh	r2, [r3, #0]
20000f84:	e03b      	b.n	20000ffe <check_wall_collision+0xe4>
    }
    // Check right wall collision
    if (ball_max_x > SCREEN_WIDTH) {
20000f86:	232c      	movs	r3, #44	@ 0x2c
20000f88:	18fb      	adds	r3, r7, r3
20000f8a:	2200      	movs	r2, #0
20000f8c:	5e9b      	ldrsh	r3, [r3, r2]
20000f8e:	2b80      	cmp	r3, #128	@ 0x80
20000f90:	dd0a      	ble.n	20000fa8 <check_wall_collision+0x8e>
        result = (WallCollision) { .is_colliding = true, .which = 'r'};
20000f92:	2120      	movs	r1, #32
20000f94:	187b      	adds	r3, r7, r1
20000f96:	4a25      	ldr	r2, [pc, #148]	@ (2000102c <check_wall_collision+0x112>)
20000f98:	8812      	ldrh	r2, [r2, #0]
20000f9a:	801a      	strh	r2, [r3, #0]
        return result;
20000f9c:	2324      	movs	r3, #36	@ 0x24
20000f9e:	18fb      	adds	r3, r7, r3
20000fa0:	187a      	adds	r2, r7, r1
20000fa2:	8812      	ldrh	r2, [r2, #0]
20000fa4:	801a      	strh	r2, [r3, #0]
20000fa6:	e02a      	b.n	20000ffe <check_wall_collision+0xe4>
    }
    // Check upper wall collision
    if (ball_min_y < 1) {
20000fa8:	232a      	movs	r3, #42	@ 0x2a
20000faa:	18fb      	adds	r3, r7, r3
20000fac:	2200      	movs	r2, #0
20000fae:	5e9b      	ldrsh	r3, [r3, r2]
20000fb0:	2b00      	cmp	r3, #0
20000fb2:	dc0a      	bgt.n	20000fca <check_wall_collision+0xb0>
        result = (WallCollision) { .is_colliding = true, .which = 'u'};
20000fb4:	2120      	movs	r1, #32
20000fb6:	187b      	adds	r3, r7, r1
20000fb8:	4a1d      	ldr	r2, [pc, #116]	@ (20001030 <check_wall_collision+0x116>)
20000fba:	8812      	ldrh	r2, [r2, #0]
20000fbc:	801a      	strh	r2, [r3, #0]
        return result;
20000fbe:	2324      	movs	r3, #36	@ 0x24
20000fc0:	18fb      	adds	r3, r7, r3
20000fc2:	187a      	adds	r2, r7, r1
20000fc4:	8812      	ldrh	r2, [r2, #0]
20000fc6:	801a      	strh	r2, [r3, #0]
20000fc8:	e019      	b.n	20000ffe <check_wall_collision+0xe4>
    }
    // Check lower wall collision (game over)
    if (ball_max_y > SCREEN_HEIGHT) {
20000fca:	2328      	movs	r3, #40	@ 0x28
20000fcc:	18fb      	adds	r3, r7, r3
20000fce:	2200      	movs	r2, #0
20000fd0:	5e9b      	ldrsh	r3, [r3, r2]
20000fd2:	2b40      	cmp	r3, #64	@ 0x40
20000fd4:	dd0a      	ble.n	20000fec <check_wall_collision+0xd2>
        result = (WallCollision) { .is_colliding = true, .which = 'd'};
20000fd6:	2120      	movs	r1, #32
20000fd8:	187b      	adds	r3, r7, r1
20000fda:	4a16      	ldr	r2, [pc, #88]	@ (20001034 <check_wall_collision+0x11a>)
20000fdc:	8812      	ldrh	r2, [r2, #0]
20000fde:	801a      	strh	r2, [r3, #0]
        return result;
20000fe0:	2324      	movs	r3, #36	@ 0x24
20000fe2:	18fb      	adds	r3, r7, r3
20000fe4:	187a      	adds	r2, r7, r1
20000fe6:	8812      	ldrh	r2, [r2, #0]
20000fe8:	801a      	strh	r2, [r3, #0]
20000fea:	e008      	b.n	20000ffe <check_wall_collision+0xe4>
    }
    // When no wall collision occurs
    result = (WallCollision){ false };
20000fec:	2120      	movs	r1, #32
20000fee:	187b      	adds	r3, r7, r1
20000ff0:	2200      	movs	r2, #0
20000ff2:	801a      	strh	r2, [r3, #0]
    return result;
20000ff4:	2324      	movs	r3, #36	@ 0x24
20000ff6:	18fb      	adds	r3, r7, r3
20000ff8:	187a      	adds	r2, r7, r1
20000ffa:	8812      	ldrh	r2, [r2, #0]
20000ffc:	801a      	strh	r2, [r3, #0]
}
20000ffe:	2324      	movs	r3, #36	@ 0x24
20001000:	18fa      	adds	r2, r7, r3
20001002:	2300      	movs	r3, #0
20001004:	7811      	ldrb	r1, [r2, #0]
20001006:	20ff      	movs	r0, #255	@ 0xff
20001008:	4001      	ands	r1, r0
2000100a:	20ff      	movs	r0, #255	@ 0xff
2000100c:	4383      	bics	r3, r0
2000100e:	430b      	orrs	r3, r1
20001010:	7852      	ldrb	r2, [r2, #1]
20001012:	21ff      	movs	r1, #255	@ 0xff
20001014:	400a      	ands	r2, r1
20001016:	0212      	lsls	r2, r2, #8
20001018:	4907      	ldr	r1, [pc, #28]	@ (20001038 <check_wall_collision+0x11e>)
2000101a:	400b      	ands	r3, r1
2000101c:	4313      	orrs	r3, r2
2000101e:	1c18      	adds	r0, r3, #0
20001020:	46bd      	mov	sp, r7
20001022:	b00c      	add	sp, #48	@ 0x30
20001024:	bd80      	pop	{r7, pc}
20001026:	46c0      	nop			@ (mov r8, r8)
20001028:	20002d78 	.word	0x20002d78
2000102c:	20002d7c 	.word	0x20002d7c
20001030:	20002d80 	.word	0x20002d80
20001034:	20002d84 	.word	0x20002d84
20001038:	ffff00ff 	.word	0xffff00ff

2000103c <reset_game_objects>:

/**
* @brief Reset the ball and paddle to initial positions
*/
void reset_game_objects(P_Object ball, P_Object paddle)
{
2000103c:	b580      	push	{r7, lr}
2000103e:	b082      	sub	sp, #8
20001040:	af00      	add	r7, sp, #0
20001042:	6078      	str	r0, [r7, #4]
20001044:	6039      	str	r1, [r7, #0]
    // Reset ball - start from the middle of the paddle with upward trajectory
    ball->dir_x = 4;  // Increased to 4 for faster horizontal movement
20001046:	687b      	ldr	r3, [r7, #4]
20001048:	2204      	movs	r2, #4
2000104a:	605a      	str	r2, [r3, #4]
    ball->dir_y = -5; // Increased to -5 for faster vertical movement
2000104c:	687b      	ldr	r3, [r7, #4]
2000104e:	2205      	movs	r2, #5
20001050:	4252      	negs	r2, r2
20001052:	609a      	str	r2, [r3, #8]
    ball->pos_x = SCREEN_WIDTH / 2 - ball->geo->size_x / 2;
20001054:	687b      	ldr	r3, [r7, #4]
20001056:	681b      	ldr	r3, [r3, #0]
20001058:	685b      	ldr	r3, [r3, #4]
2000105a:	2b00      	cmp	r3, #0
2000105c:	da00      	bge.n	20001060 <reset_game_objects+0x24>
2000105e:	3301      	adds	r3, #1
20001060:	105b      	asrs	r3, r3, #1
20001062:	425b      	negs	r3, r3
20001064:	3340      	adds	r3, #64	@ 0x40
20001066:	001a      	movs	r2, r3
20001068:	687b      	ldr	r3, [r7, #4]
2000106a:	60da      	str	r2, [r3, #12]
    ball->pos_y = SCREEN_HEIGHT - 12; // Start a bit higher for better visibility
2000106c:	687b      	ldr	r3, [r7, #4]
2000106e:	2234      	movs	r2, #52	@ 0x34
20001070:	611a      	str	r2, [r3, #16]

    // Reset paddle
    paddle->dir_x = 0;
20001072:	683b      	ldr	r3, [r7, #0]
20001074:	2200      	movs	r2, #0
20001076:	605a      	str	r2, [r3, #4]
    paddle->dir_y = 0;
20001078:	683b      	ldr	r3, [r7, #0]
2000107a:	2200      	movs	r2, #0
2000107c:	609a      	str	r2, [r3, #8]
    paddle->pos_x = SCREEN_WIDTH / 2 - paddle->geo->size_x / 2;
2000107e:	683b      	ldr	r3, [r7, #0]
20001080:	681b      	ldr	r3, [r3, #0]
20001082:	685b      	ldr	r3, [r3, #4]
20001084:	2b00      	cmp	r3, #0
20001086:	da00      	bge.n	2000108a <reset_game_objects+0x4e>
20001088:	3301      	adds	r3, #1
2000108a:	105b      	asrs	r3, r3, #1
2000108c:	425b      	negs	r3, r3
2000108e:	3340      	adds	r3, #64	@ 0x40
20001090:	001a      	movs	r2, r3
20001092:	683b      	ldr	r3, [r7, #0]
20001094:	60da      	str	r2, [r3, #12]
    paddle->pos_y = SCREEN_HEIGHT - 6;
20001096:	683b      	ldr	r3, [r7, #0]
20001098:	223a      	movs	r2, #58	@ 0x3a
2000109a:	611a      	str	r2, [r3, #16]
}
2000109c:	46c0      	nop			@ (mov r8, r8)
2000109e:	46bd      	mov	sp, r7
200010a0:	b002      	add	sp, #8
200010a2:	bd80      	pop	{r7, pc}

200010a4 <colliding_with_brick>:

/**
* @brief Checks if ball collides with a brick
*/
bool colliding_with_brick(P_Object ball, Rect brick)
{
200010a4:	b5f0      	push	{r4, r5, r6, r7, lr}
200010a6:	b085      	sub	sp, #20
200010a8:	af00      	add	r7, sp, #0
200010aa:	6078      	str	r0, [r7, #4]
200010ac:	003b      	movs	r3, r7
200010ae:	6019      	str	r1, [r3, #0]
    i8 ball_min_x = ball->pos_x;
200010b0:	687b      	ldr	r3, [r7, #4]
200010b2:	68da      	ldr	r2, [r3, #12]
200010b4:	210f      	movs	r1, #15
200010b6:	187b      	adds	r3, r7, r1
200010b8:	701a      	strb	r2, [r3, #0]
    i8 ball_max_x = ball->pos_x + ball->geo->size_x;
200010ba:	687b      	ldr	r3, [r7, #4]
200010bc:	68db      	ldr	r3, [r3, #12]
200010be:	b2da      	uxtb	r2, r3
200010c0:	687b      	ldr	r3, [r7, #4]
200010c2:	681b      	ldr	r3, [r3, #0]
200010c4:	685b      	ldr	r3, [r3, #4]
200010c6:	b2db      	uxtb	r3, r3
200010c8:	18d3      	adds	r3, r2, r3
200010ca:	b2da      	uxtb	r2, r3
200010cc:	200e      	movs	r0, #14
200010ce:	183b      	adds	r3, r7, r0
200010d0:	701a      	strb	r2, [r3, #0]
    i8 ball_min_y = ball->pos_y;
200010d2:	687b      	ldr	r3, [r7, #4]
200010d4:	691a      	ldr	r2, [r3, #16]
200010d6:	240d      	movs	r4, #13
200010d8:	193b      	adds	r3, r7, r4
200010da:	701a      	strb	r2, [r3, #0]
    i8 ball_max_y = ball->pos_y + ball->geo->size_y;
200010dc:	687b      	ldr	r3, [r7, #4]
200010de:	691b      	ldr	r3, [r3, #16]
200010e0:	b2da      	uxtb	r2, r3
200010e2:	687b      	ldr	r3, [r7, #4]
200010e4:	681b      	ldr	r3, [r3, #0]
200010e6:	689b      	ldr	r3, [r3, #8]
200010e8:	b2db      	uxtb	r3, r3
200010ea:	18d3      	adds	r3, r2, r3
200010ec:	b2da      	uxtb	r2, r3
200010ee:	250c      	movs	r5, #12
200010f0:	197b      	adds	r3, r7, r5
200010f2:	701a      	strb	r2, [r3, #0]

    i8 brick_min_x = brick.origin.x;
200010f4:	260b      	movs	r6, #11
200010f6:	19bb      	adds	r3, r7, r6
200010f8:	003a      	movs	r2, r7
200010fa:	7812      	ldrb	r2, [r2, #0]
200010fc:	701a      	strb	r2, [r3, #0]
    i8 brick_max_x = brick.origin.x + brick.dimen.x;
200010fe:	003b      	movs	r3, r7
20001100:	781b      	ldrb	r3, [r3, #0]
20001102:	b25b      	sxtb	r3, r3
20001104:	b2da      	uxtb	r2, r3
20001106:	003b      	movs	r3, r7
20001108:	789b      	ldrb	r3, [r3, #2]
2000110a:	b25b      	sxtb	r3, r3
2000110c:	b2db      	uxtb	r3, r3
2000110e:	18d3      	adds	r3, r2, r3
20001110:	b2da      	uxtb	r2, r3
20001112:	230a      	movs	r3, #10
20001114:	18fb      	adds	r3, r7, r3
20001116:	701a      	strb	r2, [r3, #0]
    i8 brick_min_y = brick.origin.y;
20001118:	2209      	movs	r2, #9
2000111a:	18bb      	adds	r3, r7, r2
2000111c:	003a      	movs	r2, r7
2000111e:	7852      	ldrb	r2, [r2, #1]
20001120:	701a      	strb	r2, [r3, #0]
    i8 brick_max_y = brick.origin.y + brick.dimen.y;
20001122:	003b      	movs	r3, r7
20001124:	785b      	ldrb	r3, [r3, #1]
20001126:	b25b      	sxtb	r3, r3
20001128:	b2da      	uxtb	r2, r3
2000112a:	003b      	movs	r3, r7
2000112c:	78db      	ldrb	r3, [r3, #3]
2000112e:	b25b      	sxtb	r3, r3
20001130:	b2db      	uxtb	r3, r3
20001132:	18d3      	adds	r3, r2, r3
20001134:	b2da      	uxtb	r2, r3
20001136:	2308      	movs	r3, #8
20001138:	18fb      	adds	r3, r7, r3
2000113a:	701a      	strb	r2, [r3, #0]
        ball_min_x <= brick_max_x
        &&
        ball_max_x >= brick_min_x
        &&
        ball_min_y <= brick_max_y
        &&
2000113c:	187a      	adds	r2, r7, r1
2000113e:	230a      	movs	r3, #10
20001140:	18fb      	adds	r3, r7, r3
20001142:	7812      	ldrb	r2, [r2, #0]
20001144:	b252      	sxtb	r2, r2
20001146:	781b      	ldrb	r3, [r3, #0]
20001148:	b25b      	sxtb	r3, r3
2000114a:	429a      	cmp	r2, r3
2000114c:	dc1b      	bgt.n	20001186 <colliding_with_brick+0xe2>
        &&
2000114e:	183a      	adds	r2, r7, r0
20001150:	19bb      	adds	r3, r7, r6
20001152:	7812      	ldrb	r2, [r2, #0]
20001154:	b252      	sxtb	r2, r2
20001156:	781b      	ldrb	r3, [r3, #0]
20001158:	b25b      	sxtb	r3, r3
2000115a:	429a      	cmp	r2, r3
2000115c:	db13      	blt.n	20001186 <colliding_with_brick+0xe2>
        &&
2000115e:	193a      	adds	r2, r7, r4
20001160:	2108      	movs	r1, #8
20001162:	187b      	adds	r3, r7, r1
20001164:	7812      	ldrb	r2, [r2, #0]
20001166:	b252      	sxtb	r2, r2
20001168:	781b      	ldrb	r3, [r3, #0]
2000116a:	b25b      	sxtb	r3, r3
2000116c:	429a      	cmp	r2, r3
2000116e:	dc0a      	bgt.n	20001186 <colliding_with_brick+0xe2>
        &&
20001170:	197a      	adds	r2, r7, r5
20001172:	2309      	movs	r3, #9
20001174:	18fb      	adds	r3, r7, r3
20001176:	7812      	ldrb	r2, [r2, #0]
20001178:	b252      	sxtb	r2, r2
2000117a:	781b      	ldrb	r3, [r3, #0]
2000117c:	b25b      	sxtb	r3, r3
2000117e:	429a      	cmp	r2, r3
20001180:	db01      	blt.n	20001186 <colliding_with_brick+0xe2>
20001182:	2301      	movs	r3, #1
20001184:	e000      	b.n	20001188 <colliding_with_brick+0xe4>
20001186:	2300      	movs	r3, #0
20001188:	b2db      	uxtb	r3, r3
        ball_max_y >= brick_min_y;
}
2000118a:	0018      	movs	r0, r3
2000118c:	46bd      	mov	sp, r7
2000118e:	b005      	add	sp, #20
20001190:	bdf0      	pop	{r4, r5, r6, r7, pc}

20001192 <game_over>:

/**
* @brief Display game over screen with final score
*/
void game_over(int score, bool win)
{
20001192:	b580      	push	{r7, lr}
20001194:	b086      	sub	sp, #24
20001196:	af00      	add	r7, sp, #0
20001198:	6078      	str	r0, [r7, #4]
2000119a:	000a      	movs	r2, r1
2000119c:	1cfb      	adds	r3, r7, #3
2000119e:	701a      	strb	r2, [r3, #0]
    graphic_clear_screen();
200011a0:	f7ff fa27 	bl	200005f2 <graphic_clear_screen>
    ascii_command(0b00000001, delay_milli, 2); // Clear display
200011a4:	4b37      	ldr	r3, [pc, #220]	@ (20001284 <game_over+0xf2>)
200011a6:	2202      	movs	r2, #2
200011a8:	0019      	movs	r1, r3
200011aa:	2001      	movs	r0, #1
200011ac:	f7ff f816 	bl	200001dc <ascii_command>
    
    char* game_result = win ? "You Win!" : "Game Over!";
200011b0:	1cfb      	adds	r3, r7, #3
200011b2:	781b      	ldrb	r3, [r3, #0]
200011b4:	2b00      	cmp	r3, #0
200011b6:	d001      	beq.n	200011bc <game_over+0x2a>
200011b8:	4b33      	ldr	r3, [pc, #204]	@ (20001288 <game_over+0xf6>)
200011ba:	e000      	b.n	200011be <game_over+0x2c>
200011bc:	4b33      	ldr	r3, [pc, #204]	@ (2000128c <game_over+0xfa>)
200011be:	613b      	str	r3, [r7, #16]
    char score_text[] = "Score: ";
200011c0:	2308      	movs	r3, #8
200011c2:	18fb      	adds	r3, r7, r3
200011c4:	4a32      	ldr	r2, [pc, #200]	@ (20001290 <game_over+0xfe>)
200011c6:	ca03      	ldmia	r2!, {r0, r1}
200011c8:	c303      	stmia	r3!, {r0, r1}
    char* s;
    
    ascii_goto(1, 1);
200011ca:	2101      	movs	r1, #1
200011cc:	2001      	movs	r0, #1
200011ce:	f7ff f86d 	bl	200002ac <ascii_goto>
    s = game_result;
200011d2:	693b      	ldr	r3, [r7, #16]
200011d4:	617b      	str	r3, [r7, #20]
    while (*s)
200011d6:	e006      	b.n	200011e6 <game_over+0x54>
        ascii_write_char(*s++);
200011d8:	697b      	ldr	r3, [r7, #20]
200011da:	1c5a      	adds	r2, r3, #1
200011dc:	617a      	str	r2, [r7, #20]
200011de:	781b      	ldrb	r3, [r3, #0]
200011e0:	0018      	movs	r0, r3
200011e2:	f7ff f87e 	bl	200002e2 <ascii_write_char>
    while (*s)
200011e6:	697b      	ldr	r3, [r7, #20]
200011e8:	781b      	ldrb	r3, [r3, #0]
200011ea:	2b00      	cmp	r3, #0
200011ec:	d1f4      	bne.n	200011d8 <game_over+0x46>
        
    ascii_goto(1, 2);
200011ee:	2102      	movs	r1, #2
200011f0:	2001      	movs	r0, #1
200011f2:	f7ff f85b 	bl	200002ac <ascii_goto>
    s = score_text;
200011f6:	2308      	movs	r3, #8
200011f8:	18fb      	adds	r3, r7, r3
200011fa:	617b      	str	r3, [r7, #20]
    while (*s)
200011fc:	e006      	b.n	2000120c <game_over+0x7a>
        ascii_write_char(*s++);
200011fe:	697b      	ldr	r3, [r7, #20]
20001200:	1c5a      	adds	r2, r3, #1
20001202:	617a      	str	r2, [r7, #20]
20001204:	781b      	ldrb	r3, [r3, #0]
20001206:	0018      	movs	r0, r3
20001208:	f7ff f86b 	bl	200002e2 <ascii_write_char>
    while (*s)
2000120c:	697b      	ldr	r3, [r7, #20]
2000120e:	781b      	ldrb	r3, [r3, #0]
20001210:	2b00      	cmp	r3, #0
20001212:	d1f4      	bne.n	200011fe <game_over+0x6c>
        
    // Convert score to string and display
    if (score >= 100)
20001214:	687b      	ldr	r3, [r7, #4]
20001216:	2b63      	cmp	r3, #99	@ 0x63
20001218:	dd0b      	ble.n	20001232 <game_over+0xa0>
        ascii_write_char('0' + score / 100);
2000121a:	687b      	ldr	r3, [r7, #4]
2000121c:	2164      	movs	r1, #100	@ 0x64
2000121e:	0018      	movs	r0, r3
20001220:	f000 ff58 	bl	200020d4 <__divsi3>
20001224:	0003      	movs	r3, r0
20001226:	b2db      	uxtb	r3, r3
20001228:	3330      	adds	r3, #48	@ 0x30
2000122a:	b2db      	uxtb	r3, r3
2000122c:	0018      	movs	r0, r3
2000122e:	f7ff f858 	bl	200002e2 <ascii_write_char>
    if (score >= 10)
20001232:	687b      	ldr	r3, [r7, #4]
20001234:	2b09      	cmp	r3, #9
20001236:	dd10      	ble.n	2000125a <game_over+0xc8>
        ascii_write_char('0' + (score % 100) / 10);
20001238:	687b      	ldr	r3, [r7, #4]
2000123a:	2164      	movs	r1, #100	@ 0x64
2000123c:	0018      	movs	r0, r3
2000123e:	f000 ff57 	bl	200020f0 <__aeabi_idivmod>
20001242:	000b      	movs	r3, r1
20001244:	210a      	movs	r1, #10
20001246:	0018      	movs	r0, r3
20001248:	f000 ff44 	bl	200020d4 <__divsi3>
2000124c:	0003      	movs	r3, r0
2000124e:	b2db      	uxtb	r3, r3
20001250:	3330      	adds	r3, #48	@ 0x30
20001252:	b2db      	uxtb	r3, r3
20001254:	0018      	movs	r0, r3
20001256:	f7ff f844 	bl	200002e2 <ascii_write_char>
    ascii_write_char('0' + (score % 10));
2000125a:	687b      	ldr	r3, [r7, #4]
2000125c:	210a      	movs	r1, #10
2000125e:	0018      	movs	r0, r3
20001260:	f000 ff46 	bl	200020f0 <__aeabi_idivmod>
20001264:	000b      	movs	r3, r1
20001266:	b2db      	uxtb	r3, r3
20001268:	3330      	adds	r3, #48	@ 0x30
2000126a:	b2db      	uxtb	r3, r3
2000126c:	0018      	movs	r0, r3
2000126e:	f7ff f838 	bl	200002e2 <ascii_write_char>
    
    delay_milli(5000);
20001272:	4b08      	ldr	r3, [pc, #32]	@ (20001294 <game_over+0x102>)
20001274:	0018      	movs	r0, r3
20001276:	f7ff f98c 	bl	20000592 <delay_milli>
}
2000127a:	46c0      	nop			@ (mov r8, r8)
2000127c:	46bd      	mov	sp, r7
2000127e:	b006      	add	sp, #24
20001280:	bd80      	pop	{r7, pc}
20001282:	46c0      	nop			@ (mov r8, r8)
20001284:	20000593 	.word	0x20000593
20001288:	20002d88 	.word	0x20002d88
2000128c:	20002d94 	.word	0x20002d94
20001290:	20002da0 	.word	0x20002da0
20001294:	00001388 	.word	0x00001388

20001298 <breakout_start_screen>:

/**
* @brief Show welcome screen
*/
void breakout_start_screen(void)
{
20001298:	b5b0      	push	{r4, r5, r7, lr}
2000129a:	b08c      	sub	sp, #48	@ 0x30
2000129c:	af00      	add	r7, sp, #0
    ascii_command(0b00000001, delay_milli, 2);
2000129e:	4b20      	ldr	r3, [pc, #128]	@ (20001320 <breakout_start_screen+0x88>)
200012a0:	2202      	movs	r2, #2
200012a2:	0019      	movs	r1, r3
200012a4:	2001      	movs	r0, #1
200012a6:	f7fe ff99 	bl	200001dc <ascii_command>

    char welcome[] = "Welcome to Breakout!";
200012aa:	2514      	movs	r5, #20
200012ac:	197b      	adds	r3, r7, r5
200012ae:	4a1d      	ldr	r2, [pc, #116]	@ (20001324 <breakout_start_screen+0x8c>)
200012b0:	ca13      	ldmia	r2!, {r0, r1, r4}
200012b2:	c313      	stmia	r3!, {r0, r1, r4}
200012b4:	ca03      	ldmia	r2!, {r0, r1}
200012b6:	c303      	stmia	r3!, {r0, r1}
200012b8:	7812      	ldrb	r2, [r2, #0]
200012ba:	701a      	strb	r2, [r3, #0]
    char press[]   = "Press 5 to start.";
200012bc:	003b      	movs	r3, r7
200012be:	4a1a      	ldr	r2, [pc, #104]	@ (20001328 <breakout_start_screen+0x90>)
200012c0:	ca13      	ldmia	r2!, {r0, r1, r4}
200012c2:	c313      	stmia	r3!, {r0, r1, r4}
200012c4:	6811      	ldr	r1, [r2, #0]
200012c6:	6019      	str	r1, [r3, #0]
200012c8:	8892      	ldrh	r2, [r2, #4]
200012ca:	809a      	strh	r2, [r3, #4]

    ascii_goto(1, 1);
200012cc:	2101      	movs	r1, #1
200012ce:	2001      	movs	r0, #1
200012d0:	f7fe ffec 	bl	200002ac <ascii_goto>
    
    char *s = welcome;
200012d4:	197b      	adds	r3, r7, r5
200012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (*s)
200012d8:	e006      	b.n	200012e8 <breakout_start_screen+0x50>
        ascii_write_char(*s++);
200012da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200012dc:	1c5a      	adds	r2, r3, #1
200012de:	62fa      	str	r2, [r7, #44]	@ 0x2c
200012e0:	781b      	ldrb	r3, [r3, #0]
200012e2:	0018      	movs	r0, r3
200012e4:	f7fe fffd 	bl	200002e2 <ascii_write_char>
    while (*s)
200012e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200012ea:	781b      	ldrb	r3, [r3, #0]
200012ec:	2b00      	cmp	r3, #0
200012ee:	d1f4      	bne.n	200012da <breakout_start_screen+0x42>

    ascii_goto(1, 2);
200012f0:	2102      	movs	r1, #2
200012f2:	2001      	movs	r0, #1
200012f4:	f7fe ffda 	bl	200002ac <ascii_goto>

    s = press;
200012f8:	003b      	movs	r3, r7
200012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (*s)
200012fc:	e006      	b.n	2000130c <breakout_start_screen+0x74>
        ascii_write_char(*s++);
200012fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20001300:	1c5a      	adds	r2, r3, #1
20001302:	62fa      	str	r2, [r7, #44]	@ 0x2c
20001304:	781b      	ldrb	r3, [r3, #0]
20001306:	0018      	movs	r0, r3
20001308:	f7fe ffeb 	bl	200002e2 <ascii_write_char>
    while (*s)
2000130c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2000130e:	781b      	ldrb	r3, [r3, #0]
20001310:	2b00      	cmp	r3, #0
20001312:	d1f4      	bne.n	200012fe <breakout_start_screen+0x66>
}
20001314:	46c0      	nop			@ (mov r8, r8)
20001316:	46c0      	nop			@ (mov r8, r8)
20001318:	46bd      	mov	sp, r7
2000131a:	b00c      	add	sp, #48	@ 0x30
2000131c:	bdb0      	pop	{r4, r5, r7, pc}
2000131e:	46c0      	nop			@ (mov r8, r8)
20001320:	20000593 	.word	0x20000593
20001324:	20002da8 	.word	0x20002da8
20001328:	20002dc0 	.word	0x20002dc0

2000132c <display_game_info>:

/**
* @brief Display score and lives on ascii display
*/
void display_game_info(int score, int lives)
{
2000132c:	b590      	push	{r4, r7, lr}
2000132e:	b089      	sub	sp, #36	@ 0x24
20001330:	af00      	add	r7, sp, #0
20001332:	6078      	str	r0, [r7, #4]
20001334:	6039      	str	r1, [r7, #0]
    // Display score
    ascii_goto(1, 2);
20001336:	2102      	movs	r1, #2
20001338:	2001      	movs	r0, #1
2000133a:	f7fe ffb7 	bl	200002ac <ascii_goto>
    char score_text[] = "Score: ";
2000133e:	2414      	movs	r4, #20
20001340:	193b      	adds	r3, r7, r4
20001342:	4a31      	ldr	r2, [pc, #196]	@ (20001408 <display_game_info+0xdc>)
20001344:	ca03      	ldmia	r2!, {r0, r1}
20001346:	c303      	stmia	r3!, {r0, r1}
    char* s = score_text;
20001348:	193b      	adds	r3, r7, r4
2000134a:	61fb      	str	r3, [r7, #28]
    while (*s)
2000134c:	e006      	b.n	2000135c <display_game_info+0x30>
        ascii_write_char(*s++);
2000134e:	69fb      	ldr	r3, [r7, #28]
20001350:	1c5a      	adds	r2, r3, #1
20001352:	61fa      	str	r2, [r7, #28]
20001354:	781b      	ldrb	r3, [r3, #0]
20001356:	0018      	movs	r0, r3
20001358:	f7fe ffc3 	bl	200002e2 <ascii_write_char>
    while (*s)
2000135c:	69fb      	ldr	r3, [r7, #28]
2000135e:	781b      	ldrb	r3, [r3, #0]
20001360:	2b00      	cmp	r3, #0
20001362:	d1f4      	bne.n	2000134e <display_game_info+0x22>
    
    // Convert score to string and display
    if (score >= 100)
20001364:	687b      	ldr	r3, [r7, #4]
20001366:	2b63      	cmp	r3, #99	@ 0x63
20001368:	dd0b      	ble.n	20001382 <display_game_info+0x56>
        ascii_write_char('0' + score / 100);
2000136a:	687b      	ldr	r3, [r7, #4]
2000136c:	2164      	movs	r1, #100	@ 0x64
2000136e:	0018      	movs	r0, r3
20001370:	f000 feb0 	bl	200020d4 <__divsi3>
20001374:	0003      	movs	r3, r0
20001376:	b2db      	uxtb	r3, r3
20001378:	3330      	adds	r3, #48	@ 0x30
2000137a:	b2db      	uxtb	r3, r3
2000137c:	0018      	movs	r0, r3
2000137e:	f7fe ffb0 	bl	200002e2 <ascii_write_char>
    if (score >= 10)
20001382:	687b      	ldr	r3, [r7, #4]
20001384:	2b09      	cmp	r3, #9
20001386:	dd10      	ble.n	200013aa <display_game_info+0x7e>
        ascii_write_char('0' + (score % 100) / 10);
20001388:	687b      	ldr	r3, [r7, #4]
2000138a:	2164      	movs	r1, #100	@ 0x64
2000138c:	0018      	movs	r0, r3
2000138e:	f000 feaf 	bl	200020f0 <__aeabi_idivmod>
20001392:	000b      	movs	r3, r1
20001394:	210a      	movs	r1, #10
20001396:	0018      	movs	r0, r3
20001398:	f000 fe9c 	bl	200020d4 <__divsi3>
2000139c:	0003      	movs	r3, r0
2000139e:	b2db      	uxtb	r3, r3
200013a0:	3330      	adds	r3, #48	@ 0x30
200013a2:	b2db      	uxtb	r3, r3
200013a4:	0018      	movs	r0, r3
200013a6:	f7fe ff9c 	bl	200002e2 <ascii_write_char>
    ascii_write_char('0' + (score % 10));
200013aa:	687b      	ldr	r3, [r7, #4]
200013ac:	210a      	movs	r1, #10
200013ae:	0018      	movs	r0, r3
200013b0:	f000 fe9e 	bl	200020f0 <__aeabi_idivmod>
200013b4:	000b      	movs	r3, r1
200013b6:	b2db      	uxtb	r3, r3
200013b8:	3330      	adds	r3, #48	@ 0x30
200013ba:	b2db      	uxtb	r3, r3
200013bc:	0018      	movs	r0, r3
200013be:	f7fe ff90 	bl	200002e2 <ascii_write_char>
    
    // Display lives
    ascii_goto(12, 2);
200013c2:	2102      	movs	r1, #2
200013c4:	200c      	movs	r0, #12
200013c6:	f7fe ff71 	bl	200002ac <ascii_goto>
    char lives_text[] = "Lives: ";
200013ca:	240c      	movs	r4, #12
200013cc:	193b      	adds	r3, r7, r4
200013ce:	4a0f      	ldr	r2, [pc, #60]	@ (2000140c <display_game_info+0xe0>)
200013d0:	ca03      	ldmia	r2!, {r0, r1}
200013d2:	c303      	stmia	r3!, {r0, r1}
    s = lives_text;
200013d4:	193b      	adds	r3, r7, r4
200013d6:	61fb      	str	r3, [r7, #28]
    while (*s)
200013d8:	e006      	b.n	200013e8 <display_game_info+0xbc>
        ascii_write_char(*s++);
200013da:	69fb      	ldr	r3, [r7, #28]
200013dc:	1c5a      	adds	r2, r3, #1
200013de:	61fa      	str	r2, [r7, #28]
200013e0:	781b      	ldrb	r3, [r3, #0]
200013e2:	0018      	movs	r0, r3
200013e4:	f7fe ff7d 	bl	200002e2 <ascii_write_char>
    while (*s)
200013e8:	69fb      	ldr	r3, [r7, #28]
200013ea:	781b      	ldrb	r3, [r3, #0]
200013ec:	2b00      	cmp	r3, #0
200013ee:	d1f4      	bne.n	200013da <display_game_info+0xae>
    ascii_write_char('0' + lives);
200013f0:	683b      	ldr	r3, [r7, #0]
200013f2:	b2db      	uxtb	r3, r3
200013f4:	3330      	adds	r3, #48	@ 0x30
200013f6:	b2db      	uxtb	r3, r3
200013f8:	0018      	movs	r0, r3
200013fa:	f7fe ff72 	bl	200002e2 <ascii_write_char>
}
200013fe:	46c0      	nop			@ (mov r8, r8)
20001400:	46bd      	mov	sp, r7
20001402:	b009      	add	sp, #36	@ 0x24
20001404:	bd90      	pop	{r4, r7, pc}
20001406:	46c0      	nop			@ (mov r8, r8)
20001408:	20002da0 	.word	0x20002da0
2000140c:	20002dd4 	.word	0x20002dd4

20001410 <init_bricks>:

/**
* @brief Initialize brick layout for the game
*/
int init_bricks(Rect bricks[], bool brick_active[])
{
20001410:	b5b0      	push	{r4, r5, r7, lr}
20001412:	b08e      	sub	sp, #56	@ 0x38
20001414:	af00      	add	r7, sp, #0
20001416:	6078      	str	r0, [r7, #4]
20001418:	6039      	str	r1, [r7, #0]
    int brick_count = 0;
2000141a:	2300      	movs	r3, #0
2000141c:	637b      	str	r3, [r7, #52]	@ 0x34
    int brick_margin_x = 3;  // Increased horizontal margin between bricks
2000141e:	2303      	movs	r3, #3
20001420:	62bb      	str	r3, [r7, #40]	@ 0x28
    int brick_margin_y = 3;  // Increased vertical margin between bricks
20001422:	2303      	movs	r3, #3
20001424:	627b      	str	r3, [r7, #36]	@ 0x24
    int start_x = 4;         // Starting x position for the first brick
20001426:	2304      	movs	r3, #4
20001428:	623b      	str	r3, [r7, #32]
    int start_y = 4;         // Starting y position for the first brick
2000142a:	2304      	movs	r3, #4
2000142c:	61fb      	str	r3, [r7, #28]
    
    // Calculate actual brick width to fit screen properly
    int actual_brick_width = (SCREEN_WIDTH - 2*start_x - (BRICK_COLS-1)*brick_margin_x) / BRICK_COLS;
2000142e:	6a3b      	ldr	r3, [r7, #32]
20001430:	2240      	movs	r2, #64	@ 0x40
20001432:	1ad3      	subs	r3, r2, r3
20001434:	005a      	lsls	r2, r3, #1
20001436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001438:	0019      	movs	r1, r3
2000143a:	00db      	lsls	r3, r3, #3
2000143c:	1acb      	subs	r3, r1, r3
2000143e:	18d3      	adds	r3, r2, r3
20001440:	2b00      	cmp	r3, #0
20001442:	da00      	bge.n	20001446 <init_bricks+0x36>
20001444:	3307      	adds	r3, #7
20001446:	10db      	asrs	r3, r3, #3
20001448:	61bb      	str	r3, [r7, #24]
    
    for (int row = 0; row < BRICK_ROWS; row++) {
2000144a:	2300      	movs	r3, #0
2000144c:	633b      	str	r3, [r7, #48]	@ 0x30
2000144e:	e058      	b.n	20001502 <init_bricks+0xf2>
        for (int col = 0; col < BRICK_COLS; col++) {
20001450:	2300      	movs	r3, #0
20001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
20001454:	e04f      	b.n	200014f6 <init_bricks+0xe6>
            int index = row * BRICK_COLS + col;
20001456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001458:	00db      	lsls	r3, r3, #3
2000145a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
2000145c:	18d3      	adds	r3, r2, r3
2000145e:	617b      	str	r3, [r7, #20]
            Point origin = {
                start_x + col * (actual_brick_width + brick_margin_x),
20001460:	69ba      	ldr	r2, [r7, #24]
20001462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001464:	18d3      	adds	r3, r2, r3
20001466:	b2db      	uxtb	r3, r3
20001468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
2000146a:	b2d2      	uxtb	r2, r2
2000146c:	4353      	muls	r3, r2
2000146e:	b2da      	uxtb	r2, r3
20001470:	6a3b      	ldr	r3, [r7, #32]
20001472:	b2db      	uxtb	r3, r3
20001474:	18d3      	adds	r3, r2, r3
20001476:	b2db      	uxtb	r3, r3
20001478:	b25a      	sxtb	r2, r3
            Point origin = {
2000147a:	2110      	movs	r1, #16
2000147c:	187b      	adds	r3, r7, r1
2000147e:	701a      	strb	r2, [r3, #0]
                start_y + row * (BRICK_HEIGHT + brick_margin_y)
20001480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001482:	3304      	adds	r3, #4
20001484:	b2db      	uxtb	r3, r3
20001486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20001488:	b2d2      	uxtb	r2, r2
2000148a:	4353      	muls	r3, r2
2000148c:	b2da      	uxtb	r2, r3
2000148e:	69fb      	ldr	r3, [r7, #28]
20001490:	b2db      	uxtb	r3, r3
20001492:	18d3      	adds	r3, r2, r3
20001494:	b2db      	uxtb	r3, r3
20001496:	b25a      	sxtb	r2, r3
            Point origin = {
20001498:	187b      	adds	r3, r7, r1
2000149a:	705a      	strb	r2, [r3, #1]
            };
            Point dimen = {actual_brick_width, BRICK_HEIGHT};
2000149c:	69bb      	ldr	r3, [r7, #24]
2000149e:	b25a      	sxtb	r2, r3
200014a0:	250c      	movs	r5, #12
200014a2:	197b      	adds	r3, r7, r5
200014a4:	701a      	strb	r2, [r3, #0]
200014a6:	197b      	adds	r3, r7, r5
200014a8:	2204      	movs	r2, #4
200014aa:	705a      	strb	r2, [r3, #1]
            bricks[index] = (Rect){origin, dimen};
200014ac:	697b      	ldr	r3, [r7, #20]
200014ae:	009b      	lsls	r3, r3, #2
200014b0:	687a      	ldr	r2, [r7, #4]
200014b2:	18d4      	adds	r4, r2, r3
200014b4:	187b      	adds	r3, r7, r1
200014b6:	0020      	movs	r0, r4
200014b8:	0019      	movs	r1, r3
200014ba:	2302      	movs	r3, #2
200014bc:	001a      	movs	r2, r3
200014be:	f001 f9d1 	bl	20002864 <memcpy>
200014c2:	2302      	movs	r3, #2
200014c4:	197a      	adds	r2, r7, r5
200014c6:	18e3      	adds	r3, r4, r3
200014c8:	0011      	movs	r1, r2
200014ca:	2202      	movs	r2, #2
200014cc:	0018      	movs	r0, r3
200014ce:	f001 f9c9 	bl	20002864 <memcpy>
            brick_active[index] = true;
200014d2:	697b      	ldr	r3, [r7, #20]
200014d4:	683a      	ldr	r2, [r7, #0]
200014d6:	18d3      	adds	r3, r2, r3
200014d8:	2201      	movs	r2, #1
200014da:	701a      	strb	r2, [r3, #0]
            draw_rect(&bricks[index]);
200014dc:	697b      	ldr	r3, [r7, #20]
200014de:	009b      	lsls	r3, r3, #2
200014e0:	687a      	ldr	r2, [r7, #4]
200014e2:	18d3      	adds	r3, r2, r3
200014e4:	0018      	movs	r0, r3
200014e6:	f7ff f99a 	bl	2000081e <draw_rect>
            brick_count++;
200014ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200014ec:	3301      	adds	r3, #1
200014ee:	637b      	str	r3, [r7, #52]	@ 0x34
        for (int col = 0; col < BRICK_COLS; col++) {
200014f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200014f2:	3301      	adds	r3, #1
200014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
200014f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200014f8:	2b07      	cmp	r3, #7
200014fa:	ddac      	ble.n	20001456 <init_bricks+0x46>
    for (int row = 0; row < BRICK_ROWS; row++) {
200014fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200014fe:	3301      	adds	r3, #1
20001500:	633b      	str	r3, [r7, #48]	@ 0x30
20001502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001504:	2b03      	cmp	r3, #3
20001506:	dda3      	ble.n	20001450 <init_bricks+0x40>
        }
    }
    
    return brick_count;
20001508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
2000150a:	0018      	movs	r0, r3
2000150c:	46bd      	mov	sp, r7
2000150e:	b00e      	add	sp, #56	@ 0x38
20001510:	bdb0      	pop	{r4, r5, r7, pc}

20001512 <main>:
    move_object,
    set_object_speed
};

int main(void)
{
20001512:	b5b0      	push	{r4, r5, r7, lr}
20001514:	b0c6      	sub	sp, #280	@ 0x118
20001516:	af00      	add	r7, sp, #0
    // Initialize application
    app_init();
20001518:	f7ff fbd8 	bl	20000ccc <app_init>
    graphic_initialize();
2000151c:	f7ff f866 	bl	200005ec <graphic_initialize>
    ascii_init();
20001520:	f7fe fea2 	bl	20000268 <ascii_init>

    // Define brick array and state
    Rect bricks[MAX_BRICKS];
    bool brick_active[MAX_BRICKS] = {0};
20001524:	2338      	movs	r3, #56	@ 0x38
20001526:	18fb      	adds	r3, r7, r3
20001528:	0018      	movs	r0, r3
2000152a:	231e      	movs	r3, #30
2000152c:	001a      	movs	r2, r3
2000152e:	2100      	movs	r1, #0
20001530:	f001 f8fd 	bl	2000272e <memset>
    
    // Game variables
    int score = 0;
20001534:	2300      	movs	r3, #0
20001536:	228a      	movs	r2, #138	@ 0x8a
20001538:	0052      	lsls	r2, r2, #1
2000153a:	18ba      	adds	r2, r7, r2
2000153c:	6013      	str	r3, [r2, #0]
    int lives = MAX_LIVES;
2000153e:	2303      	movs	r3, #3
20001540:	2288      	movs	r2, #136	@ 0x88
20001542:	0052      	lsls	r2, r2, #1
20001544:	18ba      	adds	r2, r7, r2
20001546:	6013      	str	r3, [r2, #0]
    int brick_count = 0;
20001548:	2300      	movs	r3, #0
2000154a:	2286      	movs	r2, #134	@ 0x86
2000154c:	0052      	lsls	r2, r2, #1
2000154e:	18ba      	adds	r2, r7, r2
20001550:	6013      	str	r3, [r2, #0]
    int level = 1;
20001552:	2301      	movs	r3, #1
20001554:	2284      	movs	r2, #132	@ 0x84
20001556:	0052      	lsls	r2, r2, #1
20001558:	18ba      	adds	r2, r7, r2
2000155a:	6013      	str	r3, [r2, #0]
    int game_speed = 12; // milliseconds per frame - reduced to 12 for much faster gameplay
2000155c:	230c      	movs	r3, #12
2000155e:	1d7a      	adds	r2, r7, #5
20001560:	32ff      	adds	r2, #255	@ 0xff
20001562:	6013      	str	r3, [r2, #0]

init_game:
    graphic_clear_screen();
20001564:	f7ff f845 	bl	200005f2 <graphic_clear_screen>
    breakout_start_screen();
20001568:	f7ff fe96 	bl	20001298 <breakout_start_screen>
    wait_for_start_press();
2000156c:	f7ff fbfa 	bl	20000d64 <wait_for_start_press>
    
    // Reset game state
    score = 0;
20001570:	2300      	movs	r3, #0
20001572:	228a      	movs	r2, #138	@ 0x8a
20001574:	0052      	lsls	r2, r2, #1
20001576:	18ba      	adds	r2, r7, r2
20001578:	6013      	str	r3, [r2, #0]
    lives = MAX_LIVES;
2000157a:	2303      	movs	r3, #3
2000157c:	2288      	movs	r2, #136	@ 0x88
2000157e:	0052      	lsls	r2, r2, #1
20001580:	18ba      	adds	r2, r7, r2
20001582:	6013      	str	r3, [r2, #0]
    level = 1;
20001584:	2301      	movs	r3, #1
20001586:	2284      	movs	r2, #132	@ 0x84
20001588:	0052      	lsls	r2, r2, #1
2000158a:	18ba      	adds	r2, r7, r2
2000158c:	6013      	str	r3, [r2, #0]
    game_speed = 12; // Keep consistent with initial value
2000158e:	230c      	movs	r3, #12
20001590:	1d7a      	adds	r2, r7, #5
20001592:	32ff      	adds	r2, #255	@ 0xff
20001594:	6013      	str	r3, [r2, #0]
    
    // Initialize bricks for first level
    brick_count = init_bricks(bricks, brick_active);
20001596:	2338      	movs	r3, #56	@ 0x38
20001598:	18fa      	adds	r2, r7, r3
2000159a:	2358      	movs	r3, #88	@ 0x58
2000159c:	18fb      	adds	r3, r7, r3
2000159e:	0011      	movs	r1, r2
200015a0:	0018      	movs	r0, r3
200015a2:	f7ff ff35 	bl	20001410 <init_bricks>
200015a6:	0003      	movs	r3, r0
200015a8:	2286      	movs	r2, #134	@ 0x86
200015aa:	0052      	lsls	r2, r2, #1
200015ac:	18ba      	adds	r2, r7, r2
200015ae:	6013      	str	r3, [r2, #0]

new_life:
    graphic_clear_screen();
200015b0:	f7ff f81f 	bl	200005f2 <graphic_clear_screen>
    
    // Redraw active bricks
    for (int i = 0; i < BRICK_ROWS * BRICK_COLS; i++) {
200015b4:	2300      	movs	r3, #0
200015b6:	1c7a      	adds	r2, r7, #1
200015b8:	32ff      	adds	r2, #255	@ 0xff
200015ba:	6013      	str	r3, [r2, #0]
200015bc:	e019      	b.n	200015f2 <main+0xe0>
        if (brick_active[i]) {
200015be:	2338      	movs	r3, #56	@ 0x38
200015c0:	18fa      	adds	r2, r7, r3
200015c2:	1c7b      	adds	r3, r7, #1
200015c4:	33ff      	adds	r3, #255	@ 0xff
200015c6:	681b      	ldr	r3, [r3, #0]
200015c8:	18d3      	adds	r3, r2, r3
200015ca:	781b      	ldrb	r3, [r3, #0]
200015cc:	2b00      	cmp	r3, #0
200015ce:	d009      	beq.n	200015e4 <main+0xd2>
            draw_rect(&bricks[i]);
200015d0:	2358      	movs	r3, #88	@ 0x58
200015d2:	18fa      	adds	r2, r7, r3
200015d4:	1c7b      	adds	r3, r7, #1
200015d6:	33ff      	adds	r3, #255	@ 0xff
200015d8:	681b      	ldr	r3, [r3, #0]
200015da:	009b      	lsls	r3, r3, #2
200015dc:	18d3      	adds	r3, r2, r3
200015de:	0018      	movs	r0, r3
200015e0:	f7ff f91d 	bl	2000081e <draw_rect>
    for (int i = 0; i < BRICK_ROWS * BRICK_COLS; i++) {
200015e4:	1c7b      	adds	r3, r7, #1
200015e6:	33ff      	adds	r3, #255	@ 0xff
200015e8:	681b      	ldr	r3, [r3, #0]
200015ea:	3301      	adds	r3, #1
200015ec:	1c7a      	adds	r2, r7, #1
200015ee:	32ff      	adds	r2, #255	@ 0xff
200015f0:	6013      	str	r3, [r2, #0]
200015f2:	1c7b      	adds	r3, r7, #1
200015f4:	33ff      	adds	r3, #255	@ 0xff
200015f6:	681b      	ldr	r3, [r3, #0]
200015f8:	2b1f      	cmp	r3, #31
200015fa:	dde0      	ble.n	200015be <main+0xac>
        }
    }
    
    reset_game_objects(&ball, &paddle);
200015fc:	4a97      	ldr	r2, [pc, #604]	@ (2000185c <main+0x34a>)
200015fe:	4b98      	ldr	r3, [pc, #608]	@ (20001860 <main+0x34e>)
20001600:	0011      	movs	r1, r2
20001602:	0018      	movs	r0, r3
20001604:	f7ff fd1a 	bl	2000103c <reset_game_objects>
    
    // Display game info
    ascii_command(0b00000001, delay_milli, 2); // Clear display
20001608:	4b96      	ldr	r3, [pc, #600]	@ (20001864 <main+0x352>)
2000160a:	2202      	movs	r2, #2
2000160c:	0019      	movs	r1, r3
2000160e:	2001      	movs	r0, #1
20001610:	f7fe fde4 	bl	200001dc <ascii_command>
    
    char breakout[] = "Breakout - Lv ";
20001614:	2528      	movs	r5, #40	@ 0x28
20001616:	197b      	adds	r3, r7, r5
20001618:	4a93      	ldr	r2, [pc, #588]	@ (20001868 <main+0x356>)
2000161a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000161c:	c313      	stmia	r3!, {r0, r1, r4}
2000161e:	8811      	ldrh	r1, [r2, #0]
20001620:	8019      	strh	r1, [r3, #0]
20001622:	7892      	ldrb	r2, [r2, #2]
20001624:	709a      	strb	r2, [r3, #2]
    
    ascii_goto(1, 1);
20001626:	2101      	movs	r1, #1
20001628:	2001      	movs	r0, #1
2000162a:	f7fe fe3f 	bl	200002ac <ascii_goto>
    char *s = breakout;
2000162e:	197b      	adds	r3, r7, r5
20001630:	22fc      	movs	r2, #252	@ 0xfc
20001632:	18ba      	adds	r2, r7, r2
20001634:	6013      	str	r3, [r2, #0]
    while (*s)
20001636:	e009      	b.n	2000164c <main+0x13a>
        ascii_write_char(*s++);
20001638:	21fc      	movs	r1, #252	@ 0xfc
2000163a:	187b      	adds	r3, r7, r1
2000163c:	681b      	ldr	r3, [r3, #0]
2000163e:	1c5a      	adds	r2, r3, #1
20001640:	1879      	adds	r1, r7, r1
20001642:	600a      	str	r2, [r1, #0]
20001644:	781b      	ldrb	r3, [r3, #0]
20001646:	0018      	movs	r0, r3
20001648:	f7fe fe4b 	bl	200002e2 <ascii_write_char>
    while (*s)
2000164c:	23fc      	movs	r3, #252	@ 0xfc
2000164e:	18fb      	adds	r3, r7, r3
20001650:	681b      	ldr	r3, [r3, #0]
20001652:	781b      	ldrb	r3, [r3, #0]
20001654:	2b00      	cmp	r3, #0
20001656:	d1ef      	bne.n	20001638 <main+0x126>
    
    // Display level number
    ascii_write_char('0' + level);
20001658:	2384      	movs	r3, #132	@ 0x84
2000165a:	005b      	lsls	r3, r3, #1
2000165c:	18fb      	adds	r3, r7, r3
2000165e:	681b      	ldr	r3, [r3, #0]
20001660:	b2db      	uxtb	r3, r3
20001662:	3330      	adds	r3, #48	@ 0x30
20001664:	b2db      	uxtb	r3, r3
20001666:	0018      	movs	r0, r3
20001668:	f7fe fe3b 	bl	200002e2 <ascii_write_char>
    
    // Display score and lives
    display_game_info(score, lives);
2000166c:	2388      	movs	r3, #136	@ 0x88
2000166e:	005b      	lsls	r3, r3, #1
20001670:	18fb      	adds	r3, r7, r3
20001672:	681a      	ldr	r2, [r3, #0]
20001674:	238a      	movs	r3, #138	@ 0x8a
20001676:	005b      	lsls	r3, r3, #1
20001678:	18fb      	adds	r3, r7, r3
2000167a:	681b      	ldr	r3, [r3, #0]
2000167c:	0011      	movs	r1, r2
2000167e:	0018      	movs	r0, r3
20001680:	f7ff fe54 	bl	2000132c <display_game_info>

    // Gameplay-loop
    while (true)
    {
        // Read input
        Input *keyb_input = keyb();
20001684:	f7ff fa30 	bl	20000ae8 <keyb>
20001688:	0003      	movs	r3, r0
2000168a:	21e8      	movs	r1, #232	@ 0xe8
2000168c:	187a      	adds	r2, r7, r1
2000168e:	6013      	str	r3, [r2, #0]
        i8 paddle_dx = 0;
20001690:	23fb      	movs	r3, #251	@ 0xfb
20001692:	18fb      	adds	r3, r7, r3
20001694:	2200      	movs	r2, #0
20001696:	701a      	strb	r2, [r3, #0]

        if (keyb_input->n_presses > 0)
20001698:	187b      	adds	r3, r7, r1
2000169a:	681b      	ldr	r3, [r3, #0]
2000169c:	791b      	ldrb	r3, [r3, #4]
2000169e:	2b00      	cmp	r3, #0
200016a0:	d038      	beq.n	20001714 <main+0x202>
        {
            for (u8 i = 0; i < keyb_input->n_presses; i++)
200016a2:	23fa      	movs	r3, #250	@ 0xfa
200016a4:	18fb      	adds	r3, r7, r3
200016a6:	2200      	movs	r2, #0
200016a8:	701a      	strb	r2, [r3, #0]
200016aa:	e02a      	b.n	20001702 <main+0x1f0>
            {
                u8 current_input = keyb_input->buffer[i];
200016ac:	23fa      	movs	r3, #250	@ 0xfa
200016ae:	18fb      	adds	r3, r7, r3
200016b0:	781a      	ldrb	r2, [r3, #0]
200016b2:	20e7      	movs	r0, #231	@ 0xe7
200016b4:	183b      	adds	r3, r7, r0
200016b6:	21e8      	movs	r1, #232	@ 0xe8
200016b8:	1879      	adds	r1, r7, r1
200016ba:	6809      	ldr	r1, [r1, #0]
200016bc:	5c8a      	ldrb	r2, [r1, r2]
200016be:	701a      	strb	r2, [r3, #0]
                switch (current_input)
200016c0:	183b      	adds	r3, r7, r0
200016c2:	781b      	ldrb	r3, [r3, #0]
200016c4:	2b01      	cmp	r3, #1
200016c6:	d002      	beq.n	200016ce <main+0x1bc>
200016c8:	2b03      	cmp	r3, #3
200016ca:	d00a      	beq.n	200016e2 <main+0x1d0>
                case PADDLE_MOVE_LEFT:
                    paddle_dx--; break;
                case PADDLE_MOVE_RIGHT:
                    paddle_dx++; break;
                default:
                    break;
200016cc:	e013      	b.n	200016f6 <main+0x1e4>
                    paddle_dx--; break;
200016ce:	21fb      	movs	r1, #251	@ 0xfb
200016d0:	187b      	adds	r3, r7, r1
200016d2:	781b      	ldrb	r3, [r3, #0]
200016d4:	b25b      	sxtb	r3, r3
200016d6:	b2db      	uxtb	r3, r3
200016d8:	3b01      	subs	r3, #1
200016da:	b2da      	uxtb	r2, r3
200016dc:	187b      	adds	r3, r7, r1
200016de:	701a      	strb	r2, [r3, #0]
200016e0:	e009      	b.n	200016f6 <main+0x1e4>
                    paddle_dx++; break;
200016e2:	21fb      	movs	r1, #251	@ 0xfb
200016e4:	187b      	adds	r3, r7, r1
200016e6:	781b      	ldrb	r3, [r3, #0]
200016e8:	b25b      	sxtb	r3, r3
200016ea:	b2db      	uxtb	r3, r3
200016ec:	3301      	adds	r3, #1
200016ee:	b2da      	uxtb	r2, r3
200016f0:	187b      	adds	r3, r7, r1
200016f2:	701a      	strb	r2, [r3, #0]
200016f4:	46c0      	nop			@ (mov r8, r8)
            for (u8 i = 0; i < keyb_input->n_presses; i++)
200016f6:	21fa      	movs	r1, #250	@ 0xfa
200016f8:	187b      	adds	r3, r7, r1
200016fa:	781a      	ldrb	r2, [r3, #0]
200016fc:	187b      	adds	r3, r7, r1
200016fe:	3201      	adds	r2, #1
20001700:	701a      	strb	r2, [r3, #0]
20001702:	23e8      	movs	r3, #232	@ 0xe8
20001704:	18fb      	adds	r3, r7, r3
20001706:	681b      	ldr	r3, [r3, #0]
20001708:	791b      	ldrb	r3, [r3, #4]
2000170a:	22fa      	movs	r2, #250	@ 0xfa
2000170c:	18ba      	adds	r2, r7, r2
2000170e:	7812      	ldrb	r2, [r2, #0]
20001710:	429a      	cmp	r2, r3
20001712:	d3cb      	bcc.n	200016ac <main+0x19a>
                }
            }
        }

        // Set paddle speed from input
        paddle.set_speed(&paddle, paddle_dx * SPEED, 0);
20001714:	4b51      	ldr	r3, [pc, #324]	@ (2000185c <main+0x34a>)
20001716:	6a1b      	ldr	r3, [r3, #32]
20001718:	22fb      	movs	r2, #251	@ 0xfb
2000171a:	18ba      	adds	r2, r7, r2
2000171c:	7812      	ldrb	r2, [r2, #0]
2000171e:	b252      	sxtb	r2, r2
20001720:	00d1      	lsls	r1, r2, #3
20001722:	484e      	ldr	r0, [pc, #312]	@ (2000185c <main+0x34a>)
20001724:	2200      	movs	r2, #0
20001726:	4798      	blx	r3

        // Only move the paddle if it stays inside the screen
        if ((paddle.pos_x + paddle.dir_x >= 1) && 
20001728:	4b4c      	ldr	r3, [pc, #304]	@ (2000185c <main+0x34a>)
2000172a:	68da      	ldr	r2, [r3, #12]
2000172c:	4b4b      	ldr	r3, [pc, #300]	@ (2000185c <main+0x34a>)
2000172e:	685b      	ldr	r3, [r3, #4]
20001730:	18d3      	adds	r3, r2, r3
20001732:	2b00      	cmp	r3, #0
20001734:	dd0f      	ble.n	20001756 <main+0x244>
            (paddle.pos_x + paddle.dir_x + paddle.geo->size_x <= SCREEN_WIDTH)) {
20001736:	4b49      	ldr	r3, [pc, #292]	@ (2000185c <main+0x34a>)
20001738:	68da      	ldr	r2, [r3, #12]
2000173a:	4b48      	ldr	r3, [pc, #288]	@ (2000185c <main+0x34a>)
2000173c:	685b      	ldr	r3, [r3, #4]
2000173e:	18d2      	adds	r2, r2, r3
20001740:	4b46      	ldr	r3, [pc, #280]	@ (2000185c <main+0x34a>)
20001742:	681b      	ldr	r3, [r3, #0]
20001744:	685b      	ldr	r3, [r3, #4]
20001746:	18d3      	adds	r3, r2, r3
        if ((paddle.pos_x + paddle.dir_x >= 1) && 
20001748:	2b80      	cmp	r3, #128	@ 0x80
2000174a:	dc04      	bgt.n	20001756 <main+0x244>
            paddle.move(&paddle);
2000174c:	4b43      	ldr	r3, [pc, #268]	@ (2000185c <main+0x34a>)
2000174e:	69db      	ldr	r3, [r3, #28]
20001750:	4a42      	ldr	r2, [pc, #264]	@ (2000185c <main+0x34a>)
20001752:	0010      	movs	r0, r2
20001754:	4798      	blx	r3
        }

        // Move ball
        ball.move(&ball);
20001756:	4b42      	ldr	r3, [pc, #264]	@ (20001860 <main+0x34e>)
20001758:	69db      	ldr	r3, [r3, #28]
2000175a:	4a41      	ldr	r2, [pc, #260]	@ (20001860 <main+0x34e>)
2000175c:	0010      	movs	r0, r2
2000175e:	4798      	blx	r3

        // Check for ball collision with paddle
        if (colliding_with_paddle(&ball, &paddle)) {
20001760:	4a3e      	ldr	r2, [pc, #248]	@ (2000185c <main+0x34a>)
20001762:	4b3f      	ldr	r3, [pc, #252]	@ (20001860 <main+0x34e>)
20001764:	0011      	movs	r1, r2
20001766:	0018      	movs	r0, r3
20001768:	f7ff fb34 	bl	20000dd4 <colliding_with_paddle>
2000176c:	1e03      	subs	r3, r0, #0
2000176e:	d06b      	beq.n	20001848 <main+0x336>
            // Bounce ball based on where it hit the paddle
            ball.dir_y = -abs(ball.dir_y); // Always bounce up
20001770:	4b3b      	ldr	r3, [pc, #236]	@ (20001860 <main+0x34e>)
20001772:	689b      	ldr	r3, [r3, #8]
20001774:	b25b      	sxtb	r3, r3
20001776:	0018      	movs	r0, r3
20001778:	f7ff f985 	bl	20000a86 <abs>
2000177c:	0003      	movs	r3, r0
2000177e:	425a      	negs	r2, r3
20001780:	4b37      	ldr	r3, [pc, #220]	@ (20001860 <main+0x34e>)
20001782:	609a      	str	r2, [r3, #8]
            
            // Adjust x direction based on where ball hit paddle
            int hit_pos = ball.pos_x - paddle.pos_x;
20001784:	4b36      	ldr	r3, [pc, #216]	@ (20001860 <main+0x34e>)
20001786:	68da      	ldr	r2, [r3, #12]
20001788:	4b34      	ldr	r3, [pc, #208]	@ (2000185c <main+0x34a>)
2000178a:	68db      	ldr	r3, [r3, #12]
2000178c:	1ad3      	subs	r3, r2, r3
2000178e:	24e0      	movs	r4, #224	@ 0xe0
20001790:	193a      	adds	r2, r7, r4
20001792:	6013      	str	r3, [r2, #0]
            int paddle_width = paddle.geo->size_x;
20001794:	4b31      	ldr	r3, [pc, #196]	@ (2000185c <main+0x34a>)
20001796:	681b      	ldr	r3, [r3, #0]
20001798:	685b      	ldr	r3, [r3, #4]
2000179a:	22dc      	movs	r2, #220	@ 0xdc
2000179c:	18b9      	adds	r1, r7, r2
2000179e:	600b      	str	r3, [r1, #0]
            
            // Divide paddle into 5 segments for more precise control
            if (hit_pos < paddle_width / 5) {
200017a0:	18bb      	adds	r3, r7, r2
200017a2:	681b      	ldr	r3, [r3, #0]
200017a4:	2105      	movs	r1, #5
200017a6:	0018      	movs	r0, r3
200017a8:	f000 fc94 	bl	200020d4 <__divsi3>
200017ac:	0003      	movs	r3, r0
200017ae:	001a      	movs	r2, r3
200017b0:	193b      	adds	r3, r7, r4
200017b2:	681b      	ldr	r3, [r3, #0]
200017b4:	4293      	cmp	r3, r2
200017b6:	da04      	bge.n	200017c2 <main+0x2b0>
                // Far left - sharp angle
                ball.dir_x = -3;
200017b8:	4b29      	ldr	r3, [pc, #164]	@ (20001860 <main+0x34e>)
200017ba:	2203      	movs	r2, #3
200017bc:	4252      	negs	r2, r2
200017be:	605a      	str	r2, [r3, #4]
200017c0:	e042      	b.n	20001848 <main+0x336>
            } else if (hit_pos < paddle_width * 2/5) {
200017c2:	23dc      	movs	r3, #220	@ 0xdc
200017c4:	18fb      	adds	r3, r7, r3
200017c6:	681b      	ldr	r3, [r3, #0]
200017c8:	005b      	lsls	r3, r3, #1
200017ca:	2105      	movs	r1, #5
200017cc:	0018      	movs	r0, r3
200017ce:	f000 fc81 	bl	200020d4 <__divsi3>
200017d2:	0003      	movs	r3, r0
200017d4:	001a      	movs	r2, r3
200017d6:	23e0      	movs	r3, #224	@ 0xe0
200017d8:	18fb      	adds	r3, r7, r3
200017da:	681b      	ldr	r3, [r3, #0]
200017dc:	4293      	cmp	r3, r2
200017de:	da04      	bge.n	200017ea <main+0x2d8>
                // Left side - medium angle
                ball.dir_x = -2;
200017e0:	4b1f      	ldr	r3, [pc, #124]	@ (20001860 <main+0x34e>)
200017e2:	2202      	movs	r2, #2
200017e4:	4252      	negs	r2, r2
200017e6:	605a      	str	r2, [r3, #4]
200017e8:	e02e      	b.n	20001848 <main+0x336>
            } else if (hit_pos < paddle_width * 3/5) {
200017ea:	23dc      	movs	r3, #220	@ 0xdc
200017ec:	18fb      	adds	r3, r7, r3
200017ee:	681a      	ldr	r2, [r3, #0]
200017f0:	0013      	movs	r3, r2
200017f2:	005b      	lsls	r3, r3, #1
200017f4:	189b      	adds	r3, r3, r2
200017f6:	2105      	movs	r1, #5
200017f8:	0018      	movs	r0, r3
200017fa:	f000 fc6b 	bl	200020d4 <__divsi3>
200017fe:	0003      	movs	r3, r0
20001800:	001a      	movs	r2, r3
20001802:	23e0      	movs	r3, #224	@ 0xe0
20001804:	18fb      	adds	r3, r7, r3
20001806:	681b      	ldr	r3, [r3, #0]
20001808:	4293      	cmp	r3, r2
2000180a:	da07      	bge.n	2000181c <main+0x30a>
                // Center - keep current x direction but ensure it's not 0
                if (ball.dir_x == 0) ball.dir_x = 1;
2000180c:	4b14      	ldr	r3, [pc, #80]	@ (20001860 <main+0x34e>)
2000180e:	685b      	ldr	r3, [r3, #4]
20001810:	2b00      	cmp	r3, #0
20001812:	d119      	bne.n	20001848 <main+0x336>
20001814:	4b12      	ldr	r3, [pc, #72]	@ (20001860 <main+0x34e>)
20001816:	2201      	movs	r2, #1
20001818:	605a      	str	r2, [r3, #4]
2000181a:	e015      	b.n	20001848 <main+0x336>
            } else if (hit_pos < paddle_width * 4/5) {
2000181c:	23dc      	movs	r3, #220	@ 0xdc
2000181e:	18fb      	adds	r3, r7, r3
20001820:	681b      	ldr	r3, [r3, #0]
20001822:	009b      	lsls	r3, r3, #2
20001824:	2105      	movs	r1, #5
20001826:	0018      	movs	r0, r3
20001828:	f000 fc54 	bl	200020d4 <__divsi3>
2000182c:	0003      	movs	r3, r0
2000182e:	001a      	movs	r2, r3
20001830:	23e0      	movs	r3, #224	@ 0xe0
20001832:	18fb      	adds	r3, r7, r3
20001834:	681b      	ldr	r3, [r3, #0]
20001836:	4293      	cmp	r3, r2
20001838:	da03      	bge.n	20001842 <main+0x330>
                // Right side - medium angle
                ball.dir_x = 2;
2000183a:	4b09      	ldr	r3, [pc, #36]	@ (20001860 <main+0x34e>)
2000183c:	2202      	movs	r2, #2
2000183e:	605a      	str	r2, [r3, #4]
20001840:	e002      	b.n	20001848 <main+0x336>
            } else {
                // Far right - sharp angle
                ball.dir_x = 3;
20001842:	4b07      	ldr	r3, [pc, #28]	@ (20001860 <main+0x34e>)
20001844:	2203      	movs	r2, #3
20001846:	605a      	str	r2, [r3, #4]
            }
        }
        
        // Check for ball collision with bricks
        bool brick_hit = false;
20001848:	23db      	movs	r3, #219	@ 0xdb
2000184a:	18fb      	adds	r3, r7, r3
2000184c:	2200      	movs	r2, #0
2000184e:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < BRICK_ROWS * BRICK_COLS; i++) {
20001850:	2300      	movs	r3, #0
20001852:	22f4      	movs	r2, #244	@ 0xf4
20001854:	18ba      	adds	r2, r7, r2
20001856:	6013      	str	r3, [r2, #0]
20001858:	e1f4      	b.n	20001c44 <main+0x732>
2000185a:	46c0      	nop			@ (mov r8, r8)
2000185c:	20002c98 	.word	0x20002c98
20001860:	20002c74 	.word	0x20002c74
20001864:	20000593 	.word	0x20000593
20001868:	20002ddc 	.word	0x20002ddc
            if (brick_active[i]) {
2000186c:	2338      	movs	r3, #56	@ 0x38
2000186e:	18fa      	adds	r2, r7, r3
20001870:	21f4      	movs	r1, #244	@ 0xf4
20001872:	187b      	adds	r3, r7, r1
20001874:	681b      	ldr	r3, [r3, #0]
20001876:	18d3      	adds	r3, r2, r3
20001878:	781b      	ldrb	r3, [r3, #0]
2000187a:	2b00      	cmp	r3, #0
2000187c:	d100      	bne.n	20001880 <main+0x36e>
2000187e:	e1db      	b.n	20001c38 <main+0x726>
                if (colliding_with_brick(&ball, bricks[i])) {
20001880:	2358      	movs	r3, #88	@ 0x58
20001882:	18fb      	adds	r3, r7, r3
20001884:	187a      	adds	r2, r7, r1
20001886:	6812      	ldr	r2, [r2, #0]
20001888:	0092      	lsls	r2, r2, #2
2000188a:	48e5      	ldr	r0, [pc, #916]	@ (20001c20 <main+0x70e>)
2000188c:	58d1      	ldr	r1, [r2, r3]
2000188e:	f7ff fc09 	bl	200010a4 <colliding_with_brick>
20001892:	1e03      	subs	r3, r0, #0
20001894:	d100      	bne.n	20001898 <main+0x386>
20001896:	e1cf      	b.n	20001c38 <main+0x726>
                    // Determine which side of the brick was hit
                    i8 ball_cx = ball.pos_x + ball.geo->size_x / 2;
20001898:	4be1      	ldr	r3, [pc, #900]	@ (20001c20 <main+0x70e>)
2000189a:	68db      	ldr	r3, [r3, #12]
2000189c:	b2da      	uxtb	r2, r3
2000189e:	4be0      	ldr	r3, [pc, #896]	@ (20001c20 <main+0x70e>)
200018a0:	681b      	ldr	r3, [r3, #0]
200018a2:	685b      	ldr	r3, [r3, #4]
200018a4:	2b00      	cmp	r3, #0
200018a6:	da00      	bge.n	200018aa <main+0x398>
200018a8:	3301      	adds	r3, #1
200018aa:	105b      	asrs	r3, r3, #1
200018ac:	b2db      	uxtb	r3, r3
200018ae:	18d3      	adds	r3, r2, r3
200018b0:	b2da      	uxtb	r2, r3
200018b2:	23da      	movs	r3, #218	@ 0xda
200018b4:	18fb      	adds	r3, r7, r3
200018b6:	701a      	strb	r2, [r3, #0]
                    i8 ball_cy = ball.pos_y + ball.geo->size_y / 2;
200018b8:	4bd9      	ldr	r3, [pc, #868]	@ (20001c20 <main+0x70e>)
200018ba:	691b      	ldr	r3, [r3, #16]
200018bc:	b2da      	uxtb	r2, r3
200018be:	4bd8      	ldr	r3, [pc, #864]	@ (20001c20 <main+0x70e>)
200018c0:	681b      	ldr	r3, [r3, #0]
200018c2:	689b      	ldr	r3, [r3, #8]
200018c4:	2b00      	cmp	r3, #0
200018c6:	da00      	bge.n	200018ca <main+0x3b8>
200018c8:	3301      	adds	r3, #1
200018ca:	105b      	asrs	r3, r3, #1
200018cc:	b2db      	uxtb	r3, r3
200018ce:	18d3      	adds	r3, r2, r3
200018d0:	b2da      	uxtb	r2, r3
200018d2:	23d9      	movs	r3, #217	@ 0xd9
200018d4:	18fb      	adds	r3, r7, r3
200018d6:	701a      	strb	r2, [r3, #0]
                    i8 brick_cx = bricks[i].origin.x + bricks[i].dimen.x / 2;
200018d8:	2158      	movs	r1, #88	@ 0x58
200018da:	187b      	adds	r3, r7, r1
200018dc:	20f4      	movs	r0, #244	@ 0xf4
200018de:	183a      	adds	r2, r7, r0
200018e0:	6812      	ldr	r2, [r2, #0]
200018e2:	0092      	lsls	r2, r2, #2
200018e4:	56d3      	ldrsb	r3, [r2, r3]
200018e6:	b2da      	uxtb	r2, r3
200018e8:	1879      	adds	r1, r7, r1
200018ea:	183b      	adds	r3, r7, r0
200018ec:	681b      	ldr	r3, [r3, #0]
200018ee:	009b      	lsls	r3, r3, #2
200018f0:	18cb      	adds	r3, r1, r3
200018f2:	3302      	adds	r3, #2
200018f4:	781b      	ldrb	r3, [r3, #0]
200018f6:	b25b      	sxtb	r3, r3
200018f8:	2b00      	cmp	r3, #0
200018fa:	da00      	bge.n	200018fe <main+0x3ec>
200018fc:	3301      	adds	r3, #1
200018fe:	105b      	asrs	r3, r3, #1
20001900:	b25b      	sxtb	r3, r3
20001902:	b2db      	uxtb	r3, r3
20001904:	18d3      	adds	r3, r2, r3
20001906:	b2da      	uxtb	r2, r3
20001908:	23d8      	movs	r3, #216	@ 0xd8
2000190a:	18fb      	adds	r3, r7, r3
2000190c:	701a      	strb	r2, [r3, #0]
                    i8 brick_cy = bricks[i].origin.y + bricks[i].dimen.y / 2;
2000190e:	2158      	movs	r1, #88	@ 0x58
20001910:	187a      	adds	r2, r7, r1
20001912:	20f4      	movs	r0, #244	@ 0xf4
20001914:	183b      	adds	r3, r7, r0
20001916:	681b      	ldr	r3, [r3, #0]
20001918:	009b      	lsls	r3, r3, #2
2000191a:	18d3      	adds	r3, r2, r3
2000191c:	3301      	adds	r3, #1
2000191e:	781b      	ldrb	r3, [r3, #0]
20001920:	b25b      	sxtb	r3, r3
20001922:	b2da      	uxtb	r2, r3
20001924:	1879      	adds	r1, r7, r1
20001926:	183b      	adds	r3, r7, r0
20001928:	681b      	ldr	r3, [r3, #0]
2000192a:	009b      	lsls	r3, r3, #2
2000192c:	18cb      	adds	r3, r1, r3
2000192e:	3303      	adds	r3, #3
20001930:	781b      	ldrb	r3, [r3, #0]
20001932:	b25b      	sxtb	r3, r3
20001934:	2b00      	cmp	r3, #0
20001936:	da00      	bge.n	2000193a <main+0x428>
20001938:	3301      	adds	r3, #1
2000193a:	105b      	asrs	r3, r3, #1
2000193c:	b25b      	sxtb	r3, r3
2000193e:	b2db      	uxtb	r3, r3
20001940:	18d3      	adds	r3, r2, r3
20001942:	b2da      	uxtb	r2, r3
20001944:	21d7      	movs	r1, #215	@ 0xd7
20001946:	187b      	adds	r3, r7, r1
20001948:	701a      	strb	r2, [r3, #0]
                    
                    // Calculate distance from centers in each direction
                    i8 dx = ball_cx - brick_cx;
2000194a:	23da      	movs	r3, #218	@ 0xda
2000194c:	18fb      	adds	r3, r7, r3
2000194e:	781a      	ldrb	r2, [r3, #0]
20001950:	23d8      	movs	r3, #216	@ 0xd8
20001952:	18fb      	adds	r3, r7, r3
20001954:	781b      	ldrb	r3, [r3, #0]
20001956:	1ad3      	subs	r3, r2, r3
20001958:	b2da      	uxtb	r2, r3
2000195a:	23d6      	movs	r3, #214	@ 0xd6
2000195c:	18fb      	adds	r3, r7, r3
2000195e:	701a      	strb	r2, [r3, #0]
                    i8 dy = ball_cy - brick_cy;
20001960:	23d9      	movs	r3, #217	@ 0xd9
20001962:	18fb      	adds	r3, r7, r3
20001964:	781a      	ldrb	r2, [r3, #0]
20001966:	187b      	adds	r3, r7, r1
20001968:	781b      	ldrb	r3, [r3, #0]
2000196a:	1ad3      	subs	r3, r2, r3
2000196c:	b2da      	uxtb	r2, r3
2000196e:	23d5      	movs	r3, #213	@ 0xd5
20001970:	18fb      	adds	r3, r7, r3
20001972:	701a      	strb	r2, [r3, #0]
                    
                    // Calculate overlap in each direction
                    i8 overlap_x = (ball.geo->size_x + bricks[i].dimen.x) / 2 - abs(dx);
20001974:	4baa      	ldr	r3, [pc, #680]	@ (20001c20 <main+0x70e>)
20001976:	681b      	ldr	r3, [r3, #0]
20001978:	685b      	ldr	r3, [r3, #4]
2000197a:	2258      	movs	r2, #88	@ 0x58
2000197c:	18b9      	adds	r1, r7, r2
2000197e:	22f4      	movs	r2, #244	@ 0xf4
20001980:	18ba      	adds	r2, r7, r2
20001982:	6812      	ldr	r2, [r2, #0]
20001984:	0092      	lsls	r2, r2, #2
20001986:	188a      	adds	r2, r1, r2
20001988:	3202      	adds	r2, #2
2000198a:	7812      	ldrb	r2, [r2, #0]
2000198c:	b252      	sxtb	r2, r2
2000198e:	189b      	adds	r3, r3, r2
20001990:	2b00      	cmp	r3, #0
20001992:	da00      	bge.n	20001996 <main+0x484>
20001994:	3301      	adds	r3, #1
20001996:	105b      	asrs	r3, r3, #1
20001998:	b2dc      	uxtb	r4, r3
2000199a:	23d6      	movs	r3, #214	@ 0xd6
2000199c:	18fb      	adds	r3, r7, r3
2000199e:	781b      	ldrb	r3, [r3, #0]
200019a0:	b25b      	sxtb	r3, r3
200019a2:	0018      	movs	r0, r3
200019a4:	f7ff f86f 	bl	20000a86 <abs>
200019a8:	0003      	movs	r3, r0
200019aa:	b2db      	uxtb	r3, r3
200019ac:	1ae3      	subs	r3, r4, r3
200019ae:	b2da      	uxtb	r2, r3
200019b0:	23d4      	movs	r3, #212	@ 0xd4
200019b2:	18fb      	adds	r3, r7, r3
200019b4:	701a      	strb	r2, [r3, #0]
                    i8 overlap_y = (ball.geo->size_y + bricks[i].dimen.y) / 2 - abs(dy);
200019b6:	4b9a      	ldr	r3, [pc, #616]	@ (20001c20 <main+0x70e>)
200019b8:	681b      	ldr	r3, [r3, #0]
200019ba:	689b      	ldr	r3, [r3, #8]
200019bc:	2258      	movs	r2, #88	@ 0x58
200019be:	18b9      	adds	r1, r7, r2
200019c0:	22f4      	movs	r2, #244	@ 0xf4
200019c2:	18ba      	adds	r2, r7, r2
200019c4:	6812      	ldr	r2, [r2, #0]
200019c6:	0092      	lsls	r2, r2, #2
200019c8:	188a      	adds	r2, r1, r2
200019ca:	3203      	adds	r2, #3
200019cc:	7812      	ldrb	r2, [r2, #0]
200019ce:	b252      	sxtb	r2, r2
200019d0:	189b      	adds	r3, r3, r2
200019d2:	2b00      	cmp	r3, #0
200019d4:	da00      	bge.n	200019d8 <main+0x4c6>
200019d6:	3301      	adds	r3, #1
200019d8:	105b      	asrs	r3, r3, #1
200019da:	b2dc      	uxtb	r4, r3
200019dc:	23d5      	movs	r3, #213	@ 0xd5
200019de:	18fb      	adds	r3, r7, r3
200019e0:	781b      	ldrb	r3, [r3, #0]
200019e2:	b25b      	sxtb	r3, r3
200019e4:	0018      	movs	r0, r3
200019e6:	f7ff f84e 	bl	20000a86 <abs>
200019ea:	0003      	movs	r3, r0
200019ec:	b2db      	uxtb	r3, r3
200019ee:	1ae3      	subs	r3, r4, r3
200019f0:	b2da      	uxtb	r2, r3
200019f2:	21d3      	movs	r1, #211	@ 0xd3
200019f4:	187b      	adds	r3, r7, r1
200019f6:	701a      	strb	r2, [r3, #0]
                    
                    // Change direction based on smaller overlap (more likely collision side)
                    if (overlap_x < overlap_y) {
200019f8:	23d4      	movs	r3, #212	@ 0xd4
200019fa:	18fa      	adds	r2, r7, r3
200019fc:	187b      	adds	r3, r7, r1
200019fe:	7812      	ldrb	r2, [r2, #0]
20001a00:	b252      	sxtb	r2, r2
20001a02:	781b      	ldrb	r3, [r3, #0]
20001a04:	b25b      	sxtb	r3, r3
20001a06:	429a      	cmp	r2, r3
20001a08:	da05      	bge.n	20001a16 <main+0x504>
                        ball.dir_x *= -1;
20001a0a:	4b85      	ldr	r3, [pc, #532]	@ (20001c20 <main+0x70e>)
20001a0c:	685b      	ldr	r3, [r3, #4]
20001a0e:	425a      	negs	r2, r3
20001a10:	4b83      	ldr	r3, [pc, #524]	@ (20001c20 <main+0x70e>)
20001a12:	605a      	str	r2, [r3, #4]
20001a14:	e004      	b.n	20001a20 <main+0x50e>
                    } else {
                        ball.dir_y *= -1;
20001a16:	4b82      	ldr	r3, [pc, #520]	@ (20001c20 <main+0x70e>)
20001a18:	689b      	ldr	r3, [r3, #8]
20001a1a:	425a      	negs	r2, r3
20001a1c:	4b80      	ldr	r3, [pc, #512]	@ (20001c20 <main+0x70e>)
20001a1e:	609a      	str	r2, [r3, #8]
                    }
                    
                    // Remove the brick and increment score
                    brick_active[i] = false;
20001a20:	2338      	movs	r3, #56	@ 0x38
20001a22:	18fa      	adds	r2, r7, r3
20001a24:	24f4      	movs	r4, #244	@ 0xf4
20001a26:	193b      	adds	r3, r7, r4
20001a28:	681b      	ldr	r3, [r3, #0]
20001a2a:	18d3      	adds	r3, r2, r3
20001a2c:	2200      	movs	r2, #0
20001a2e:	701a      	strb	r2, [r3, #0]
                    score += 10;
20001a30:	218a      	movs	r1, #138	@ 0x8a
20001a32:	0049      	lsls	r1, r1, #1
20001a34:	187b      	adds	r3, r7, r1
20001a36:	681b      	ldr	r3, [r3, #0]
20001a38:	330a      	adds	r3, #10
20001a3a:	187a      	adds	r2, r7, r1
20001a3c:	6013      	str	r3, [r2, #0]
                    display_game_info(score, lives);
20001a3e:	2388      	movs	r3, #136	@ 0x88
20001a40:	005b      	lsls	r3, r3, #1
20001a42:	18fb      	adds	r3, r7, r3
20001a44:	681a      	ldr	r2, [r3, #0]
20001a46:	187b      	adds	r3, r7, r1
20001a48:	681b      	ldr	r3, [r3, #0]
20001a4a:	0011      	movs	r1, r2
20001a4c:	0018      	movs	r0, r3
20001a4e:	f7ff fc6d 	bl	2000132c <display_game_info>
                    
                    // Efficiently clear the brick from the screen
                    for (int j = bricks[i].origin.x - 1; j <= bricks[i].origin.x + bricks[i].dimen.x + 1; j++) {
20001a52:	2358      	movs	r3, #88	@ 0x58
20001a54:	18fb      	adds	r3, r7, r3
20001a56:	193a      	adds	r2, r7, r4
20001a58:	6812      	ldr	r2, [r2, #0]
20001a5a:	0092      	lsls	r2, r2, #2
20001a5c:	56d3      	ldrsb	r3, [r2, r3]
20001a5e:	3b01      	subs	r3, #1
20001a60:	22f0      	movs	r2, #240	@ 0xf0
20001a62:	18ba      	adds	r2, r7, r2
20001a64:	6013      	str	r3, [r2, #0]
20001a66:	e03d      	b.n	20001ae4 <main+0x5d2>
                        for (int k = bricks[i].origin.y - 1; k <= bricks[i].origin.y + bricks[i].dimen.y + 1; k++) {
20001a68:	2358      	movs	r3, #88	@ 0x58
20001a6a:	18fa      	adds	r2, r7, r3
20001a6c:	23f4      	movs	r3, #244	@ 0xf4
20001a6e:	18fb      	adds	r3, r7, r3
20001a70:	681b      	ldr	r3, [r3, #0]
20001a72:	009b      	lsls	r3, r3, #2
20001a74:	18d3      	adds	r3, r2, r3
20001a76:	3301      	adds	r3, #1
20001a78:	781b      	ldrb	r3, [r3, #0]
20001a7a:	b25b      	sxtb	r3, r3
20001a7c:	3b01      	subs	r3, #1
20001a7e:	22ec      	movs	r2, #236	@ 0xec
20001a80:	18ba      	adds	r2, r7, r2
20001a82:	6013      	str	r3, [r2, #0]
20001a84:	e00e      	b.n	20001aa4 <main+0x592>
                            graphic_pixel_clear(j, k);
20001a86:	24ec      	movs	r4, #236	@ 0xec
20001a88:	193b      	adds	r3, r7, r4
20001a8a:	681a      	ldr	r2, [r3, #0]
20001a8c:	23f0      	movs	r3, #240	@ 0xf0
20001a8e:	18fb      	adds	r3, r7, r3
20001a90:	681b      	ldr	r3, [r3, #0]
20001a92:	0011      	movs	r1, r2
20001a94:	0018      	movs	r0, r3
20001a96:	f7fe fdb2 	bl	200005fe <graphic_pixel_clear>
                        for (int k = bricks[i].origin.y - 1; k <= bricks[i].origin.y + bricks[i].dimen.y + 1; k++) {
20001a9a:	193b      	adds	r3, r7, r4
20001a9c:	681b      	ldr	r3, [r3, #0]
20001a9e:	3301      	adds	r3, #1
20001aa0:	193a      	adds	r2, r7, r4
20001aa2:	6013      	str	r3, [r2, #0]
20001aa4:	2058      	movs	r0, #88	@ 0x58
20001aa6:	183a      	adds	r2, r7, r0
20001aa8:	24f4      	movs	r4, #244	@ 0xf4
20001aaa:	193b      	adds	r3, r7, r4
20001aac:	681b      	ldr	r3, [r3, #0]
20001aae:	009b      	lsls	r3, r3, #2
20001ab0:	18d3      	adds	r3, r2, r3
20001ab2:	3301      	adds	r3, #1
20001ab4:	781b      	ldrb	r3, [r3, #0]
20001ab6:	b25b      	sxtb	r3, r3
20001ab8:	0019      	movs	r1, r3
20001aba:	183a      	adds	r2, r7, r0
20001abc:	193b      	adds	r3, r7, r4
20001abe:	681b      	ldr	r3, [r3, #0]
20001ac0:	009b      	lsls	r3, r3, #2
20001ac2:	18d3      	adds	r3, r2, r3
20001ac4:	3303      	adds	r3, #3
20001ac6:	781b      	ldrb	r3, [r3, #0]
20001ac8:	b25b      	sxtb	r3, r3
20001aca:	18cb      	adds	r3, r1, r3
20001acc:	3301      	adds	r3, #1
20001ace:	22ec      	movs	r2, #236	@ 0xec
20001ad0:	18ba      	adds	r2, r7, r2
20001ad2:	6812      	ldr	r2, [r2, #0]
20001ad4:	429a      	cmp	r2, r3
20001ad6:	ddd6      	ble.n	20001a86 <main+0x574>
                    for (int j = bricks[i].origin.x - 1; j <= bricks[i].origin.x + bricks[i].dimen.x + 1; j++) {
20001ad8:	22f0      	movs	r2, #240	@ 0xf0
20001ada:	18bb      	adds	r3, r7, r2
20001adc:	681b      	ldr	r3, [r3, #0]
20001ade:	3301      	adds	r3, #1
20001ae0:	18ba      	adds	r2, r7, r2
20001ae2:	6013      	str	r3, [r2, #0]
20001ae4:	2058      	movs	r0, #88	@ 0x58
20001ae6:	183b      	adds	r3, r7, r0
20001ae8:	24f4      	movs	r4, #244	@ 0xf4
20001aea:	193a      	adds	r2, r7, r4
20001aec:	6812      	ldr	r2, [r2, #0]
20001aee:	0092      	lsls	r2, r2, #2
20001af0:	56d3      	ldrsb	r3, [r2, r3]
20001af2:	0019      	movs	r1, r3
20001af4:	183a      	adds	r2, r7, r0
20001af6:	193b      	adds	r3, r7, r4
20001af8:	681b      	ldr	r3, [r3, #0]
20001afa:	009b      	lsls	r3, r3, #2
20001afc:	18d3      	adds	r3, r2, r3
20001afe:	3302      	adds	r3, #2
20001b00:	781b      	ldrb	r3, [r3, #0]
20001b02:	b25b      	sxtb	r3, r3
20001b04:	18cb      	adds	r3, r1, r3
20001b06:	3301      	adds	r3, #1
20001b08:	22f0      	movs	r2, #240	@ 0xf0
20001b0a:	18ba      	adds	r2, r7, r2
20001b0c:	6812      	ldr	r2, [r2, #0]
20001b0e:	429a      	cmp	r2, r3
20001b10:	ddaa      	ble.n	20001a68 <main+0x556>
                        }
                    }
                    
                    brick_count--;
20001b12:	2186      	movs	r1, #134	@ 0x86
20001b14:	0049      	lsls	r1, r1, #1
20001b16:	187b      	adds	r3, r7, r1
20001b18:	681b      	ldr	r3, [r3, #0]
20001b1a:	3b01      	subs	r3, #1
20001b1c:	187a      	adds	r2, r7, r1
20001b1e:	6013      	str	r3, [r2, #0]
                    brick_hit = true;
20001b20:	23db      	movs	r3, #219	@ 0xdb
20001b22:	18fb      	adds	r3, r7, r3
20001b24:	2201      	movs	r2, #1
20001b26:	701a      	strb	r2, [r3, #0]
                    
                    // Check if all bricks are cleared
                    if (brick_count <= 0) {
20001b28:	187b      	adds	r3, r7, r1
20001b2a:	681b      	ldr	r3, [r3, #0]
20001b2c:	2b00      	cmp	r3, #0
20001b2e:	dd00      	ble.n	20001b32 <main+0x620>
20001b30:	e08f      	b.n	20001c52 <main+0x740>
                        // Level complete
                        level++;
20001b32:	2284      	movs	r2, #132	@ 0x84
20001b34:	0052      	lsls	r2, r2, #1
20001b36:	18bb      	adds	r3, r7, r2
20001b38:	681b      	ldr	r3, [r3, #0]
20001b3a:	3301      	adds	r3, #1
20001b3c:	18ba      	adds	r2, r7, r2
20001b3e:	6013      	str	r3, [r2, #0]
                        graphic_clear_screen();
20001b40:	f7fe fd57 	bl	200005f2 <graphic_clear_screen>
                        
                        // Display level complete message
                        ascii_command(0b00000001, delay_milli, 2);
20001b44:	4b37      	ldr	r3, [pc, #220]	@ (20001c24 <main+0x712>)
20001b46:	2202      	movs	r2, #2
20001b48:	0019      	movs	r1, r3
20001b4a:	2001      	movs	r0, #1
20001b4c:	f7fe fb46 	bl	200001dc <ascii_command>
                        char level_complete[] = "Level Complete!";
20001b50:	4b35      	ldr	r3, [pc, #212]	@ (20001c28 <main+0x716>)
20001b52:	228c      	movs	r2, #140	@ 0x8c
20001b54:	0052      	lsls	r2, r2, #1
20001b56:	189b      	adds	r3, r3, r2
20001b58:	19db      	adds	r3, r3, r7
20001b5a:	4a34      	ldr	r2, [pc, #208]	@ (20001c2c <main+0x71a>)
20001b5c:	ca13      	ldmia	r2!, {r0, r1, r4}
20001b5e:	c313      	stmia	r3!, {r0, r1, r4}
20001b60:	6812      	ldr	r2, [r2, #0]
20001b62:	601a      	str	r2, [r3, #0]
                        ascii_goto(1, 1);
20001b64:	2101      	movs	r1, #1
20001b66:	2001      	movs	r0, #1
20001b68:	f7fe fba0 	bl	200002ac <ascii_goto>
                        s = level_complete;
20001b6c:	2314      	movs	r3, #20
20001b6e:	18fb      	adds	r3, r7, r3
20001b70:	22fc      	movs	r2, #252	@ 0xfc
20001b72:	18ba      	adds	r2, r7, r2
20001b74:	6013      	str	r3, [r2, #0]
                        while (*s)
20001b76:	e009      	b.n	20001b8c <main+0x67a>
                            ascii_write_char(*s++);
20001b78:	21fc      	movs	r1, #252	@ 0xfc
20001b7a:	187b      	adds	r3, r7, r1
20001b7c:	681b      	ldr	r3, [r3, #0]
20001b7e:	1c5a      	adds	r2, r3, #1
20001b80:	1879      	adds	r1, r7, r1
20001b82:	600a      	str	r2, [r1, #0]
20001b84:	781b      	ldrb	r3, [r3, #0]
20001b86:	0018      	movs	r0, r3
20001b88:	f7fe fbab 	bl	200002e2 <ascii_write_char>
                        while (*s)
20001b8c:	25fc      	movs	r5, #252	@ 0xfc
20001b8e:	197b      	adds	r3, r7, r5
20001b90:	681b      	ldr	r3, [r3, #0]
20001b92:	781b      	ldrb	r3, [r3, #0]
20001b94:	2b00      	cmp	r3, #0
20001b96:	d1ef      	bne.n	20001b78 <main+0x666>
                            
                        char next_level[] = "Next Level...";
20001b98:	4b25      	ldr	r3, [pc, #148]	@ (20001c30 <main+0x71e>)
20001b9a:	228c      	movs	r2, #140	@ 0x8c
20001b9c:	0052      	lsls	r2, r2, #1
20001b9e:	189b      	adds	r3, r3, r2
20001ba0:	19db      	adds	r3, r3, r7
20001ba2:	4a24      	ldr	r2, [pc, #144]	@ (20001c34 <main+0x722>)
20001ba4:	ca13      	ldmia	r2!, {r0, r1, r4}
20001ba6:	c313      	stmia	r3!, {r0, r1, r4}
20001ba8:	8812      	ldrh	r2, [r2, #0]
20001baa:	801a      	strh	r2, [r3, #0]
                        ascii_goto(1, 2);
20001bac:	2102      	movs	r1, #2
20001bae:	2001      	movs	r0, #1
20001bb0:	f7fe fb7c 	bl	200002ac <ascii_goto>
                        s = next_level;
20001bb4:	1d3b      	adds	r3, r7, #4
20001bb6:	197a      	adds	r2, r7, r5
20001bb8:	6013      	str	r3, [r2, #0]
                        while (*s)
20001bba:	e009      	b.n	20001bd0 <main+0x6be>
                            ascii_write_char(*s++);
20001bbc:	21fc      	movs	r1, #252	@ 0xfc
20001bbe:	187b      	adds	r3, r7, r1
20001bc0:	681b      	ldr	r3, [r3, #0]
20001bc2:	1c5a      	adds	r2, r3, #1
20001bc4:	1879      	adds	r1, r7, r1
20001bc6:	600a      	str	r2, [r1, #0]
20001bc8:	781b      	ldrb	r3, [r3, #0]
20001bca:	0018      	movs	r0, r3
20001bcc:	f7fe fb89 	bl	200002e2 <ascii_write_char>
                        while (*s)
20001bd0:	23fc      	movs	r3, #252	@ 0xfc
20001bd2:	18fb      	adds	r3, r7, r3
20001bd4:	681b      	ldr	r3, [r3, #0]
20001bd6:	781b      	ldrb	r3, [r3, #0]
20001bd8:	2b00      	cmp	r3, #0
20001bda:	d1ef      	bne.n	20001bbc <main+0x6aa>
                            
                        delay_milli(2000);
20001bdc:	23fa      	movs	r3, #250	@ 0xfa
20001bde:	00db      	lsls	r3, r3, #3
20001be0:	0018      	movs	r0, r3
20001be2:	f7fe fcd6 	bl	20000592 <delay_milli>
                        
                        // Increase difficulty
                        game_speed = game_speed > 10 ? game_speed - 5 : 10;
20001be6:	1d7b      	adds	r3, r7, #5
20001be8:	33ff      	adds	r3, #255	@ 0xff
20001bea:	681b      	ldr	r3, [r3, #0]
20001bec:	2b0a      	cmp	r3, #10
20001bee:	dd04      	ble.n	20001bfa <main+0x6e8>
20001bf0:	1d7b      	adds	r3, r7, #5
20001bf2:	33ff      	adds	r3, #255	@ 0xff
20001bf4:	681b      	ldr	r3, [r3, #0]
20001bf6:	3b05      	subs	r3, #5
20001bf8:	e000      	b.n	20001bfc <main+0x6ea>
20001bfa:	230a      	movs	r3, #10
20001bfc:	1d7a      	adds	r2, r7, #5
20001bfe:	32ff      	adds	r2, #255	@ 0xff
20001c00:	6013      	str	r3, [r2, #0]
                        
                        // Reset bricks for next level
                        brick_count = init_bricks(bricks, brick_active);
20001c02:	2338      	movs	r3, #56	@ 0x38
20001c04:	18fa      	adds	r2, r7, r3
20001c06:	2358      	movs	r3, #88	@ 0x58
20001c08:	18fb      	adds	r3, r7, r3
20001c0a:	0011      	movs	r1, r2
20001c0c:	0018      	movs	r0, r3
20001c0e:	f7ff fbff 	bl	20001410 <init_bricks>
20001c12:	0003      	movs	r3, r0
20001c14:	2286      	movs	r2, #134	@ 0x86
20001c16:	0052      	lsls	r2, r2, #1
20001c18:	18ba      	adds	r2, r7, r2
20001c1a:	6013      	str	r3, [r2, #0]
20001c1c:	e4c8      	b.n	200015b0 <main+0x9e>
20001c1e:	46c0      	nop			@ (mov r8, r8)
20001c20:	20002c74 	.word	0x20002c74
20001c24:	20000593 	.word	0x20000593
20001c28:	fffffefc 	.word	0xfffffefc
20001c2c:	20002dec 	.word	0x20002dec
20001c30:	fffffeec 	.word	0xfffffeec
20001c34:	20002dfc 	.word	0x20002dfc
        for (int i = 0; i < BRICK_ROWS * BRICK_COLS; i++) {
20001c38:	22f4      	movs	r2, #244	@ 0xf4
20001c3a:	18bb      	adds	r3, r7, r2
20001c3c:	681b      	ldr	r3, [r3, #0]
20001c3e:	3301      	adds	r3, #1
20001c40:	18ba      	adds	r2, r7, r2
20001c42:	6013      	str	r3, [r2, #0]
20001c44:	23f4      	movs	r3, #244	@ 0xf4
20001c46:	18fb      	adds	r3, r7, r3
20001c48:	681b      	ldr	r3, [r3, #0]
20001c4a:	2b1f      	cmp	r3, #31
20001c4c:	dc00      	bgt.n	20001c50 <main+0x73e>
20001c4e:	e60d      	b.n	2000186c <main+0x35a>
20001c50:	e000      	b.n	20001c54 <main+0x742>
                        goto new_life;
                    }
                    
                    // Only handle one brick collision per frame
                    break;
20001c52:	46c0      	nop			@ (mov r8, r8)
                }
            }
        }

        // Checks for ball collision with walls with repositioning fixes
        WallCollision wc = check_wall_collision(&ball);
20001c54:	4b3c      	ldr	r3, [pc, #240]	@ (20001d48 <main+0x836>)
20001c56:	0018      	movs	r0, r3
20001c58:	f7ff f95f 	bl	20000f1a <check_wall_collision>
20001c5c:	1c03      	adds	r3, r0, #0
20001c5e:	1c1a      	adds	r2, r3, #0
20001c60:	2124      	movs	r1, #36	@ 0x24
20001c62:	187b      	adds	r3, r7, r1
20001c64:	801a      	strh	r2, [r3, #0]
        if (wc.is_colliding)
20001c66:	000a      	movs	r2, r1
20001c68:	18bb      	adds	r3, r7, r2
20001c6a:	781b      	ldrb	r3, [r3, #0]
20001c6c:	2b00      	cmp	r3, #0
20001c6e:	d04f      	beq.n	20001d10 <main+0x7fe>
        {
            switch (wc.which)
20001c70:	18bb      	adds	r3, r7, r2
20001c72:	785b      	ldrb	r3, [r3, #1]
20001c74:	b25b      	sxtb	r3, r3
20001c76:	2b75      	cmp	r3, #117	@ 0x75
20001c78:	d008      	beq.n	20001c8c <main+0x77a>
20001c7a:	dc48      	bgt.n	20001d0e <main+0x7fc>
20001c7c:	2b72      	cmp	r3, #114	@ 0x72
20001c7e:	d017      	beq.n	20001cb0 <main+0x79e>
20001c80:	dc45      	bgt.n	20001d0e <main+0x7fc>
20001c82:	2b64      	cmp	r3, #100	@ 0x64
20001c84:	d021      	beq.n	20001cca <main+0x7b8>
20001c86:	2b6c      	cmp	r3, #108	@ 0x6c
20001c88:	d009      	beq.n	20001c9e <main+0x78c>
                    
                    // Small pause before continuing
                    delay_milli(1000);
                    goto new_life;
                default:
                    break;
20001c8a:	e040      	b.n	20001d0e <main+0x7fc>
                    ball.pos_y = 1;
20001c8c:	4b2e      	ldr	r3, [pc, #184]	@ (20001d48 <main+0x836>)
20001c8e:	2201      	movs	r2, #1
20001c90:	611a      	str	r2, [r3, #16]
                    ball.dir_y *= -1;
20001c92:	4b2d      	ldr	r3, [pc, #180]	@ (20001d48 <main+0x836>)
20001c94:	689b      	ldr	r3, [r3, #8]
20001c96:	425a      	negs	r2, r3
20001c98:	4b2b      	ldr	r3, [pc, #172]	@ (20001d48 <main+0x836>)
20001c9a:	609a      	str	r2, [r3, #8]
                    break;
20001c9c:	e038      	b.n	20001d10 <main+0x7fe>
                    ball.pos_x = 1;
20001c9e:	4b2a      	ldr	r3, [pc, #168]	@ (20001d48 <main+0x836>)
20001ca0:	2201      	movs	r2, #1
20001ca2:	60da      	str	r2, [r3, #12]
                    ball.dir_x *= -1;
20001ca4:	4b28      	ldr	r3, [pc, #160]	@ (20001d48 <main+0x836>)
20001ca6:	685b      	ldr	r3, [r3, #4]
20001ca8:	425a      	negs	r2, r3
20001caa:	4b27      	ldr	r3, [pc, #156]	@ (20001d48 <main+0x836>)
20001cac:	605a      	str	r2, [r3, #4]
                    break;
20001cae:	e02f      	b.n	20001d10 <main+0x7fe>
                    ball.pos_x = SCREEN_WIDTH - ball.geo->size_x - 1;
20001cb0:	4b25      	ldr	r3, [pc, #148]	@ (20001d48 <main+0x836>)
20001cb2:	681b      	ldr	r3, [r3, #0]
20001cb4:	685b      	ldr	r3, [r3, #4]
20001cb6:	227f      	movs	r2, #127	@ 0x7f
20001cb8:	1ad2      	subs	r2, r2, r3
20001cba:	4b23      	ldr	r3, [pc, #140]	@ (20001d48 <main+0x836>)
20001cbc:	60da      	str	r2, [r3, #12]
                    ball.dir_x *= -1;
20001cbe:	4b22      	ldr	r3, [pc, #136]	@ (20001d48 <main+0x836>)
20001cc0:	685b      	ldr	r3, [r3, #4]
20001cc2:	425a      	negs	r2, r3
20001cc4:	4b20      	ldr	r3, [pc, #128]	@ (20001d48 <main+0x836>)
20001cc6:	605a      	str	r2, [r3, #4]
                    break;
20001cc8:	e022      	b.n	20001d10 <main+0x7fe>
                    lives--;
20001cca:	2488      	movs	r4, #136	@ 0x88
20001ccc:	0064      	lsls	r4, r4, #1
20001cce:	193b      	adds	r3, r7, r4
20001cd0:	681b      	ldr	r3, [r3, #0]
20001cd2:	3b01      	subs	r3, #1
20001cd4:	193a      	adds	r2, r7, r4
20001cd6:	6013      	str	r3, [r2, #0]
                    display_game_info(score, lives);
20001cd8:	193b      	adds	r3, r7, r4
20001cda:	681a      	ldr	r2, [r3, #0]
20001cdc:	258a      	movs	r5, #138	@ 0x8a
20001cde:	006d      	lsls	r5, r5, #1
20001ce0:	197b      	adds	r3, r7, r5
20001ce2:	681b      	ldr	r3, [r3, #0]
20001ce4:	0011      	movs	r1, r2
20001ce6:	0018      	movs	r0, r3
20001ce8:	f7ff fb20 	bl	2000132c <display_game_info>
                    if (lives <= 0) {
20001cec:	193b      	adds	r3, r7, r4
20001cee:	681b      	ldr	r3, [r3, #0]
20001cf0:	2b00      	cmp	r3, #0
20001cf2:	dc06      	bgt.n	20001d02 <main+0x7f0>
                        game_over(score, false);
20001cf4:	197b      	adds	r3, r7, r5
20001cf6:	681b      	ldr	r3, [r3, #0]
20001cf8:	2100      	movs	r1, #0
20001cfa:	0018      	movs	r0, r3
20001cfc:	f7ff fa49 	bl	20001192 <game_over>
                        goto init_game;
20001d00:	e430      	b.n	20001564 <main+0x52>
                    delay_milli(1000);
20001d02:	23fa      	movs	r3, #250	@ 0xfa
20001d04:	009b      	lsls	r3, r3, #2
20001d06:	0018      	movs	r0, r3
20001d08:	f7fe fc43 	bl	20000592 <delay_milli>
                    goto new_life;
20001d0c:	e450      	b.n	200015b0 <main+0x9e>
                    break;
20001d0e:	46c0      	nop			@ (mov r8, r8)
            }
        }
        
        // If player has reached level 3 and cleared all bricks, they win!
        if (level >= 3 && brick_count <= 0) {
20001d10:	2384      	movs	r3, #132	@ 0x84
20001d12:	005b      	lsls	r3, r3, #1
20001d14:	18fb      	adds	r3, r7, r3
20001d16:	681b      	ldr	r3, [r3, #0]
20001d18:	2b02      	cmp	r3, #2
20001d1a:	dd0e      	ble.n	20001d3a <main+0x828>
20001d1c:	2386      	movs	r3, #134	@ 0x86
20001d1e:	005b      	lsls	r3, r3, #1
20001d20:	18fb      	adds	r3, r7, r3
20001d22:	681b      	ldr	r3, [r3, #0]
20001d24:	2b00      	cmp	r3, #0
20001d26:	dc08      	bgt.n	20001d3a <main+0x828>
            game_over(score, true);
20001d28:	238a      	movs	r3, #138	@ 0x8a
20001d2a:	005b      	lsls	r3, r3, #1
20001d2c:	18fb      	adds	r3, r7, r3
20001d2e:	681b      	ldr	r3, [r3, #0]
20001d30:	2101      	movs	r1, #1
20001d32:	0018      	movs	r0, r3
20001d34:	f7ff fa2d 	bl	20001192 <game_over>
            goto init_game;
20001d38:	e414      	b.n	20001564 <main+0x52>
        }
        
        // Add a small delay to control game speed
        delay_milli(game_speed);
20001d3a:	1d7b      	adds	r3, r7, #5
20001d3c:	33ff      	adds	r3, #255	@ 0xff
20001d3e:	681b      	ldr	r3, [r3, #0]
20001d40:	0018      	movs	r0, r3
20001d42:	f7fe fc26 	bl	20000592 <delay_milli>
    {
20001d46:	e49d      	b.n	20001684 <main+0x172>
20001d48:	20002c74 	.word	0x20002c74

20001d4c <_sbrk>:
20001d4c:	4a0b      	ldr	r2, [pc, #44]	@ (20001d7c <_sbrk+0x30>)
20001d4e:	b508      	push	{r3, lr}
20001d50:	4603      	mov	r3, r0
20001d52:	6810      	ldr	r0, [r2, #0]
20001d54:	b128      	cbz	r0, 20001d62 <_sbrk+0x16>
20001d56:	490a      	ldr	r1, [pc, #40]	@ (20001d80 <_sbrk+0x34>)
20001d58:	4403      	add	r3, r0
20001d5a:	428b      	cmp	r3, r1
20001d5c:	d807      	bhi.n	20001d6e <_sbrk+0x22>
20001d5e:	6013      	str	r3, [r2, #0]
20001d60:	bd08      	pop	{r3, pc}
20001d62:	4808      	ldr	r0, [pc, #32]	@ (20001d84 <_sbrk+0x38>)
20001d64:	4906      	ldr	r1, [pc, #24]	@ (20001d80 <_sbrk+0x34>)
20001d66:	6010      	str	r0, [r2, #0]
20001d68:	4403      	add	r3, r0
20001d6a:	428b      	cmp	r3, r1
20001d6c:	d9f7      	bls.n	20001d5e <_sbrk+0x12>
20001d6e:	f000 fcf7 	bl	20002760 <__errno>
20001d72:	230c      	movs	r3, #12
20001d74:	6003      	str	r3, [r0, #0]
20001d76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20001d7a:	bd08      	pop	{r3, pc}
20001d7c:	20002e1c 	.word	0x20002e1c
20001d80:	20003400 	.word	0x20003400
20001d84:	20003000 	.word	0x20003000

20001d88 <_crt_init>:
20001d88:	4b13      	ldr	r3, [pc, #76]	@ (20001dd8 <_crt_init+0x50>)
20001d8a:	4a14      	ldr	r2, [pc, #80]	@ (20001ddc <_crt_init+0x54>)
20001d8c:	b510      	push	{r4, lr}
20001d8e:	4c14      	ldr	r4, [pc, #80]	@ (20001de0 <_crt_init+0x58>)
20001d90:	2100      	movs	r1, #0
20001d92:	4293      	cmp	r3, r2
20001d94:	6021      	str	r1, [r4, #0]
20001d96:	4604      	mov	r4, r0
20001d98:	d203      	bcs.n	20001da2 <_crt_init+0x1a>
20001d9a:	1ad2      	subs	r2, r2, r3
20001d9c:	4618      	mov	r0, r3
20001d9e:	f000 fcc6 	bl	2000272e <memset>
20001da2:	4620      	mov	r0, r4
20001da4:	4c0f      	ldr	r4, [pc, #60]	@ (20001de4 <_crt_init+0x5c>)
20001da6:	f000 f889 	bl	20001ebc <runtime_usart_init>
20001daa:	6821      	ldr	r1, [r4, #0]
20001dac:	2300      	movs	r3, #0
20001dae:	6848      	ldr	r0, [r1, #4]
20001db0:	2202      	movs	r2, #2
20001db2:	4619      	mov	r1, r3
20001db4:	f000 fa60 	bl	20002278 <setvbuf>
20001db8:	6820      	ldr	r0, [r4, #0]
20001dba:	2300      	movs	r3, #0
20001dbc:	4619      	mov	r1, r3
20001dbe:	2202      	movs	r2, #2
20001dc0:	6880      	ldr	r0, [r0, #8]
20001dc2:	f000 fa59 	bl	20002278 <setvbuf>
20001dc6:	6820      	ldr	r0, [r4, #0]
20001dc8:	2300      	movs	r3, #0
20001dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20001dce:	68c0      	ldr	r0, [r0, #12]
20001dd0:	2202      	movs	r2, #2
20001dd2:	4619      	mov	r1, r3
20001dd4:	f000 ba50 	b.w	20002278 <setvbuf>
20001dd8:	20002e0c 	.word	0x20002e0c
20001ddc:	20002f70 	.word	0x20002f70
20001de0:	20002e1c 	.word	0x20002e1c
20001de4:	20002cc8 	.word	0x20002cc8

20001de8 <_crt_deinit>:
20001de8:	f000 b872 	b.w	20001ed0 <runtime_usart_deinit>

20001dec <_write>:
20001dec:	1e43      	subs	r3, r0, #1
20001dee:	2b01      	cmp	r3, #1
20001df0:	4608      	mov	r0, r1
20001df2:	d901      	bls.n	20001df8 <_write+0xc>
20001df4:	2000      	movs	r0, #0
20001df6:	4770      	bx	lr
20001df8:	4611      	mov	r1, r2
20001dfa:	f000 b899 	b.w	20001f30 <runtime_usart_write>
20001dfe:	bf00      	nop

20001e00 <_read>:
20001e00:	460b      	mov	r3, r1
20001e02:	b108      	cbz	r0, 20001e08 <_read+0x8>
20001e04:	2000      	movs	r0, #0
20001e06:	4770      	bx	lr
20001e08:	4611      	mov	r1, r2
20001e0a:	4618      	mov	r0, r3
20001e0c:	f000 b86e 	b.w	20001eec <runtime_usart_read>

20001e10 <_close>:
20001e10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20001e14:	4770      	bx	lr
20001e16:	bf00      	nop

20001e18 <_open>:
20001e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20001e1c:	4770      	bx	lr
20001e1e:	bf00      	nop

20001e20 <_fstat>:
20001e20:	2000      	movs	r0, #0
20001e22:	4770      	bx	lr

20001e24 <_lseek>:
20001e24:	2000      	movs	r0, #0
20001e26:	4770      	bx	lr

20001e28 <_isatty>:
20001e28:	3801      	subs	r0, #1
20001e2a:	2801      	cmp	r0, #1
20001e2c:	d901      	bls.n	20001e32 <_isatty+0xa>
20001e2e:	2000      	movs	r0, #0
20001e30:	4770      	bx	lr
20001e32:	f000 b895 	b.w	20001f60 <runtime_usart_isatty>
20001e36:	bf00      	nop

20001e38 <md407_runtime_uartinit>:
20001e38:	4b18      	ldr	r3, [pc, #96]	@ (20001e9c <md407_runtime_uartinit+0x64>)
20001e3a:	4a19      	ldr	r2, [pc, #100]	@ (20001ea0 <md407_runtime_uartinit+0x68>)
20001e3c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
20001e3e:	4819      	ldr	r0, [pc, #100]	@ (20001ea4 <md407_runtime_uartinit+0x6c>)
20001e40:	f041 0110 	orr.w	r1, r1, #16
20001e44:	b410      	push	{r4}
20001e46:	6459      	str	r1, [r3, #68]	@ 0x44
20001e48:	6b19      	ldr	r1, [r3, #48]	@ 0x30
20001e4a:	f041 0101 	orr.w	r1, r1, #1
20001e4e:	6319      	str	r1, [r3, #48]	@ 0x30
20001e50:	6a59      	ldr	r1, [r3, #36]	@ 0x24
20001e52:	f041 0110 	orr.w	r1, r1, #16
20001e56:	6259      	str	r1, [r3, #36]	@ 0x24
20001e58:	6a59      	ldr	r1, [r3, #36]	@ 0x24
20001e5a:	f021 0110 	bic.w	r1, r1, #16
20001e5e:	6259      	str	r1, [r3, #36]	@ 0x24
20001e60:	6919      	ldr	r1, [r3, #16]
20001e62:	f041 0101 	orr.w	r1, r1, #1
20001e66:	6119      	str	r1, [r3, #16]
20001e68:	6919      	ldr	r1, [r3, #16]
20001e6a:	f021 0101 	bic.w	r1, r1, #1
20001e6e:	6119      	str	r1, [r3, #16]
20001e70:	6a53      	ldr	r3, [r2, #36]	@ 0x24
20001e72:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
20001e76:	6253      	str	r3, [r2, #36]	@ 0x24
20001e78:	6813      	ldr	r3, [r2, #0]
20001e7a:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
20001e7e:	6013      	str	r3, [r2, #0]
20001e80:	68d3      	ldr	r3, [r2, #12]
20001e82:	f240 24d9 	movw	r4, #729	@ 0x2d9
20001e86:	f242 010c 	movw	r1, #8204	@ 0x200c
20001e8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
20001e8e:	60d3      	str	r3, [r2, #12]
20001e90:	6084      	str	r4, [r0, #8]
20001e92:	f85d 4b04 	ldr.w	r4, [sp], #4
20001e96:	60c1      	str	r1, [r0, #12]
20001e98:	4770      	bx	lr
20001e9a:	bf00      	nop
20001e9c:	40023800 	.word	0x40023800
20001ea0:	40020000 	.word	0x40020000
20001ea4:	40011000 	.word	0x40011000

20001ea8 <runtime_tstchar>:
20001ea8:	4b03      	ldr	r3, [pc, #12]	@ (20001eb8 <runtime_tstchar+0x10>)
20001eaa:	6818      	ldr	r0, [r3, #0]
20001eac:	f010 0020 	ands.w	r0, r0, #32
20001eb0:	bf1c      	itt	ne
20001eb2:	6858      	ldrne	r0, [r3, #4]
20001eb4:	b2c0      	uxtbne	r0, r0
20001eb6:	4770      	bx	lr
20001eb8:	40011000 	.word	0x40011000

20001ebc <runtime_usart_init>:
20001ebc:	4b03      	ldr	r3, [pc, #12]	@ (20001ecc <runtime_usart_init+0x10>)
20001ebe:	2000      	movs	r0, #0
20001ec0:	f240 22d9 	movw	r2, #729	@ 0x2d9
20001ec4:	609a      	str	r2, [r3, #8]
20001ec6:	6158      	str	r0, [r3, #20]
20001ec8:	6118      	str	r0, [r3, #16]
20001eca:	4770      	bx	lr
20001ecc:	40011000 	.word	0x40011000

20001ed0 <runtime_usart_deinit>:
20001ed0:	b508      	push	{r3, lr}
20001ed2:	4b04      	ldr	r3, [pc, #16]	@ (20001ee4 <runtime_usart_deinit+0x14>)
20001ed4:	681b      	ldr	r3, [r3, #0]
20001ed6:	6898      	ldr	r0, [r3, #8]
20001ed8:	f000 f9ba 	bl	20002250 <fflush>
20001edc:	4b02      	ldr	r3, [pc, #8]	@ (20001ee8 <runtime_usart_deinit+0x18>)
20001ede:	2200      	movs	r2, #0
20001ee0:	60da      	str	r2, [r3, #12]
20001ee2:	bd08      	pop	{r3, pc}
20001ee4:	20002cc8 	.word	0x20002cc8
20001ee8:	40011000 	.word	0x40011000

20001eec <runtime_usart_read>:
20001eec:	4a09      	ldr	r2, [pc, #36]	@ (20001f14 <runtime_usart_read+0x28>)
20001eee:	b500      	push	{lr}
20001ef0:	4686      	mov	lr, r0
20001ef2:	2000      	movs	r0, #0
20001ef4:	6813      	ldr	r3, [r2, #0]
20001ef6:	069b      	lsls	r3, r3, #26
20001ef8:	d508      	bpl.n	20001f0c <runtime_usart_read+0x20>
20001efa:	6853      	ldr	r3, [r2, #4]
20001efc:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
20001f00:	46f4      	mov	ip, lr
20001f02:	d003      	beq.n	20001f0c <runtime_usart_read+0x20>
20001f04:	f80c 3b01 	strb.w	r3, [ip], #1
20001f08:	3001      	adds	r0, #1
20001f0a:	46e6      	mov	lr, ip
20001f0c:	4288      	cmp	r0, r1
20001f0e:	d1f1      	bne.n	20001ef4 <runtime_usart_read+0x8>
20001f10:	f85d fb04 	ldr.w	pc, [sp], #4
20001f14:	40011000 	.word	0x40011000

20001f18 <runtime_outchar>:
20001f18:	4a04      	ldr	r2, [pc, #16]	@ (20001f2c <runtime_outchar+0x14>)
20001f1a:	6813      	ldr	r3, [r2, #0]
20001f1c:	061b      	lsls	r3, r3, #24
20001f1e:	d5fc      	bpl.n	20001f1a <runtime_outchar+0x2>
20001f20:	280a      	cmp	r0, #10
20001f22:	6050      	str	r0, [r2, #4]
20001f24:	d101      	bne.n	20001f2a <runtime_outchar+0x12>
20001f26:	200d      	movs	r0, #13
20001f28:	e7f7      	b.n	20001f1a <runtime_outchar+0x2>
20001f2a:	4770      	bx	lr
20001f2c:	40011000 	.word	0x40011000

20001f30 <runtime_usart_write>:
20001f30:	4684      	mov	ip, r0
20001f32:	4608      	mov	r0, r1
20001f34:	b189      	cbz	r1, 20001f5a <runtime_usart_write+0x2a>
20001f36:	4a09      	ldr	r2, [pc, #36]	@ (20001f5c <runtime_usart_write+0x2c>)
20001f38:	b500      	push	{lr}
20001f3a:	eb0c 0e01 	add.w	lr, ip, r1
20001f3e:	f81c 1b01 	ldrb.w	r1, [ip], #1
20001f42:	6813      	ldr	r3, [r2, #0]
20001f44:	061b      	lsls	r3, r3, #24
20001f46:	d5fc      	bpl.n	20001f42 <runtime_usart_write+0x12>
20001f48:	290a      	cmp	r1, #10
20001f4a:	6051      	str	r1, [r2, #4]
20001f4c:	d101      	bne.n	20001f52 <runtime_usart_write+0x22>
20001f4e:	210d      	movs	r1, #13
20001f50:	e7f7      	b.n	20001f42 <runtime_usart_write+0x12>
20001f52:	45e6      	cmp	lr, ip
20001f54:	d1f3      	bne.n	20001f3e <runtime_usart_write+0xe>
20001f56:	f85d fb04 	ldr.w	pc, [sp], #4
20001f5a:	4770      	bx	lr
20001f5c:	40011000 	.word	0x40011000

20001f60 <runtime_usart_isatty>:
20001f60:	2001      	movs	r0, #1
20001f62:	4770      	bx	lr

20001f64 <md407_runtime_portinit>:
20001f64:	4b16      	ldr	r3, [pc, #88]	@ (20001fc0 <md407_runtime_portinit+0x5c>)
20001f66:	4817      	ldr	r0, [pc, #92]	@ (20001fc4 <md407_runtime_portinit+0x60>)
20001f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
20001f6a:	4917      	ldr	r1, [pc, #92]	@ (20001fc8 <md407_runtime_portinit+0x64>)
20001f6c:	f042 0218 	orr.w	r2, r2, #24
20001f70:	b410      	push	{r4}
20001f72:	631a      	str	r2, [r3, #48]	@ 0x30
20001f74:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
20001f76:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
20001f7a:	645c      	str	r4, [r3, #68]	@ 0x44
20001f7c:	691c      	ldr	r4, [r3, #16]
20001f7e:	f044 0418 	orr.w	r4, r4, #24
20001f82:	611c      	str	r4, [r3, #16]
20001f84:	691c      	ldr	r4, [r3, #16]
20001f86:	f024 0418 	bic.w	r4, r4, #24
20001f8a:	611c      	str	r4, [r3, #16]
20001f8c:	695c      	ldr	r4, [r3, #20]
20001f8e:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
20001f92:	615c      	str	r4, [r3, #20]
20001f94:	695c      	ldr	r4, [r3, #20]
20001f96:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
20001f9a:	615c      	str	r4, [r3, #20]
20001f9c:	2200      	movs	r2, #0
20001f9e:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
20001fa2:	6002      	str	r2, [r0, #0]
20001fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
20001fa8:	60c3      	str	r3, [r0, #12]
20001faa:	6042      	str	r2, [r0, #4]
20001fac:	6082      	str	r2, [r0, #8]
20001fae:	6102      	str	r2, [r0, #16]
20001fb0:	6142      	str	r2, [r0, #20]
20001fb2:	600a      	str	r2, [r1, #0]
20001fb4:	60cb      	str	r3, [r1, #12]
20001fb6:	604a      	str	r2, [r1, #4]
20001fb8:	608a      	str	r2, [r1, #8]
20001fba:	610a      	str	r2, [r1, #16]
20001fbc:	614a      	str	r2, [r1, #20]
20001fbe:	4770      	bx	lr
20001fc0:	40023800 	.word	0x40023800
20001fc4:	40021000 	.word	0x40021000
20001fc8:	40020c00 	.word	0x40020c00

20001fcc <md407_runtime_clockinit>:
20001fcc:	4a33      	ldr	r2, [pc, #204]	@ (2000209c <md407_runtime_clockinit+0xd0>)
20001fce:	4834      	ldr	r0, [pc, #208]	@ (200020a0 <md407_runtime_clockinit+0xd4>)
20001fd0:	6813      	ldr	r3, [r2, #0]
20001fd2:	2100      	movs	r1, #0
20001fd4:	f043 0301 	orr.w	r3, r3, #1
20001fd8:	b082      	sub	sp, #8
20001fda:	6013      	str	r3, [r2, #0]
20001fdc:	6091      	str	r1, [r2, #8]
20001fde:	6813      	ldr	r3, [r2, #0]
20001fe0:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
20001fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20001fe8:	6013      	str	r3, [r2, #0]
20001fea:	6050      	str	r0, [r2, #4]
20001fec:	6813      	ldr	r3, [r2, #0]
20001fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
20001ff2:	6013      	str	r3, [r2, #0]
20001ff4:	60d1      	str	r1, [r2, #12]
20001ff6:	9100      	str	r1, [sp, #0]
20001ff8:	9101      	str	r1, [sp, #4]
20001ffa:	6813      	ldr	r3, [r2, #0]
20001ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20002000:	6013      	str	r3, [r2, #0]
20002002:	e003      	b.n	2000200c <md407_runtime_clockinit+0x40>
20002004:	9b00      	ldr	r3, [sp, #0]
20002006:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
2000200a:	d009      	beq.n	20002020 <md407_runtime_clockinit+0x54>
2000200c:	6813      	ldr	r3, [r2, #0]
2000200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20002012:	9301      	str	r3, [sp, #4]
20002014:	9b00      	ldr	r3, [sp, #0]
20002016:	3301      	adds	r3, #1
20002018:	9300      	str	r3, [sp, #0]
2000201a:	9b01      	ldr	r3, [sp, #4]
2000201c:	2b00      	cmp	r3, #0
2000201e:	d0f1      	beq.n	20002004 <md407_runtime_clockinit+0x38>
20002020:	4b1e      	ldr	r3, [pc, #120]	@ (2000209c <md407_runtime_clockinit+0xd0>)
20002022:	681b      	ldr	r3, [r3, #0]
20002024:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
20002028:	bf18      	it	ne
2000202a:	2301      	movne	r3, #1
2000202c:	9301      	str	r3, [sp, #4]
2000202e:	9b01      	ldr	r3, [sp, #4]
20002030:	2b01      	cmp	r3, #1
20002032:	d001      	beq.n	20002038 <md407_runtime_clockinit+0x6c>
20002034:	b002      	add	sp, #8
20002036:	4770      	bx	lr
20002038:	4b18      	ldr	r3, [pc, #96]	@ (2000209c <md407_runtime_clockinit+0xd0>)
2000203a:	491a      	ldr	r1, [pc, #104]	@ (200020a4 <md407_runtime_clockinit+0xd8>)
2000203c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
2000203e:	481a      	ldr	r0, [pc, #104]	@ (200020a8 <md407_runtime_clockinit+0xdc>)
20002040:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
20002044:	641a      	str	r2, [r3, #64]	@ 0x40
20002046:	680a      	ldr	r2, [r1, #0]
20002048:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
2000204c:	600a      	str	r2, [r1, #0]
2000204e:	689a      	ldr	r2, [r3, #8]
20002050:	609a      	str	r2, [r3, #8]
20002052:	689a      	ldr	r2, [r3, #8]
20002054:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
20002058:	609a      	str	r2, [r3, #8]
2000205a:	689a      	ldr	r2, [r3, #8]
2000205c:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
20002060:	609a      	str	r2, [r3, #8]
20002062:	6058      	str	r0, [r3, #4]
20002064:	681a      	ldr	r2, [r3, #0]
20002066:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
2000206a:	601a      	str	r2, [r3, #0]
2000206c:	681a      	ldr	r2, [r3, #0]
2000206e:	0192      	lsls	r2, r2, #6
20002070:	d5fc      	bpl.n	2000206c <md407_runtime_clockinit+0xa0>
20002072:	4a0e      	ldr	r2, [pc, #56]	@ (200020ac <md407_runtime_clockinit+0xe0>)
20002074:	f240 6105 	movw	r1, #1541	@ 0x605
20002078:	6011      	str	r1, [r2, #0]
2000207a:	6899      	ldr	r1, [r3, #8]
2000207c:	f021 0103 	bic.w	r1, r1, #3
20002080:	6099      	str	r1, [r3, #8]
20002082:	6899      	ldr	r1, [r3, #8]
20002084:	f041 0102 	orr.w	r1, r1, #2
20002088:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
2000208c:	6099      	str	r1, [r3, #8]
2000208e:	6893      	ldr	r3, [r2, #8]
20002090:	f003 030c 	and.w	r3, r3, #12
20002094:	2b08      	cmp	r3, #8
20002096:	d1fa      	bne.n	2000208e <md407_runtime_clockinit+0xc2>
20002098:	b002      	add	sp, #8
2000209a:	4770      	bx	lr
2000209c:	40023800 	.word	0x40023800
200020a0:	24003010 	.word	0x24003010
200020a4:	40007000 	.word	0x40007000
200020a8:	08405408 	.word	0x08405408
200020ac:	40023c00 	.word	0x40023c00

200020b0 <__udivsi3>:
200020b0:	2900      	cmp	r1, #0
200020b2:	d002      	beq.n	200020ba <__udivsi3+0xa>
200020b4:	fbb0 f0f1 	udiv	r0, r0, r1
200020b8:	4770      	bx	lr
200020ba:	b108      	cbz	r0, 200020c0 <__udivsi3+0x10>
200020bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
200020c0:	f000 b81e 	b.w	20002100 <__aeabi_idiv0>

200020c4 <__aeabi_uidivmod>:
200020c4:	2900      	cmp	r1, #0
200020c6:	d0f8      	beq.n	200020ba <__udivsi3+0xa>
200020c8:	4602      	mov	r2, r0
200020ca:	fbb0 f0f1 	udiv	r0, r0, r1
200020ce:	fb00 2111 	mls	r1, r0, r1, r2
200020d2:	4770      	bx	lr

200020d4 <__divsi3>:
200020d4:	2900      	cmp	r1, #0
200020d6:	d002      	beq.n	200020de <__divsi3+0xa>
200020d8:	fb90 f0f1 	sdiv	r0, r0, r1
200020dc:	4770      	bx	lr
200020de:	2800      	cmp	r0, #0
200020e0:	bfc8      	it	gt
200020e2:	f06f 4000 	mvngt.w	r0, #2147483648	@ 0x80000000
200020e6:	bfb8      	it	lt
200020e8:	f04f 4000 	movlt.w	r0, #2147483648	@ 0x80000000
200020ec:	f000 b808 	b.w	20002100 <__aeabi_idiv0>

200020f0 <__aeabi_idivmod>:
200020f0:	2900      	cmp	r1, #0
200020f2:	d0f4      	beq.n	200020de <__divsi3+0xa>
200020f4:	4602      	mov	r2, r0
200020f6:	fb90 f0f1 	sdiv	r0, r0, r1
200020fa:	fb00 2111 	mls	r1, r0, r1, r2
200020fe:	4770      	bx	lr

20002100 <__aeabi_idiv0>:
20002100:	4770      	bx	lr
20002102:	bf00      	nop

20002104 <__sflush_r>:
20002104:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
20002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000210a:	0716      	lsls	r6, r2, #28
2000210c:	4605      	mov	r5, r0
2000210e:	460c      	mov	r4, r1
20002110:	d451      	bmi.n	200021b6 <__sflush_r+0xb2>
20002112:	684b      	ldr	r3, [r1, #4]
20002114:	2b00      	cmp	r3, #0
20002116:	dc02      	bgt.n	2000211e <__sflush_r+0x1a>
20002118:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
2000211a:	2b00      	cmp	r3, #0
2000211c:	dd49      	ble.n	200021b2 <__sflush_r+0xae>
2000211e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
20002120:	2e00      	cmp	r6, #0
20002122:	d046      	beq.n	200021b2 <__sflush_r+0xae>
20002124:	2300      	movs	r3, #0
20002126:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
2000212a:	682f      	ldr	r7, [r5, #0]
2000212c:	602b      	str	r3, [r5, #0]
2000212e:	d031      	beq.n	20002194 <__sflush_r+0x90>
20002130:	6d62      	ldr	r2, [r4, #84]	@ 0x54
20002132:	89a3      	ldrh	r3, [r4, #12]
20002134:	0759      	lsls	r1, r3, #29
20002136:	d505      	bpl.n	20002144 <__sflush_r+0x40>
20002138:	6863      	ldr	r3, [r4, #4]
2000213a:	1ad2      	subs	r2, r2, r3
2000213c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
2000213e:	b10b      	cbz	r3, 20002144 <__sflush_r+0x40>
20002140:	6c23      	ldr	r3, [r4, #64]	@ 0x40
20002142:	1ad2      	subs	r2, r2, r3
20002144:	2300      	movs	r3, #0
20002146:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
20002148:	6a21      	ldr	r1, [r4, #32]
2000214a:	4628      	mov	r0, r5
2000214c:	47b0      	blx	r6
2000214e:	1c42      	adds	r2, r0, #1
20002150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
20002154:	d106      	bne.n	20002164 <__sflush_r+0x60>
20002156:	6829      	ldr	r1, [r5, #0]
20002158:	291d      	cmp	r1, #29
2000215a:	d845      	bhi.n	200021e8 <__sflush_r+0xe4>
2000215c:	4a27      	ldr	r2, [pc, #156]	@ (200021fc <__sflush_r+0xf8>)
2000215e:	40ca      	lsrs	r2, r1
20002160:	07d6      	lsls	r6, r2, #31
20002162:	d541      	bpl.n	200021e8 <__sflush_r+0xe4>
20002164:	2200      	movs	r2, #0
20002166:	6062      	str	r2, [r4, #4]
20002168:	04d9      	lsls	r1, r3, #19
2000216a:	6922      	ldr	r2, [r4, #16]
2000216c:	6022      	str	r2, [r4, #0]
2000216e:	d504      	bpl.n	2000217a <__sflush_r+0x76>
20002170:	1c42      	adds	r2, r0, #1
20002172:	d101      	bne.n	20002178 <__sflush_r+0x74>
20002174:	682b      	ldr	r3, [r5, #0]
20002176:	b903      	cbnz	r3, 2000217a <__sflush_r+0x76>
20002178:	6560      	str	r0, [r4, #84]	@ 0x54
2000217a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
2000217c:	602f      	str	r7, [r5, #0]
2000217e:	b1c1      	cbz	r1, 200021b2 <__sflush_r+0xae>
20002180:	f104 0344 	add.w	r3, r4, #68	@ 0x44
20002184:	4299      	cmp	r1, r3
20002186:	d002      	beq.n	2000218e <__sflush_r+0x8a>
20002188:	4628      	mov	r0, r5
2000218a:	f000 fb79 	bl	20002880 <_free_r>
2000218e:	2300      	movs	r3, #0
20002190:	6363      	str	r3, [r4, #52]	@ 0x34
20002192:	e00e      	b.n	200021b2 <__sflush_r+0xae>
20002194:	6a21      	ldr	r1, [r4, #32]
20002196:	2301      	movs	r3, #1
20002198:	4628      	mov	r0, r5
2000219a:	47b0      	blx	r6
2000219c:	4602      	mov	r2, r0
2000219e:	1c50      	adds	r0, r2, #1
200021a0:	d1c7      	bne.n	20002132 <__sflush_r+0x2e>
200021a2:	682b      	ldr	r3, [r5, #0]
200021a4:	2b00      	cmp	r3, #0
200021a6:	d0c4      	beq.n	20002132 <__sflush_r+0x2e>
200021a8:	2b1d      	cmp	r3, #29
200021aa:	d001      	beq.n	200021b0 <__sflush_r+0xac>
200021ac:	2b16      	cmp	r3, #22
200021ae:	d119      	bne.n	200021e4 <__sflush_r+0xe0>
200021b0:	602f      	str	r7, [r5, #0]
200021b2:	2000      	movs	r0, #0
200021b4:	e01d      	b.n	200021f2 <__sflush_r+0xee>
200021b6:	690f      	ldr	r7, [r1, #16]
200021b8:	2f00      	cmp	r7, #0
200021ba:	d0fa      	beq.n	200021b2 <__sflush_r+0xae>
200021bc:	0793      	lsls	r3, r2, #30
200021be:	680e      	ldr	r6, [r1, #0]
200021c0:	bf08      	it	eq
200021c2:	694b      	ldreq	r3, [r1, #20]
200021c4:	600f      	str	r7, [r1, #0]
200021c6:	bf18      	it	ne
200021c8:	2300      	movne	r3, #0
200021ca:	1bf6      	subs	r6, r6, r7
200021cc:	608b      	str	r3, [r1, #8]
200021ce:	2e00      	cmp	r6, #0
200021d0:	ddef      	ble.n	200021b2 <__sflush_r+0xae>
200021d2:	6a21      	ldr	r1, [r4, #32]
200021d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
200021d8:	4633      	mov	r3, r6
200021da:	463a      	mov	r2, r7
200021dc:	4628      	mov	r0, r5
200021de:	47e0      	blx	ip
200021e0:	2800      	cmp	r0, #0
200021e2:	dc07      	bgt.n	200021f4 <__sflush_r+0xf0>
200021e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
200021e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200021ec:	81a3      	strh	r3, [r4, #12]
200021ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
200021f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200021f4:	4407      	add	r7, r0
200021f6:	1a36      	subs	r6, r6, r0
200021f8:	e7e9      	b.n	200021ce <__sflush_r+0xca>
200021fa:	bf00      	nop
200021fc:	20400001 	.word	0x20400001

20002200 <_fflush_r>:
20002200:	b538      	push	{r3, r4, r5, lr}
20002202:	690b      	ldr	r3, [r1, #16]
20002204:	4605      	mov	r5, r0
20002206:	460c      	mov	r4, r1
20002208:	b913      	cbnz	r3, 20002210 <_fflush_r+0x10>
2000220a:	2500      	movs	r5, #0
2000220c:	4628      	mov	r0, r5
2000220e:	bd38      	pop	{r3, r4, r5, pc}
20002210:	b118      	cbz	r0, 2000221a <_fflush_r+0x1a>
20002212:	6a03      	ldr	r3, [r0, #32]
20002214:	b90b      	cbnz	r3, 2000221a <_fflush_r+0x1a>
20002216:	f000 f9db 	bl	200025d0 <__sinit>
2000221a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2000221e:	2b00      	cmp	r3, #0
20002220:	d0f3      	beq.n	2000220a <_fflush_r+0xa>
20002222:	6e62      	ldr	r2, [r4, #100]	@ 0x64
20002224:	07d0      	lsls	r0, r2, #31
20002226:	d404      	bmi.n	20002232 <_fflush_r+0x32>
20002228:	0599      	lsls	r1, r3, #22
2000222a:	d402      	bmi.n	20002232 <_fflush_r+0x32>
2000222c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
2000222e:	f000 faa2 	bl	20002776 <__retarget_lock_acquire_recursive>
20002232:	4628      	mov	r0, r5
20002234:	4621      	mov	r1, r4
20002236:	f7ff ff65 	bl	20002104 <__sflush_r>
2000223a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
2000223c:	07da      	lsls	r2, r3, #31
2000223e:	4605      	mov	r5, r0
20002240:	d4e4      	bmi.n	2000220c <_fflush_r+0xc>
20002242:	89a3      	ldrh	r3, [r4, #12]
20002244:	059b      	lsls	r3, r3, #22
20002246:	d4e1      	bmi.n	2000220c <_fflush_r+0xc>
20002248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
2000224a:	f000 fa9a 	bl	20002782 <__retarget_lock_release_recursive>
2000224e:	e7dd      	b.n	2000220c <_fflush_r+0xc>

20002250 <fflush>:
20002250:	4601      	mov	r1, r0
20002252:	b920      	cbnz	r0, 2000225e <fflush+0xe>
20002254:	4a04      	ldr	r2, [pc, #16]	@ (20002268 <fflush+0x18>)
20002256:	4905      	ldr	r1, [pc, #20]	@ (2000226c <fflush+0x1c>)
20002258:	4805      	ldr	r0, [pc, #20]	@ (20002270 <fflush+0x20>)
2000225a:	f000 b9ed 	b.w	20002638 <_fwalk_sglue>
2000225e:	4b05      	ldr	r3, [pc, #20]	@ (20002274 <fflush+0x24>)
20002260:	6818      	ldr	r0, [r3, #0]
20002262:	f7ff bfcd 	b.w	20002200 <_fflush_r>
20002266:	bf00      	nop
20002268:	20002cbc 	.word	0x20002cbc
2000226c:	20002201 	.word	0x20002201
20002270:	20002ccc 	.word	0x20002ccc
20002274:	20002cc8 	.word	0x20002cc8

20002278 <setvbuf>:
20002278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
2000227c:	461d      	mov	r5, r3
2000227e:	4b57      	ldr	r3, [pc, #348]	@ (200023dc <setvbuf+0x164>)
20002280:	681f      	ldr	r7, [r3, #0]
20002282:	4604      	mov	r4, r0
20002284:	460e      	mov	r6, r1
20002286:	4690      	mov	r8, r2
20002288:	b127      	cbz	r7, 20002294 <setvbuf+0x1c>
2000228a:	6a3b      	ldr	r3, [r7, #32]
2000228c:	b913      	cbnz	r3, 20002294 <setvbuf+0x1c>
2000228e:	4638      	mov	r0, r7
20002290:	f000 f99e 	bl	200025d0 <__sinit>
20002294:	f1b8 0f02 	cmp.w	r8, #2
20002298:	d006      	beq.n	200022a8 <setvbuf+0x30>
2000229a:	f1b8 0f01 	cmp.w	r8, #1
2000229e:	f200 809a 	bhi.w	200023d6 <setvbuf+0x15e>
200022a2:	2d00      	cmp	r5, #0
200022a4:	f2c0 8097 	blt.w	200023d6 <setvbuf+0x15e>
200022a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
200022aa:	07d9      	lsls	r1, r3, #31
200022ac:	d405      	bmi.n	200022ba <setvbuf+0x42>
200022ae:	89a3      	ldrh	r3, [r4, #12]
200022b0:	059a      	lsls	r2, r3, #22
200022b2:	d402      	bmi.n	200022ba <setvbuf+0x42>
200022b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
200022b6:	f000 fa5e 	bl	20002776 <__retarget_lock_acquire_recursive>
200022ba:	4621      	mov	r1, r4
200022bc:	4638      	mov	r0, r7
200022be:	f7ff ff9f 	bl	20002200 <_fflush_r>
200022c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
200022c4:	b141      	cbz	r1, 200022d8 <setvbuf+0x60>
200022c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
200022ca:	4299      	cmp	r1, r3
200022cc:	d002      	beq.n	200022d4 <setvbuf+0x5c>
200022ce:	4638      	mov	r0, r7
200022d0:	f000 fad6 	bl	20002880 <_free_r>
200022d4:	2300      	movs	r3, #0
200022d6:	6363      	str	r3, [r4, #52]	@ 0x34
200022d8:	2300      	movs	r3, #0
200022da:	61a3      	str	r3, [r4, #24]
200022dc:	6063      	str	r3, [r4, #4]
200022de:	89a3      	ldrh	r3, [r4, #12]
200022e0:	061b      	lsls	r3, r3, #24
200022e2:	d503      	bpl.n	200022ec <setvbuf+0x74>
200022e4:	6921      	ldr	r1, [r4, #16]
200022e6:	4638      	mov	r0, r7
200022e8:	f000 faca 	bl	20002880 <_free_r>
200022ec:	89a3      	ldrh	r3, [r4, #12]
200022ee:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
200022f2:	f023 0303 	bic.w	r3, r3, #3
200022f6:	f1b8 0f02 	cmp.w	r8, #2
200022fa:	81a3      	strh	r3, [r4, #12]
200022fc:	d061      	beq.n	200023c2 <setvbuf+0x14a>
200022fe:	ab01      	add	r3, sp, #4
20002300:	466a      	mov	r2, sp
20002302:	4621      	mov	r1, r4
20002304:	4638      	mov	r0, r7
20002306:	f000 f9b5 	bl	20002674 <__swhatbuf_r>
2000230a:	89a3      	ldrh	r3, [r4, #12]
2000230c:	4318      	orrs	r0, r3
2000230e:	81a0      	strh	r0, [r4, #12]
20002310:	bb2d      	cbnz	r5, 2000235e <setvbuf+0xe6>
20002312:	9d00      	ldr	r5, [sp, #0]
20002314:	4628      	mov	r0, r5
20002316:	f000 fafd 	bl	20002914 <malloc>
2000231a:	4606      	mov	r6, r0
2000231c:	2800      	cmp	r0, #0
2000231e:	d152      	bne.n	200023c6 <setvbuf+0x14e>
20002320:	f8dd 9000 	ldr.w	r9, [sp]
20002324:	45a9      	cmp	r9, r5
20002326:	d140      	bne.n	200023aa <setvbuf+0x132>
20002328:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
2000232c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
20002330:	f043 0202 	orr.w	r2, r3, #2
20002334:	81a2      	strh	r2, [r4, #12]
20002336:	2200      	movs	r2, #0
20002338:	60a2      	str	r2, [r4, #8]
2000233a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
2000233e:	6022      	str	r2, [r4, #0]
20002340:	6122      	str	r2, [r4, #16]
20002342:	2201      	movs	r2, #1
20002344:	6162      	str	r2, [r4, #20]
20002346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
20002348:	07d6      	lsls	r6, r2, #31
2000234a:	d404      	bmi.n	20002356 <setvbuf+0xde>
2000234c:	0598      	lsls	r0, r3, #22
2000234e:	d402      	bmi.n	20002356 <setvbuf+0xde>
20002350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
20002352:	f000 fa16 	bl	20002782 <__retarget_lock_release_recursive>
20002356:	4628      	mov	r0, r5
20002358:	b003      	add	sp, #12
2000235a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
2000235e:	2e00      	cmp	r6, #0
20002360:	d0d8      	beq.n	20002314 <setvbuf+0x9c>
20002362:	6a3b      	ldr	r3, [r7, #32]
20002364:	b913      	cbnz	r3, 2000236c <setvbuf+0xf4>
20002366:	4638      	mov	r0, r7
20002368:	f000 f932 	bl	200025d0 <__sinit>
2000236c:	f1b8 0f01 	cmp.w	r8, #1
20002370:	bf08      	it	eq
20002372:	89a3      	ldrheq	r3, [r4, #12]
20002374:	6026      	str	r6, [r4, #0]
20002376:	bf04      	itt	eq
20002378:	f043 0301 	orreq.w	r3, r3, #1
2000237c:	81a3      	strheq	r3, [r4, #12]
2000237e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
20002382:	f013 0208 	ands.w	r2, r3, #8
20002386:	e9c4 6504 	strd	r6, r5, [r4, #16]
2000238a:	d01e      	beq.n	200023ca <setvbuf+0x152>
2000238c:	07d9      	lsls	r1, r3, #31
2000238e:	bf41      	itttt	mi
20002390:	2200      	movmi	r2, #0
20002392:	426d      	negmi	r5, r5
20002394:	60a2      	strmi	r2, [r4, #8]
20002396:	61a5      	strmi	r5, [r4, #24]
20002398:	bf58      	it	pl
2000239a:	60a5      	strpl	r5, [r4, #8]
2000239c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
2000239e:	07d2      	lsls	r2, r2, #31
200023a0:	d401      	bmi.n	200023a6 <setvbuf+0x12e>
200023a2:	059b      	lsls	r3, r3, #22
200023a4:	d513      	bpl.n	200023ce <setvbuf+0x156>
200023a6:	2500      	movs	r5, #0
200023a8:	e7d5      	b.n	20002356 <setvbuf+0xde>
200023aa:	4648      	mov	r0, r9
200023ac:	f000 fab2 	bl	20002914 <malloc>
200023b0:	4606      	mov	r6, r0
200023b2:	2800      	cmp	r0, #0
200023b4:	d0b8      	beq.n	20002328 <setvbuf+0xb0>
200023b6:	89a3      	ldrh	r3, [r4, #12]
200023b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
200023bc:	81a3      	strh	r3, [r4, #12]
200023be:	464d      	mov	r5, r9
200023c0:	e7cf      	b.n	20002362 <setvbuf+0xea>
200023c2:	2500      	movs	r5, #0
200023c4:	e7b2      	b.n	2000232c <setvbuf+0xb4>
200023c6:	46a9      	mov	r9, r5
200023c8:	e7f5      	b.n	200023b6 <setvbuf+0x13e>
200023ca:	60a2      	str	r2, [r4, #8]
200023cc:	e7e6      	b.n	2000239c <setvbuf+0x124>
200023ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
200023d0:	f000 f9d7 	bl	20002782 <__retarget_lock_release_recursive>
200023d4:	e7e7      	b.n	200023a6 <setvbuf+0x12e>
200023d6:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
200023da:	e7bc      	b.n	20002356 <setvbuf+0xde>
200023dc:	20002cc8 	.word	0x20002cc8

200023e0 <std>:
200023e0:	2300      	movs	r3, #0
200023e2:	b510      	push	{r4, lr}
200023e4:	4604      	mov	r4, r0
200023e6:	e9c0 3300 	strd	r3, r3, [r0]
200023ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
200023ee:	6083      	str	r3, [r0, #8]
200023f0:	8181      	strh	r1, [r0, #12]
200023f2:	6643      	str	r3, [r0, #100]	@ 0x64
200023f4:	81c2      	strh	r2, [r0, #14]
200023f6:	6183      	str	r3, [r0, #24]
200023f8:	4619      	mov	r1, r3
200023fa:	2208      	movs	r2, #8
200023fc:	305c      	adds	r0, #92	@ 0x5c
200023fe:	f000 f996 	bl	2000272e <memset>
20002402:	4b0d      	ldr	r3, [pc, #52]	@ (20002438 <std+0x58>)
20002404:	6263      	str	r3, [r4, #36]	@ 0x24
20002406:	4b0d      	ldr	r3, [pc, #52]	@ (2000243c <std+0x5c>)
20002408:	62a3      	str	r3, [r4, #40]	@ 0x28
2000240a:	4b0d      	ldr	r3, [pc, #52]	@ (20002440 <std+0x60>)
2000240c:	62e3      	str	r3, [r4, #44]	@ 0x2c
2000240e:	4b0d      	ldr	r3, [pc, #52]	@ (20002444 <std+0x64>)
20002410:	6323      	str	r3, [r4, #48]	@ 0x30
20002412:	4b0d      	ldr	r3, [pc, #52]	@ (20002448 <std+0x68>)
20002414:	6224      	str	r4, [r4, #32]
20002416:	429c      	cmp	r4, r3
20002418:	d006      	beq.n	20002428 <std+0x48>
2000241a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
2000241e:	4294      	cmp	r4, r2
20002420:	d002      	beq.n	20002428 <std+0x48>
20002422:	33d0      	adds	r3, #208	@ 0xd0
20002424:	429c      	cmp	r4, r3
20002426:	d105      	bne.n	20002434 <std+0x54>
20002428:	f104 0058 	add.w	r0, r4, #88	@ 0x58
2000242c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20002430:	f000 b99d 	b.w	2000276e <__retarget_lock_init_recursive>
20002434:	bd10      	pop	{r4, pc}
20002436:	bf00      	nop
20002438:	20002a91 	.word	0x20002a91
2000243c:	20002ab7 	.word	0x20002ab7
20002440:	20002aef 	.word	0x20002aef
20002444:	20002b15 	.word	0x20002b15
20002448:	20002e20 	.word	0x20002e20

2000244c <stdio_exit_handler>:
2000244c:	4a02      	ldr	r2, [pc, #8]	@ (20002458 <stdio_exit_handler+0xc>)
2000244e:	4903      	ldr	r1, [pc, #12]	@ (2000245c <stdio_exit_handler+0x10>)
20002450:	4803      	ldr	r0, [pc, #12]	@ (20002460 <stdio_exit_handler+0x14>)
20002452:	f000 b8f1 	b.w	20002638 <_fwalk_sglue>
20002456:	bf00      	nop
20002458:	20002cbc 	.word	0x20002cbc
2000245c:	20002201 	.word	0x20002201
20002460:	20002ccc 	.word	0x20002ccc

20002464 <cleanup_stdio>:
20002464:	6841      	ldr	r1, [r0, #4]
20002466:	4b0c      	ldr	r3, [pc, #48]	@ (20002498 <cleanup_stdio+0x34>)
20002468:	4299      	cmp	r1, r3
2000246a:	b510      	push	{r4, lr}
2000246c:	4604      	mov	r4, r0
2000246e:	d001      	beq.n	20002474 <cleanup_stdio+0x10>
20002470:	f7ff fec6 	bl	20002200 <_fflush_r>
20002474:	68a1      	ldr	r1, [r4, #8]
20002476:	4b09      	ldr	r3, [pc, #36]	@ (2000249c <cleanup_stdio+0x38>)
20002478:	4299      	cmp	r1, r3
2000247a:	d002      	beq.n	20002482 <cleanup_stdio+0x1e>
2000247c:	4620      	mov	r0, r4
2000247e:	f7ff febf 	bl	20002200 <_fflush_r>
20002482:	68e1      	ldr	r1, [r4, #12]
20002484:	4b06      	ldr	r3, [pc, #24]	@ (200024a0 <cleanup_stdio+0x3c>)
20002486:	4299      	cmp	r1, r3
20002488:	d004      	beq.n	20002494 <cleanup_stdio+0x30>
2000248a:	4620      	mov	r0, r4
2000248c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20002490:	f7ff beb6 	b.w	20002200 <_fflush_r>
20002494:	bd10      	pop	{r4, pc}
20002496:	bf00      	nop
20002498:	20002e20 	.word	0x20002e20
2000249c:	20002e88 	.word	0x20002e88
200024a0:	20002ef0 	.word	0x20002ef0

200024a4 <__fp_lock>:
200024a4:	b508      	push	{r3, lr}
200024a6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
200024a8:	07da      	lsls	r2, r3, #31
200024aa:	d405      	bmi.n	200024b8 <__fp_lock+0x14>
200024ac:	898b      	ldrh	r3, [r1, #12]
200024ae:	059b      	lsls	r3, r3, #22
200024b0:	d402      	bmi.n	200024b8 <__fp_lock+0x14>
200024b2:	6d88      	ldr	r0, [r1, #88]	@ 0x58
200024b4:	f000 f95f 	bl	20002776 <__retarget_lock_acquire_recursive>
200024b8:	2000      	movs	r0, #0
200024ba:	bd08      	pop	{r3, pc}

200024bc <__fp_unlock>:
200024bc:	b508      	push	{r3, lr}
200024be:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
200024c0:	07da      	lsls	r2, r3, #31
200024c2:	d405      	bmi.n	200024d0 <__fp_unlock+0x14>
200024c4:	898b      	ldrh	r3, [r1, #12]
200024c6:	059b      	lsls	r3, r3, #22
200024c8:	d402      	bmi.n	200024d0 <__fp_unlock+0x14>
200024ca:	6d88      	ldr	r0, [r1, #88]	@ 0x58
200024cc:	f000 f959 	bl	20002782 <__retarget_lock_release_recursive>
200024d0:	2000      	movs	r0, #0
200024d2:	bd08      	pop	{r3, pc}

200024d4 <global_stdio_init.part.0>:
200024d4:	4b0c      	ldr	r3, [pc, #48]	@ (20002508 <global_stdio_init.part.0+0x34>)
200024d6:	4a0d      	ldr	r2, [pc, #52]	@ (2000250c <global_stdio_init.part.0+0x38>)
200024d8:	480d      	ldr	r0, [pc, #52]	@ (20002510 <global_stdio_init.part.0+0x3c>)
200024da:	b510      	push	{r4, lr}
200024dc:	2104      	movs	r1, #4
200024de:	601a      	str	r2, [r3, #0]
200024e0:	2200      	movs	r2, #0
200024e2:	f7ff ff7d 	bl	200023e0 <std>
200024e6:	4b0a      	ldr	r3, [pc, #40]	@ (20002510 <global_stdio_init.part.0+0x3c>)
200024e8:	2201      	movs	r2, #1
200024ea:	461c      	mov	r4, r3
200024ec:	2109      	movs	r1, #9
200024ee:	f103 0068 	add.w	r0, r3, #104	@ 0x68
200024f2:	f7ff ff75 	bl	200023e0 <std>
200024f6:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
200024fa:	2202      	movs	r2, #2
200024fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20002500:	2112      	movs	r1, #18
20002502:	f7ff bf6d 	b.w	200023e0 <std>
20002506:	bf00      	nop
20002508:	20002f58 	.word	0x20002f58
2000250c:	2000244d 	.word	0x2000244d
20002510:	20002e20 	.word	0x20002e20

20002514 <__sfp_lock_acquire>:
20002514:	4801      	ldr	r0, [pc, #4]	@ (2000251c <__sfp_lock_acquire+0x8>)
20002516:	f000 b92e 	b.w	20002776 <__retarget_lock_acquire_recursive>
2000251a:	bf00      	nop
2000251c:	20002f63 	.word	0x20002f63

20002520 <__sfp_lock_release>:
20002520:	4801      	ldr	r0, [pc, #4]	@ (20002528 <__sfp_lock_release+0x8>)
20002522:	f000 b92e 	b.w	20002782 <__retarget_lock_release_recursive>
20002526:	bf00      	nop
20002528:	20002f63 	.word	0x20002f63

2000252c <__sfp>:
2000252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000252e:	4607      	mov	r7, r0
20002530:	f7ff fff0 	bl	20002514 <__sfp_lock_acquire>
20002534:	4b23      	ldr	r3, [pc, #140]	@ (200025c4 <__sfp+0x98>)
20002536:	681b      	ldr	r3, [r3, #0]
20002538:	b90b      	cbnz	r3, 2000253e <__sfp+0x12>
2000253a:	f7ff ffcb 	bl	200024d4 <global_stdio_init.part.0>
2000253e:	4e22      	ldr	r6, [pc, #136]	@ (200025c8 <__sfp+0x9c>)
20002540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
20002544:	3b01      	subs	r3, #1
20002546:	d50f      	bpl.n	20002568 <__sfp+0x3c>
20002548:	6835      	ldr	r5, [r6, #0]
2000254a:	2d00      	cmp	r5, #0
2000254c:	d138      	bne.n	200025c0 <__sfp+0x94>
2000254e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
20002552:	4638      	mov	r0, r7
20002554:	f000 fa10 	bl	20002978 <_malloc_r>
20002558:	4604      	mov	r4, r0
2000255a:	bb28      	cbnz	r0, 200025a8 <__sfp+0x7c>
2000255c:	6030      	str	r0, [r6, #0]
2000255e:	f7ff ffdf 	bl	20002520 <__sfp_lock_release>
20002562:	230c      	movs	r3, #12
20002564:	603b      	str	r3, [r7, #0]
20002566:	e01b      	b.n	200025a0 <__sfp+0x74>
20002568:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
2000256c:	b9d5      	cbnz	r5, 200025a4 <__sfp+0x78>
2000256e:	4b17      	ldr	r3, [pc, #92]	@ (200025cc <__sfp+0xa0>)
20002570:	60e3      	str	r3, [r4, #12]
20002572:	f104 0058 	add.w	r0, r4, #88	@ 0x58
20002576:	6665      	str	r5, [r4, #100]	@ 0x64
20002578:	f000 f8f9 	bl	2000276e <__retarget_lock_init_recursive>
2000257c:	f7ff ffd0 	bl	20002520 <__sfp_lock_release>
20002580:	e9c4 5501 	strd	r5, r5, [r4, #4]
20002584:	e9c4 5504 	strd	r5, r5, [r4, #16]
20002588:	6025      	str	r5, [r4, #0]
2000258a:	61a5      	str	r5, [r4, #24]
2000258c:	2208      	movs	r2, #8
2000258e:	4629      	mov	r1, r5
20002590:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
20002594:	f000 f8cb 	bl	2000272e <memset>
20002598:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
2000259c:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
200025a0:	4620      	mov	r0, r4
200025a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200025a4:	3468      	adds	r4, #104	@ 0x68
200025a6:	e7cd      	b.n	20002544 <__sfp+0x18>
200025a8:	2304      	movs	r3, #4
200025aa:	6005      	str	r5, [r0, #0]
200025ac:	6043      	str	r3, [r0, #4]
200025ae:	300c      	adds	r0, #12
200025b0:	4629      	mov	r1, r5
200025b2:	60a0      	str	r0, [r4, #8]
200025b4:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
200025b8:	f000 f8b9 	bl	2000272e <memset>
200025bc:	4625      	mov	r5, r4
200025be:	6034      	str	r4, [r6, #0]
200025c0:	462e      	mov	r6, r5
200025c2:	e7bd      	b.n	20002540 <__sfp+0x14>
200025c4:	20002f58 	.word	0x20002f58
200025c8:	20002cbc 	.word	0x20002cbc
200025cc:	ffff0001 	.word	0xffff0001

200025d0 <__sinit>:
200025d0:	b510      	push	{r4, lr}
200025d2:	4604      	mov	r4, r0
200025d4:	f7ff ff9e 	bl	20002514 <__sfp_lock_acquire>
200025d8:	6a23      	ldr	r3, [r4, #32]
200025da:	b11b      	cbz	r3, 200025e4 <__sinit+0x14>
200025dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
200025e0:	f7ff bf9e 	b.w	20002520 <__sfp_lock_release>
200025e4:	4b04      	ldr	r3, [pc, #16]	@ (200025f8 <__sinit+0x28>)
200025e6:	6223      	str	r3, [r4, #32]
200025e8:	4b04      	ldr	r3, [pc, #16]	@ (200025fc <__sinit+0x2c>)
200025ea:	681b      	ldr	r3, [r3, #0]
200025ec:	2b00      	cmp	r3, #0
200025ee:	d1f5      	bne.n	200025dc <__sinit+0xc>
200025f0:	f7ff ff70 	bl	200024d4 <global_stdio_init.part.0>
200025f4:	e7f2      	b.n	200025dc <__sinit+0xc>
200025f6:	bf00      	nop
200025f8:	20002465 	.word	0x20002465
200025fc:	20002f58 	.word	0x20002f58

20002600 <__fp_lock_all>:
20002600:	b508      	push	{r3, lr}
20002602:	f7ff ff87 	bl	20002514 <__sfp_lock_acquire>
20002606:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2000260a:	4a02      	ldr	r2, [pc, #8]	@ (20002614 <__fp_lock_all+0x14>)
2000260c:	4902      	ldr	r1, [pc, #8]	@ (20002618 <__fp_lock_all+0x18>)
2000260e:	2000      	movs	r0, #0
20002610:	f000 b812 	b.w	20002638 <_fwalk_sglue>
20002614:	20002cbc 	.word	0x20002cbc
20002618:	200024a5 	.word	0x200024a5

2000261c <__fp_unlock_all>:
2000261c:	b508      	push	{r3, lr}
2000261e:	4a04      	ldr	r2, [pc, #16]	@ (20002630 <__fp_unlock_all+0x14>)
20002620:	4904      	ldr	r1, [pc, #16]	@ (20002634 <__fp_unlock_all+0x18>)
20002622:	2000      	movs	r0, #0
20002624:	f000 f808 	bl	20002638 <_fwalk_sglue>
20002628:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2000262c:	f7ff bf78 	b.w	20002520 <__sfp_lock_release>
20002630:	20002cbc 	.word	0x20002cbc
20002634:	200024bd 	.word	0x200024bd

20002638 <_fwalk_sglue>:
20002638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2000263c:	4607      	mov	r7, r0
2000263e:	4688      	mov	r8, r1
20002640:	4614      	mov	r4, r2
20002642:	2600      	movs	r6, #0
20002644:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
20002648:	f1b9 0901 	subs.w	r9, r9, #1
2000264c:	d505      	bpl.n	2000265a <_fwalk_sglue+0x22>
2000264e:	6824      	ldr	r4, [r4, #0]
20002650:	2c00      	cmp	r4, #0
20002652:	d1f7      	bne.n	20002644 <_fwalk_sglue+0xc>
20002654:	4630      	mov	r0, r6
20002656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2000265a:	89ab      	ldrh	r3, [r5, #12]
2000265c:	2b01      	cmp	r3, #1
2000265e:	d907      	bls.n	20002670 <_fwalk_sglue+0x38>
20002660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
20002664:	3301      	adds	r3, #1
20002666:	d003      	beq.n	20002670 <_fwalk_sglue+0x38>
20002668:	4629      	mov	r1, r5
2000266a:	4638      	mov	r0, r7
2000266c:	47c0      	blx	r8
2000266e:	4306      	orrs	r6, r0
20002670:	3568      	adds	r5, #104	@ 0x68
20002672:	e7e9      	b.n	20002648 <_fwalk_sglue+0x10>

20002674 <__swhatbuf_r>:
20002674:	b570      	push	{r4, r5, r6, lr}
20002676:	460c      	mov	r4, r1
20002678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2000267c:	2900      	cmp	r1, #0
2000267e:	b096      	sub	sp, #88	@ 0x58
20002680:	4615      	mov	r5, r2
20002682:	461e      	mov	r6, r3
20002684:	da0a      	bge.n	2000269c <__swhatbuf_r+0x28>
20002686:	89a1      	ldrh	r1, [r4, #12]
20002688:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
2000268c:	d113      	bne.n	200026b6 <__swhatbuf_r+0x42>
2000268e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
20002692:	2000      	movs	r0, #0
20002694:	6031      	str	r1, [r6, #0]
20002696:	602a      	str	r2, [r5, #0]
20002698:	b016      	add	sp, #88	@ 0x58
2000269a:	bd70      	pop	{r4, r5, r6, pc}
2000269c:	466a      	mov	r2, sp
2000269e:	f000 f8cf 	bl	20002840 <_fstat_r>
200026a2:	2800      	cmp	r0, #0
200026a4:	dbef      	blt.n	20002686 <__swhatbuf_r+0x12>
200026a6:	9901      	ldr	r1, [sp, #4]
200026a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
200026ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
200026b0:	4259      	negs	r1, r3
200026b2:	4159      	adcs	r1, r3
200026b4:	e7eb      	b.n	2000268e <__swhatbuf_r+0x1a>
200026b6:	2100      	movs	r1, #0
200026b8:	2240      	movs	r2, #64	@ 0x40
200026ba:	e7ea      	b.n	20002692 <__swhatbuf_r+0x1e>

200026bc <__smakebuf_r>:
200026bc:	898b      	ldrh	r3, [r1, #12]
200026be:	b573      	push	{r0, r1, r4, r5, r6, lr}
200026c0:	079e      	lsls	r6, r3, #30
200026c2:	4605      	mov	r5, r0
200026c4:	460c      	mov	r4, r1
200026c6:	d507      	bpl.n	200026d8 <__smakebuf_r+0x1c>
200026c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
200026cc:	6023      	str	r3, [r4, #0]
200026ce:	6123      	str	r3, [r4, #16]
200026d0:	2301      	movs	r3, #1
200026d2:	6163      	str	r3, [r4, #20]
200026d4:	b002      	add	sp, #8
200026d6:	bd70      	pop	{r4, r5, r6, pc}
200026d8:	ab01      	add	r3, sp, #4
200026da:	466a      	mov	r2, sp
200026dc:	f7ff ffca 	bl	20002674 <__swhatbuf_r>
200026e0:	9e00      	ldr	r6, [sp, #0]
200026e2:	4628      	mov	r0, r5
200026e4:	4631      	mov	r1, r6
200026e6:	f000 f947 	bl	20002978 <_malloc_r>
200026ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
200026ee:	b938      	cbnz	r0, 20002700 <__smakebuf_r+0x44>
200026f0:	059a      	lsls	r2, r3, #22
200026f2:	d4ef      	bmi.n	200026d4 <__smakebuf_r+0x18>
200026f4:	f023 0303 	bic.w	r3, r3, #3
200026f8:	f043 0302 	orr.w	r3, r3, #2
200026fc:	81a3      	strh	r3, [r4, #12]
200026fe:	e7e3      	b.n	200026c8 <__smakebuf_r+0xc>
20002700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
20002704:	81a3      	strh	r3, [r4, #12]
20002706:	9b01      	ldr	r3, [sp, #4]
20002708:	6020      	str	r0, [r4, #0]
2000270a:	e9c4 0604 	strd	r0, r6, [r4, #16]
2000270e:	2b00      	cmp	r3, #0
20002710:	d0e0      	beq.n	200026d4 <__smakebuf_r+0x18>
20002712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
20002716:	4628      	mov	r0, r5
20002718:	f000 f812 	bl	20002740 <_isatty_r>
2000271c:	2800      	cmp	r0, #0
2000271e:	d0d9      	beq.n	200026d4 <__smakebuf_r+0x18>
20002720:	89a3      	ldrh	r3, [r4, #12]
20002722:	f023 0303 	bic.w	r3, r3, #3
20002726:	f043 0301 	orr.w	r3, r3, #1
2000272a:	81a3      	strh	r3, [r4, #12]
2000272c:	e7d2      	b.n	200026d4 <__smakebuf_r+0x18>

2000272e <memset>:
2000272e:	4402      	add	r2, r0
20002730:	4603      	mov	r3, r0
20002732:	4293      	cmp	r3, r2
20002734:	d100      	bne.n	20002738 <memset+0xa>
20002736:	4770      	bx	lr
20002738:	f803 1b01 	strb.w	r1, [r3], #1
2000273c:	e7f9      	b.n	20002732 <memset+0x4>
	...

20002740 <_isatty_r>:
20002740:	b538      	push	{r3, r4, r5, lr}
20002742:	4d06      	ldr	r5, [pc, #24]	@ (2000275c <_isatty_r+0x1c>)
20002744:	2300      	movs	r3, #0
20002746:	4604      	mov	r4, r0
20002748:	4608      	mov	r0, r1
2000274a:	602b      	str	r3, [r5, #0]
2000274c:	f7ff fb6c 	bl	20001e28 <_isatty>
20002750:	1c43      	adds	r3, r0, #1
20002752:	d102      	bne.n	2000275a <_isatty_r+0x1a>
20002754:	682b      	ldr	r3, [r5, #0]
20002756:	b103      	cbz	r3, 2000275a <_isatty_r+0x1a>
20002758:	6023      	str	r3, [r4, #0]
2000275a:	bd38      	pop	{r3, r4, r5, pc}
2000275c:	20002f64 	.word	0x20002f64

20002760 <__errno>:
20002760:	4b01      	ldr	r3, [pc, #4]	@ (20002768 <__errno+0x8>)
20002762:	6818      	ldr	r0, [r3, #0]
20002764:	4770      	bx	lr
20002766:	bf00      	nop
20002768:	20002cc8 	.word	0x20002cc8

2000276c <__retarget_lock_init>:
2000276c:	4770      	bx	lr

2000276e <__retarget_lock_init_recursive>:
2000276e:	4770      	bx	lr

20002770 <__retarget_lock_close>:
20002770:	4770      	bx	lr

20002772 <__retarget_lock_close_recursive>:
20002772:	4770      	bx	lr

20002774 <__retarget_lock_acquire>:
20002774:	4770      	bx	lr

20002776 <__retarget_lock_acquire_recursive>:
20002776:	4770      	bx	lr

20002778 <__retarget_lock_try_acquire>:
20002778:	2001      	movs	r0, #1
2000277a:	4770      	bx	lr

2000277c <__retarget_lock_try_acquire_recursive>:
2000277c:	2001      	movs	r0, #1
2000277e:	4770      	bx	lr

20002780 <__retarget_lock_release>:
20002780:	4770      	bx	lr

20002782 <__retarget_lock_release_recursive>:
20002782:	4770      	bx	lr

20002784 <_reclaim_reent>:
20002784:	4b2d      	ldr	r3, [pc, #180]	@ (2000283c <_reclaim_reent+0xb8>)
20002786:	681b      	ldr	r3, [r3, #0]
20002788:	4283      	cmp	r3, r0
2000278a:	b570      	push	{r4, r5, r6, lr}
2000278c:	4604      	mov	r4, r0
2000278e:	d053      	beq.n	20002838 <_reclaim_reent+0xb4>
20002790:	69c3      	ldr	r3, [r0, #28]
20002792:	b31b      	cbz	r3, 200027dc <_reclaim_reent+0x58>
20002794:	68db      	ldr	r3, [r3, #12]
20002796:	b163      	cbz	r3, 200027b2 <_reclaim_reent+0x2e>
20002798:	2500      	movs	r5, #0
2000279a:	69e3      	ldr	r3, [r4, #28]
2000279c:	68db      	ldr	r3, [r3, #12]
2000279e:	5959      	ldr	r1, [r3, r5]
200027a0:	b9b1      	cbnz	r1, 200027d0 <_reclaim_reent+0x4c>
200027a2:	3504      	adds	r5, #4
200027a4:	2d80      	cmp	r5, #128	@ 0x80
200027a6:	d1f8      	bne.n	2000279a <_reclaim_reent+0x16>
200027a8:	69e3      	ldr	r3, [r4, #28]
200027aa:	4620      	mov	r0, r4
200027ac:	68d9      	ldr	r1, [r3, #12]
200027ae:	f000 f867 	bl	20002880 <_free_r>
200027b2:	69e3      	ldr	r3, [r4, #28]
200027b4:	6819      	ldr	r1, [r3, #0]
200027b6:	b111      	cbz	r1, 200027be <_reclaim_reent+0x3a>
200027b8:	4620      	mov	r0, r4
200027ba:	f000 f861 	bl	20002880 <_free_r>
200027be:	69e3      	ldr	r3, [r4, #28]
200027c0:	689d      	ldr	r5, [r3, #8]
200027c2:	b15d      	cbz	r5, 200027dc <_reclaim_reent+0x58>
200027c4:	4629      	mov	r1, r5
200027c6:	4620      	mov	r0, r4
200027c8:	682d      	ldr	r5, [r5, #0]
200027ca:	f000 f859 	bl	20002880 <_free_r>
200027ce:	e7f8      	b.n	200027c2 <_reclaim_reent+0x3e>
200027d0:	680e      	ldr	r6, [r1, #0]
200027d2:	4620      	mov	r0, r4
200027d4:	f000 f854 	bl	20002880 <_free_r>
200027d8:	4631      	mov	r1, r6
200027da:	e7e1      	b.n	200027a0 <_reclaim_reent+0x1c>
200027dc:	6961      	ldr	r1, [r4, #20]
200027de:	b111      	cbz	r1, 200027e6 <_reclaim_reent+0x62>
200027e0:	4620      	mov	r0, r4
200027e2:	f000 f84d 	bl	20002880 <_free_r>
200027e6:	69e1      	ldr	r1, [r4, #28]
200027e8:	b111      	cbz	r1, 200027f0 <_reclaim_reent+0x6c>
200027ea:	4620      	mov	r0, r4
200027ec:	f000 f848 	bl	20002880 <_free_r>
200027f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
200027f2:	b111      	cbz	r1, 200027fa <_reclaim_reent+0x76>
200027f4:	4620      	mov	r0, r4
200027f6:	f000 f843 	bl	20002880 <_free_r>
200027fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
200027fc:	b111      	cbz	r1, 20002804 <_reclaim_reent+0x80>
200027fe:	4620      	mov	r0, r4
20002800:	f000 f83e 	bl	20002880 <_free_r>
20002804:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
20002806:	b111      	cbz	r1, 2000280e <_reclaim_reent+0x8a>
20002808:	4620      	mov	r0, r4
2000280a:	f000 f839 	bl	20002880 <_free_r>
2000280e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
20002810:	b111      	cbz	r1, 20002818 <_reclaim_reent+0x94>
20002812:	4620      	mov	r0, r4
20002814:	f000 f834 	bl	20002880 <_free_r>
20002818:	6c61      	ldr	r1, [r4, #68]	@ 0x44
2000281a:	b111      	cbz	r1, 20002822 <_reclaim_reent+0x9e>
2000281c:	4620      	mov	r0, r4
2000281e:	f000 f82f 	bl	20002880 <_free_r>
20002822:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
20002824:	b111      	cbz	r1, 2000282c <_reclaim_reent+0xa8>
20002826:	4620      	mov	r0, r4
20002828:	f000 f82a 	bl	20002880 <_free_r>
2000282c:	6a23      	ldr	r3, [r4, #32]
2000282e:	b11b      	cbz	r3, 20002838 <_reclaim_reent+0xb4>
20002830:	4620      	mov	r0, r4
20002832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
20002836:	4718      	bx	r3
20002838:	bd70      	pop	{r4, r5, r6, pc}
2000283a:	bf00      	nop
2000283c:	20002cc8 	.word	0x20002cc8

20002840 <_fstat_r>:
20002840:	b538      	push	{r3, r4, r5, lr}
20002842:	4d07      	ldr	r5, [pc, #28]	@ (20002860 <_fstat_r+0x20>)
20002844:	2300      	movs	r3, #0
20002846:	4604      	mov	r4, r0
20002848:	4608      	mov	r0, r1
2000284a:	4611      	mov	r1, r2
2000284c:	602b      	str	r3, [r5, #0]
2000284e:	f7ff fae7 	bl	20001e20 <_fstat>
20002852:	1c43      	adds	r3, r0, #1
20002854:	d102      	bne.n	2000285c <_fstat_r+0x1c>
20002856:	682b      	ldr	r3, [r5, #0]
20002858:	b103      	cbz	r3, 2000285c <_fstat_r+0x1c>
2000285a:	6023      	str	r3, [r4, #0]
2000285c:	bd38      	pop	{r3, r4, r5, pc}
2000285e:	bf00      	nop
20002860:	20002f64 	.word	0x20002f64

20002864 <memcpy>:
20002864:	440a      	add	r2, r1
20002866:	4291      	cmp	r1, r2
20002868:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
2000286c:	d100      	bne.n	20002870 <memcpy+0xc>
2000286e:	4770      	bx	lr
20002870:	b510      	push	{r4, lr}
20002872:	f811 4b01 	ldrb.w	r4, [r1], #1
20002876:	f803 4f01 	strb.w	r4, [r3, #1]!
2000287a:	4291      	cmp	r1, r2
2000287c:	d1f9      	bne.n	20002872 <memcpy+0xe>
2000287e:	bd10      	pop	{r4, pc}

20002880 <_free_r>:
20002880:	b538      	push	{r3, r4, r5, lr}
20002882:	4605      	mov	r5, r0
20002884:	2900      	cmp	r1, #0
20002886:	d041      	beq.n	2000290c <_free_r+0x8c>
20002888:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000288c:	1f0c      	subs	r4, r1, #4
2000288e:	2b00      	cmp	r3, #0
20002890:	bfb8      	it	lt
20002892:	18e4      	addlt	r4, r4, r3
20002894:	f000 f8f0 	bl	20002a78 <__malloc_lock>
20002898:	4a1d      	ldr	r2, [pc, #116]	@ (20002910 <_free_r+0x90>)
2000289a:	6813      	ldr	r3, [r2, #0]
2000289c:	b933      	cbnz	r3, 200028ac <_free_r+0x2c>
2000289e:	6063      	str	r3, [r4, #4]
200028a0:	6014      	str	r4, [r2, #0]
200028a2:	4628      	mov	r0, r5
200028a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
200028a8:	f000 b8ec 	b.w	20002a84 <__malloc_unlock>
200028ac:	42a3      	cmp	r3, r4
200028ae:	d908      	bls.n	200028c2 <_free_r+0x42>
200028b0:	6820      	ldr	r0, [r4, #0]
200028b2:	1821      	adds	r1, r4, r0
200028b4:	428b      	cmp	r3, r1
200028b6:	bf01      	itttt	eq
200028b8:	6819      	ldreq	r1, [r3, #0]
200028ba:	685b      	ldreq	r3, [r3, #4]
200028bc:	1809      	addeq	r1, r1, r0
200028be:	6021      	streq	r1, [r4, #0]
200028c0:	e7ed      	b.n	2000289e <_free_r+0x1e>
200028c2:	461a      	mov	r2, r3
200028c4:	685b      	ldr	r3, [r3, #4]
200028c6:	b10b      	cbz	r3, 200028cc <_free_r+0x4c>
200028c8:	42a3      	cmp	r3, r4
200028ca:	d9fa      	bls.n	200028c2 <_free_r+0x42>
200028cc:	6811      	ldr	r1, [r2, #0]
200028ce:	1850      	adds	r0, r2, r1
200028d0:	42a0      	cmp	r0, r4
200028d2:	d10b      	bne.n	200028ec <_free_r+0x6c>
200028d4:	6820      	ldr	r0, [r4, #0]
200028d6:	4401      	add	r1, r0
200028d8:	1850      	adds	r0, r2, r1
200028da:	4283      	cmp	r3, r0
200028dc:	6011      	str	r1, [r2, #0]
200028de:	d1e0      	bne.n	200028a2 <_free_r+0x22>
200028e0:	6818      	ldr	r0, [r3, #0]
200028e2:	685b      	ldr	r3, [r3, #4]
200028e4:	6053      	str	r3, [r2, #4]
200028e6:	4408      	add	r0, r1
200028e8:	6010      	str	r0, [r2, #0]
200028ea:	e7da      	b.n	200028a2 <_free_r+0x22>
200028ec:	d902      	bls.n	200028f4 <_free_r+0x74>
200028ee:	230c      	movs	r3, #12
200028f0:	602b      	str	r3, [r5, #0]
200028f2:	e7d6      	b.n	200028a2 <_free_r+0x22>
200028f4:	6820      	ldr	r0, [r4, #0]
200028f6:	1821      	adds	r1, r4, r0
200028f8:	428b      	cmp	r3, r1
200028fa:	bf04      	itt	eq
200028fc:	6819      	ldreq	r1, [r3, #0]
200028fe:	685b      	ldreq	r3, [r3, #4]
20002900:	6063      	str	r3, [r4, #4]
20002902:	bf04      	itt	eq
20002904:	1809      	addeq	r1, r1, r0
20002906:	6021      	streq	r1, [r4, #0]
20002908:	6054      	str	r4, [r2, #4]
2000290a:	e7ca      	b.n	200028a2 <_free_r+0x22>
2000290c:	bd38      	pop	{r3, r4, r5, pc}
2000290e:	bf00      	nop
20002910:	20002f6c 	.word	0x20002f6c

20002914 <malloc>:
20002914:	4b02      	ldr	r3, [pc, #8]	@ (20002920 <malloc+0xc>)
20002916:	4601      	mov	r1, r0
20002918:	6818      	ldr	r0, [r3, #0]
2000291a:	f000 b82d 	b.w	20002978 <_malloc_r>
2000291e:	bf00      	nop
20002920:	20002cc8 	.word	0x20002cc8

20002924 <free>:
20002924:	4b02      	ldr	r3, [pc, #8]	@ (20002930 <free+0xc>)
20002926:	4601      	mov	r1, r0
20002928:	6818      	ldr	r0, [r3, #0]
2000292a:	f7ff bfa9 	b.w	20002880 <_free_r>
2000292e:	bf00      	nop
20002930:	20002cc8 	.word	0x20002cc8

20002934 <sbrk_aligned>:
20002934:	b570      	push	{r4, r5, r6, lr}
20002936:	4e0f      	ldr	r6, [pc, #60]	@ (20002974 <sbrk_aligned+0x40>)
20002938:	460c      	mov	r4, r1
2000293a:	6831      	ldr	r1, [r6, #0]
2000293c:	4605      	mov	r5, r0
2000293e:	b911      	cbnz	r1, 20002946 <sbrk_aligned+0x12>
20002940:	f000 f910 	bl	20002b64 <_sbrk_r>
20002944:	6030      	str	r0, [r6, #0]
20002946:	4621      	mov	r1, r4
20002948:	4628      	mov	r0, r5
2000294a:	f000 f90b 	bl	20002b64 <_sbrk_r>
2000294e:	1c43      	adds	r3, r0, #1
20002950:	d103      	bne.n	2000295a <sbrk_aligned+0x26>
20002952:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
20002956:	4620      	mov	r0, r4
20002958:	bd70      	pop	{r4, r5, r6, pc}
2000295a:	1cc4      	adds	r4, r0, #3
2000295c:	f024 0403 	bic.w	r4, r4, #3
20002960:	42a0      	cmp	r0, r4
20002962:	d0f8      	beq.n	20002956 <sbrk_aligned+0x22>
20002964:	1a21      	subs	r1, r4, r0
20002966:	4628      	mov	r0, r5
20002968:	f000 f8fc 	bl	20002b64 <_sbrk_r>
2000296c:	3001      	adds	r0, #1
2000296e:	d1f2      	bne.n	20002956 <sbrk_aligned+0x22>
20002970:	e7ef      	b.n	20002952 <sbrk_aligned+0x1e>
20002972:	bf00      	nop
20002974:	20002f68 	.word	0x20002f68

20002978 <_malloc_r>:
20002978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2000297c:	1ccd      	adds	r5, r1, #3
2000297e:	f025 0503 	bic.w	r5, r5, #3
20002982:	3508      	adds	r5, #8
20002984:	2d0c      	cmp	r5, #12
20002986:	bf38      	it	cc
20002988:	250c      	movcc	r5, #12
2000298a:	2d00      	cmp	r5, #0
2000298c:	4606      	mov	r6, r0
2000298e:	db01      	blt.n	20002994 <_malloc_r+0x1c>
20002990:	42a9      	cmp	r1, r5
20002992:	d904      	bls.n	2000299e <_malloc_r+0x26>
20002994:	230c      	movs	r3, #12
20002996:	6033      	str	r3, [r6, #0]
20002998:	2000      	movs	r0, #0
2000299a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2000299e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 20002a74 <_malloc_r+0xfc>
200029a2:	f000 f869 	bl	20002a78 <__malloc_lock>
200029a6:	f8d8 3000 	ldr.w	r3, [r8]
200029aa:	461c      	mov	r4, r3
200029ac:	bb44      	cbnz	r4, 20002a00 <_malloc_r+0x88>
200029ae:	4629      	mov	r1, r5
200029b0:	4630      	mov	r0, r6
200029b2:	f7ff ffbf 	bl	20002934 <sbrk_aligned>
200029b6:	1c43      	adds	r3, r0, #1
200029b8:	4604      	mov	r4, r0
200029ba:	d158      	bne.n	20002a6e <_malloc_r+0xf6>
200029bc:	f8d8 4000 	ldr.w	r4, [r8]
200029c0:	4627      	mov	r7, r4
200029c2:	2f00      	cmp	r7, #0
200029c4:	d143      	bne.n	20002a4e <_malloc_r+0xd6>
200029c6:	2c00      	cmp	r4, #0
200029c8:	d04b      	beq.n	20002a62 <_malloc_r+0xea>
200029ca:	6823      	ldr	r3, [r4, #0]
200029cc:	4639      	mov	r1, r7
200029ce:	4630      	mov	r0, r6
200029d0:	eb04 0903 	add.w	r9, r4, r3
200029d4:	f000 f8c6 	bl	20002b64 <_sbrk_r>
200029d8:	4581      	cmp	r9, r0
200029da:	d142      	bne.n	20002a62 <_malloc_r+0xea>
200029dc:	6821      	ldr	r1, [r4, #0]
200029de:	1a6d      	subs	r5, r5, r1
200029e0:	4629      	mov	r1, r5
200029e2:	4630      	mov	r0, r6
200029e4:	f7ff ffa6 	bl	20002934 <sbrk_aligned>
200029e8:	3001      	adds	r0, #1
200029ea:	d03a      	beq.n	20002a62 <_malloc_r+0xea>
200029ec:	6823      	ldr	r3, [r4, #0]
200029ee:	442b      	add	r3, r5
200029f0:	6023      	str	r3, [r4, #0]
200029f2:	f8d8 3000 	ldr.w	r3, [r8]
200029f6:	685a      	ldr	r2, [r3, #4]
200029f8:	bb62      	cbnz	r2, 20002a54 <_malloc_r+0xdc>
200029fa:	f8c8 7000 	str.w	r7, [r8]
200029fe:	e00f      	b.n	20002a20 <_malloc_r+0xa8>
20002a00:	6822      	ldr	r2, [r4, #0]
20002a02:	1b52      	subs	r2, r2, r5
20002a04:	d420      	bmi.n	20002a48 <_malloc_r+0xd0>
20002a06:	2a0b      	cmp	r2, #11
20002a08:	d917      	bls.n	20002a3a <_malloc_r+0xc2>
20002a0a:	1961      	adds	r1, r4, r5
20002a0c:	42a3      	cmp	r3, r4
20002a0e:	6025      	str	r5, [r4, #0]
20002a10:	bf18      	it	ne
20002a12:	6059      	strne	r1, [r3, #4]
20002a14:	6863      	ldr	r3, [r4, #4]
20002a16:	bf08      	it	eq
20002a18:	f8c8 1000 	streq.w	r1, [r8]
20002a1c:	5162      	str	r2, [r4, r5]
20002a1e:	604b      	str	r3, [r1, #4]
20002a20:	4630      	mov	r0, r6
20002a22:	f000 f82f 	bl	20002a84 <__malloc_unlock>
20002a26:	f104 000b 	add.w	r0, r4, #11
20002a2a:	1d23      	adds	r3, r4, #4
20002a2c:	f020 0007 	bic.w	r0, r0, #7
20002a30:	1ac2      	subs	r2, r0, r3
20002a32:	bf1c      	itt	ne
20002a34:	1a1b      	subne	r3, r3, r0
20002a36:	50a3      	strne	r3, [r4, r2]
20002a38:	e7af      	b.n	2000299a <_malloc_r+0x22>
20002a3a:	6862      	ldr	r2, [r4, #4]
20002a3c:	42a3      	cmp	r3, r4
20002a3e:	bf0c      	ite	eq
20002a40:	f8c8 2000 	streq.w	r2, [r8]
20002a44:	605a      	strne	r2, [r3, #4]
20002a46:	e7eb      	b.n	20002a20 <_malloc_r+0xa8>
20002a48:	4623      	mov	r3, r4
20002a4a:	6864      	ldr	r4, [r4, #4]
20002a4c:	e7ae      	b.n	200029ac <_malloc_r+0x34>
20002a4e:	463c      	mov	r4, r7
20002a50:	687f      	ldr	r7, [r7, #4]
20002a52:	e7b6      	b.n	200029c2 <_malloc_r+0x4a>
20002a54:	461a      	mov	r2, r3
20002a56:	685b      	ldr	r3, [r3, #4]
20002a58:	42a3      	cmp	r3, r4
20002a5a:	d1fb      	bne.n	20002a54 <_malloc_r+0xdc>
20002a5c:	2300      	movs	r3, #0
20002a5e:	6053      	str	r3, [r2, #4]
20002a60:	e7de      	b.n	20002a20 <_malloc_r+0xa8>
20002a62:	230c      	movs	r3, #12
20002a64:	6033      	str	r3, [r6, #0]
20002a66:	4630      	mov	r0, r6
20002a68:	f000 f80c 	bl	20002a84 <__malloc_unlock>
20002a6c:	e794      	b.n	20002998 <_malloc_r+0x20>
20002a6e:	6005      	str	r5, [r0, #0]
20002a70:	e7d6      	b.n	20002a20 <_malloc_r+0xa8>
20002a72:	bf00      	nop
20002a74:	20002f6c 	.word	0x20002f6c

20002a78 <__malloc_lock>:
20002a78:	4801      	ldr	r0, [pc, #4]	@ (20002a80 <__malloc_lock+0x8>)
20002a7a:	f7ff be7c 	b.w	20002776 <__retarget_lock_acquire_recursive>
20002a7e:	bf00      	nop
20002a80:	20002f60 	.word	0x20002f60

20002a84 <__malloc_unlock>:
20002a84:	4801      	ldr	r0, [pc, #4]	@ (20002a8c <__malloc_unlock+0x8>)
20002a86:	f7ff be7c 	b.w	20002782 <__retarget_lock_release_recursive>
20002a8a:	bf00      	nop
20002a8c:	20002f60 	.word	0x20002f60

20002a90 <__sread>:
20002a90:	b510      	push	{r4, lr}
20002a92:	460c      	mov	r4, r1
20002a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20002a98:	f000 f852 	bl	20002b40 <_read_r>
20002a9c:	2800      	cmp	r0, #0
20002a9e:	bfab      	itete	ge
20002aa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
20002aa2:	89a3      	ldrhlt	r3, [r4, #12]
20002aa4:	181b      	addge	r3, r3, r0
20002aa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
20002aaa:	bfac      	ite	ge
20002aac:	6563      	strge	r3, [r4, #84]	@ 0x54
20002aae:	81a3      	strhlt	r3, [r4, #12]
20002ab0:	bd10      	pop	{r4, pc}

20002ab2 <__seofread>:
20002ab2:	2000      	movs	r0, #0
20002ab4:	4770      	bx	lr

20002ab6 <__swrite>:
20002ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20002aba:	461f      	mov	r7, r3
20002abc:	898b      	ldrh	r3, [r1, #12]
20002abe:	05db      	lsls	r3, r3, #23
20002ac0:	4605      	mov	r5, r0
20002ac2:	460c      	mov	r4, r1
20002ac4:	4616      	mov	r6, r2
20002ac6:	d505      	bpl.n	20002ad4 <__swrite+0x1e>
20002ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20002acc:	2302      	movs	r3, #2
20002ace:	2200      	movs	r2, #0
20002ad0:	f000 f824 	bl	20002b1c <_lseek_r>
20002ad4:	89a3      	ldrh	r3, [r4, #12]
20002ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
20002ada:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
20002ade:	81a3      	strh	r3, [r4, #12]
20002ae0:	4632      	mov	r2, r6
20002ae2:	463b      	mov	r3, r7
20002ae4:	4628      	mov	r0, r5
20002ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
20002aea:	f000 b84b 	b.w	20002b84 <_write_r>

20002aee <__sseek>:
20002aee:	b510      	push	{r4, lr}
20002af0:	460c      	mov	r4, r1
20002af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20002af6:	f000 f811 	bl	20002b1c <_lseek_r>
20002afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
20002afe:	1c42      	adds	r2, r0, #1
20002b00:	bf0b      	itete	eq
20002b02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
20002b06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
20002b0a:	81a3      	strheq	r3, [r4, #12]
20002b0c:	81a3      	strhne	r3, [r4, #12]
20002b0e:	bf18      	it	ne
20002b10:	6560      	strne	r0, [r4, #84]	@ 0x54
20002b12:	bd10      	pop	{r4, pc}

20002b14 <__sclose>:
20002b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20002b18:	f000 b846 	b.w	20002ba8 <_close_r>

20002b1c <_lseek_r>:
20002b1c:	b538      	push	{r3, r4, r5, lr}
20002b1e:	4d07      	ldr	r5, [pc, #28]	@ (20002b3c <_lseek_r+0x20>)
20002b20:	4604      	mov	r4, r0
20002b22:	4608      	mov	r0, r1
20002b24:	4611      	mov	r1, r2
20002b26:	2200      	movs	r2, #0
20002b28:	602a      	str	r2, [r5, #0]
20002b2a:	461a      	mov	r2, r3
20002b2c:	f7ff f97a 	bl	20001e24 <_lseek>
20002b30:	1c43      	adds	r3, r0, #1
20002b32:	d102      	bne.n	20002b3a <_lseek_r+0x1e>
20002b34:	682b      	ldr	r3, [r5, #0]
20002b36:	b103      	cbz	r3, 20002b3a <_lseek_r+0x1e>
20002b38:	6023      	str	r3, [r4, #0]
20002b3a:	bd38      	pop	{r3, r4, r5, pc}
20002b3c:	20002f64 	.word	0x20002f64

20002b40 <_read_r>:
20002b40:	b538      	push	{r3, r4, r5, lr}
20002b42:	4d07      	ldr	r5, [pc, #28]	@ (20002b60 <_read_r+0x20>)
20002b44:	4604      	mov	r4, r0
20002b46:	4608      	mov	r0, r1
20002b48:	4611      	mov	r1, r2
20002b4a:	2200      	movs	r2, #0
20002b4c:	602a      	str	r2, [r5, #0]
20002b4e:	461a      	mov	r2, r3
20002b50:	f7ff f956 	bl	20001e00 <_read>
20002b54:	1c43      	adds	r3, r0, #1
20002b56:	d102      	bne.n	20002b5e <_read_r+0x1e>
20002b58:	682b      	ldr	r3, [r5, #0]
20002b5a:	b103      	cbz	r3, 20002b5e <_read_r+0x1e>
20002b5c:	6023      	str	r3, [r4, #0]
20002b5e:	bd38      	pop	{r3, r4, r5, pc}
20002b60:	20002f64 	.word	0x20002f64

20002b64 <_sbrk_r>:
20002b64:	b538      	push	{r3, r4, r5, lr}
20002b66:	4d06      	ldr	r5, [pc, #24]	@ (20002b80 <_sbrk_r+0x1c>)
20002b68:	2300      	movs	r3, #0
20002b6a:	4604      	mov	r4, r0
20002b6c:	4608      	mov	r0, r1
20002b6e:	602b      	str	r3, [r5, #0]
20002b70:	f7ff f8ec 	bl	20001d4c <_sbrk>
20002b74:	1c43      	adds	r3, r0, #1
20002b76:	d102      	bne.n	20002b7e <_sbrk_r+0x1a>
20002b78:	682b      	ldr	r3, [r5, #0]
20002b7a:	b103      	cbz	r3, 20002b7e <_sbrk_r+0x1a>
20002b7c:	6023      	str	r3, [r4, #0]
20002b7e:	bd38      	pop	{r3, r4, r5, pc}
20002b80:	20002f64 	.word	0x20002f64

20002b84 <_write_r>:
20002b84:	b538      	push	{r3, r4, r5, lr}
20002b86:	4d07      	ldr	r5, [pc, #28]	@ (20002ba4 <_write_r+0x20>)
20002b88:	4604      	mov	r4, r0
20002b8a:	4608      	mov	r0, r1
20002b8c:	4611      	mov	r1, r2
20002b8e:	2200      	movs	r2, #0
20002b90:	602a      	str	r2, [r5, #0]
20002b92:	461a      	mov	r2, r3
20002b94:	f7ff f92a 	bl	20001dec <_write>
20002b98:	1c43      	adds	r3, r0, #1
20002b9a:	d102      	bne.n	20002ba2 <_write_r+0x1e>
20002b9c:	682b      	ldr	r3, [r5, #0]
20002b9e:	b103      	cbz	r3, 20002ba2 <_write_r+0x1e>
20002ba0:	6023      	str	r3, [r4, #0]
20002ba2:	bd38      	pop	{r3, r4, r5, pc}
20002ba4:	20002f64 	.word	0x20002f64

20002ba8 <_close_r>:
20002ba8:	b538      	push	{r3, r4, r5, lr}
20002baa:	4d06      	ldr	r5, [pc, #24]	@ (20002bc4 <_close_r+0x1c>)
20002bac:	2300      	movs	r3, #0
20002bae:	4604      	mov	r4, r0
20002bb0:	4608      	mov	r0, r1
20002bb2:	602b      	str	r3, [r5, #0]
20002bb4:	f7ff f92c 	bl	20001e10 <_close>
20002bb8:	1c43      	adds	r3, r0, #1
20002bba:	d102      	bne.n	20002bc2 <_close_r+0x1a>
20002bbc:	682b      	ldr	r3, [r5, #0]
20002bbe:	b103      	cbz	r3, 20002bc2 <_close_r+0x1a>
20002bc0:	6023      	str	r3, [r4, #0]
20002bc2:	bd38      	pop	{r3, r4, r5, pc}
20002bc4:	20002f64 	.word	0x20002f64

20002bc8 <gpio_d>:
20002bc8:	40020c00                                ...@

20002bcc <gpio_e>:
20002bcc:	40021000                                ...@

20002bd0 <gpiod>:
20002bd0:	40020c00                                ...@

20002bd4 <gpioe>:
20002bd4:	40021000                                ...@

20002bd8 <systick>:
20002bd8:	e000e010                                ....

20002bdc <ball_geometry>:
20002bdc:	0000000c 00000004 00000004 02000100     ................
20002bec:	01010001 03010201 01020002 03020202     ................
20002bfc:	02030103 00000000 00000000 00000000     ................
	...

20002c28 <paddle_geometry>:
20002c28:	0000000a 0000000a 00000002 00010000     ................
20002c38:	00030002 00050004 00070006 00090008     ................
	...

20002c74 <ball>:
20002c74:	20002bdc 00000000 00000000 00000001     .+. ............
20002c84:	00000001 200009a3 20000a17 20000ebd     ....... ... ... 
20002c94:	20000efb                                ... 

20002c98 <paddle>:
20002c98:	20002c28 00000000 00000000 0000003b     (,. ........;...
20002ca8:	0000003a 200009a3 20000a17 20000ebd     :...... ... ... 
20002cb8:	20000efb                                ... 

20002cbc <__sglue>:
20002cbc:	00000000 00000003 20002e20              ........ .. 

20002cc8 <_impure_ptr>:
20002cc8:	20002ccc                                .,. 

20002ccc <_impure_data>:
20002ccc:	00000000 20002e20 20002e88 20002ef0     .... .. ... ... 
	...
20002d18:	726f6353 00203a65 736e6977 00000021     Score: .wins!...
20002d28:	636c6557 20656d6f 53206f74 72657075     Welcome to Super
20002d38:	676e6f70 00000021 73657250 20352073     pong!...Press 5 
20002d48:	73206f74 74726174 0000002e              to start....

20002d54 <DELAY_VALUE>:
20002d54:	00000029                                )...

20002d58 <KEYCODE>:
20002d58:	0a030201 0b060504 0c090807 0d0f000e     ................

20002d68 <KEYCODE>:
20002d68:	0a030201 0b060504 0c090807 0d0f000e     ................
20002d78:	00006c01 00007201 00007501 00006401     .l...r...u...d..
20002d88:	20756f59 216e6957 00000000 656d6147     You Win!....Game
20002d98:	65764f20 00002172 726f6353 00203a65      Over!..Score: .
20002da8:	636c6557 20656d6f 42206f74 6b616572     Welcome to Break
20002db8:	2174756f 00000000 73657250 20352073     out!....Press 5 
20002dc8:	73206f74 74726174 0000002e 6576694c     to start....Live
20002dd8:	00203a73 61657242 74756f6b 4c202d20     s: .Breakout - L
20002de8:	00002076 6576654c 6f43206c 656c706d     v ..Level Comple
20002df8:	00216574 7478654e 76654c20 2e2e6c65     te!.Next Level..
20002e08:	0000002e                                ....

20002e0c <__bss_start__>:
	...

20002e14 <col_buffer>:
20002e14:	00000000 	.word	0x00000000

20002e18 <col_count>:
20002e18:	00000000 	.word	0x00000000

20002e1c <heap_end>:
20002e1c:	00000000                                ....

20002e20 <__sf>:
	...

20002f58 <__stdio_exit_handler>:
20002f58:	00000000                                ....

20002f5c <__lock___arc4random_mutex>:
	...

20002f5d <__lock___dd_hash_mutex>:
	...

20002f5e <__lock___tz_mutex>:
	...

20002f5f <__lock___env_recursive_mutex>:
	...

20002f60 <__lock___malloc_recursive_mutex>:
	...

20002f61 <__lock___at_quick_exit_mutex>:
	...

20002f62 <__lock___atexit_recursive_mutex>:
	...

20002f63 <__lock___sfp_recursive_mutex>:
	...

20002f64 <errno>:
20002f64:	00000000                                ....

20002f68 <__malloc_sbrk_start>:
20002f68:	00000000                                ....

20002f6c <__malloc_free_list>:
20002f6c:	00000000                                ....

20002f70 <__bss_end__>:
	...

20003000 <__heap_low>:
	...

20003400 <__heap_top>:
	...
