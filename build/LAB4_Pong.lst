
build/LAB4_Pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
20000000:	4807      	ldr	r0, [pc, #28]	@ (20000020 <startup+0x20>)
20000002:	4685      	mov	sp, r0
20000004:	f002 f960 	bl	200022c8 <md407_runtime_clockinit>
20000008:	f002 f92a 	bl	20002260 <md407_runtime_portinit>
2000000c:	f002 f892 	bl	20002134 <md407_runtime_uartinit>
20000010:	f002 f838 	bl	20002084 <_crt_init>
20000014:	f001 fad5 	bl	200015c2 <main>
20000018:	f002 f864 	bl	200020e4 <_crt_deinit>
2000001c:	e7fe      	b.n	2000001c <startup+0x1c>
2000001e:	0000      	.short	0x0000
20000020:	20004800 	.word	0x20004800

20000024 <ascii_ctrl_bit_set>:
20000024:	b580      	push	{r7, lr}
20000026:	b084      	sub	sp, #16
20000028:	af00      	add	r7, sp, #0
2000002a:	0002      	movs	r2, r0
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	701a      	strb	r2, [r3, #0]
20000030:	4b0a      	ldr	r3, [pc, #40]	@ (2000005c <ascii_ctrl_bit_set+0x38>)
20000032:	681a      	ldr	r2, [r3, #0]
20000034:	210f      	movs	r1, #15
20000036:	187b      	adds	r3, r7, r1
20000038:	7d12      	ldrb	r2, [r2, #20]
2000003a:	701a      	strb	r2, [r3, #0]
2000003c:	1dfa      	adds	r2, r7, #7
2000003e:	187b      	adds	r3, r7, r1
20000040:	7812      	ldrb	r2, [r2, #0]
20000042:	781b      	ldrb	r3, [r3, #0]
20000044:	4313      	orrs	r3, r2
20000046:	b2da      	uxtb	r2, r3
20000048:	4b04      	ldr	r3, [pc, #16]	@ (2000005c <ascii_ctrl_bit_set+0x38>)
2000004a:	681b      	ldr	r3, [r3, #0]
2000004c:	2104      	movs	r1, #4
2000004e:	430a      	orrs	r2, r1
20000050:	b2d2      	uxtb	r2, r2
20000052:	751a      	strb	r2, [r3, #20]
20000054:	46c0      	nop			@ (mov r8, r8)
20000056:	46bd      	mov	sp, r7
20000058:	b004      	add	sp, #16
2000005a:	bd80      	pop	{r7, pc}
2000005c:	20002ec8 	.word	0x20002ec8

20000060 <ascii_ctrl_bit_clear>:
20000060:	b580      	push	{r7, lr}
20000062:	b084      	sub	sp, #16
20000064:	af00      	add	r7, sp, #0
20000066:	0002      	movs	r2, r0
20000068:	1dfb      	adds	r3, r7, #7
2000006a:	701a      	strb	r2, [r3, #0]
2000006c:	4b0e      	ldr	r3, [pc, #56]	@ (200000a8 <ascii_ctrl_bit_clear+0x48>)
2000006e:	681a      	ldr	r2, [r3, #0]
20000070:	210f      	movs	r1, #15
20000072:	187b      	adds	r3, r7, r1
20000074:	7d12      	ldrb	r2, [r2, #20]
20000076:	701a      	strb	r2, [r3, #0]
20000078:	1dfb      	adds	r3, r7, #7
2000007a:	781b      	ldrb	r3, [r3, #0]
2000007c:	b25b      	sxtb	r3, r3
2000007e:	43db      	mvns	r3, r3
20000080:	b25b      	sxtb	r3, r3
20000082:	187a      	adds	r2, r7, r1
20000084:	7812      	ldrb	r2, [r2, #0]
20000086:	b252      	sxtb	r2, r2
20000088:	4013      	ands	r3, r2
2000008a:	b25a      	sxtb	r2, r3
2000008c:	187b      	adds	r3, r7, r1
2000008e:	701a      	strb	r2, [r3, #0]
20000090:	4b05      	ldr	r3, [pc, #20]	@ (200000a8 <ascii_ctrl_bit_clear+0x48>)
20000092:	681b      	ldr	r3, [r3, #0]
20000094:	187a      	adds	r2, r7, r1
20000096:	7812      	ldrb	r2, [r2, #0]
20000098:	2104      	movs	r1, #4
2000009a:	430a      	orrs	r2, r1
2000009c:	b2d2      	uxtb	r2, r2
2000009e:	751a      	strb	r2, [r3, #20]
200000a0:	46c0      	nop			@ (mov r8, r8)
200000a2:	46bd      	mov	sp, r7
200000a4:	b004      	add	sp, #16
200000a6:	bd80      	pop	{r7, pc}
200000a8:	20002ec8 	.word	0x20002ec8

200000ac <ascii_write_controller>:
200000ac:	b580      	push	{r7, lr}
200000ae:	b082      	sub	sp, #8
200000b0:	af00      	add	r7, sp, #0
200000b2:	0002      	movs	r2, r0
200000b4:	1dfb      	adds	r3, r7, #7
200000b6:	701a      	strb	r2, [r3, #0]
200000b8:	2040      	movs	r0, #64	@ 0x40
200000ba:	f7ff ffb3 	bl	20000024 <ascii_ctrl_bit_set>
200000be:	4b06      	ldr	r3, [pc, #24]	@ (200000d8 <ascii_write_controller+0x2c>)
200000c0:	681b      	ldr	r3, [r3, #0]
200000c2:	1dfa      	adds	r2, r7, #7
200000c4:	7812      	ldrb	r2, [r2, #0]
200000c6:	755a      	strb	r2, [r3, #21]
200000c8:	2040      	movs	r0, #64	@ 0x40
200000ca:	f7ff ffc9 	bl	20000060 <ascii_ctrl_bit_clear>
200000ce:	46c0      	nop			@ (mov r8, r8)
200000d0:	46bd      	mov	sp, r7
200000d2:	b002      	add	sp, #8
200000d4:	bd80      	pop	{r7, pc}
200000d6:	46c0      	nop			@ (mov r8, r8)
200000d8:	20002ec8 	.word	0x20002ec8

200000dc <ascii_read_controller>:
200000dc:	b580      	push	{r7, lr}
200000de:	b082      	sub	sp, #8
200000e0:	af00      	add	r7, sp, #0
200000e2:	2040      	movs	r0, #64	@ 0x40
200000e4:	f7ff ff9e 	bl	20000024 <ascii_ctrl_bit_set>
200000e8:	4b06      	ldr	r3, [pc, #24]	@ (20000104 <ascii_read_controller+0x28>)
200000ea:	681a      	ldr	r2, [r3, #0]
200000ec:	1dfb      	adds	r3, r7, #7
200000ee:	7c52      	ldrb	r2, [r2, #17]
200000f0:	701a      	strb	r2, [r3, #0]
200000f2:	2040      	movs	r0, #64	@ 0x40
200000f4:	f7ff ffb4 	bl	20000060 <ascii_ctrl_bit_clear>
200000f8:	1dfb      	adds	r3, r7, #7
200000fa:	781b      	ldrb	r3, [r3, #0]
200000fc:	0018      	movs	r0, r3
200000fe:	46bd      	mov	sp, r7
20000100:	b002      	add	sp, #8
20000102:	bd80      	pop	{r7, pc}
20000104:	20002ec8 	.word	0x20002ec8

20000108 <ascii_write_cmd>:
20000108:	b580      	push	{r7, lr}
2000010a:	b082      	sub	sp, #8
2000010c:	af00      	add	r7, sp, #0
2000010e:	0002      	movs	r2, r0
20000110:	1dfb      	adds	r3, r7, #7
20000112:	701a      	strb	r2, [r3, #0]
20000114:	2001      	movs	r0, #1
20000116:	f7ff ffa3 	bl	20000060 <ascii_ctrl_bit_clear>
2000011a:	2002      	movs	r0, #2
2000011c:	f7ff ffa0 	bl	20000060 <ascii_ctrl_bit_clear>
20000120:	1dfb      	adds	r3, r7, #7
20000122:	781b      	ldrb	r3, [r3, #0]
20000124:	0018      	movs	r0, r3
20000126:	f7ff ffc1 	bl	200000ac <ascii_write_controller>
2000012a:	46c0      	nop			@ (mov r8, r8)
2000012c:	46bd      	mov	sp, r7
2000012e:	b002      	add	sp, #8
20000130:	bd80      	pop	{r7, pc}

20000132 <ascii_write_data>:
20000132:	b580      	push	{r7, lr}
20000134:	b082      	sub	sp, #8
20000136:	af00      	add	r7, sp, #0
20000138:	0002      	movs	r2, r0
2000013a:	1dfb      	adds	r3, r7, #7
2000013c:	701a      	strb	r2, [r3, #0]
2000013e:	2001      	movs	r0, #1
20000140:	f7ff ff70 	bl	20000024 <ascii_ctrl_bit_set>
20000144:	2002      	movs	r0, #2
20000146:	f7ff ff8b 	bl	20000060 <ascii_ctrl_bit_clear>
2000014a:	1dfb      	adds	r3, r7, #7
2000014c:	781b      	ldrb	r3, [r3, #0]
2000014e:	0018      	movs	r0, r3
20000150:	f7ff ffac 	bl	200000ac <ascii_write_controller>
20000154:	46c0      	nop			@ (mov r8, r8)
20000156:	46bd      	mov	sp, r7
20000158:	b002      	add	sp, #8
2000015a:	bd80      	pop	{r7, pc}

2000015c <ascii_read_status>:
2000015c:	b590      	push	{r4, r7, lr}
2000015e:	b083      	sub	sp, #12
20000160:	af00      	add	r7, sp, #0
20000162:	4b0c      	ldr	r3, [pc, #48]	@ (20000194 <ascii_read_status+0x38>)
20000164:	681b      	ldr	r3, [r3, #0]
20000166:	2200      	movs	r2, #0
20000168:	805a      	strh	r2, [r3, #2]
2000016a:	2001      	movs	r0, #1
2000016c:	f7ff ff78 	bl	20000060 <ascii_ctrl_bit_clear>
20000170:	2002      	movs	r0, #2
20000172:	f7ff ff57 	bl	20000024 <ascii_ctrl_bit_set>
20000176:	1dfc      	adds	r4, r7, #7
20000178:	f7ff ffb0 	bl	200000dc <ascii_read_controller>
2000017c:	0003      	movs	r3, r0
2000017e:	7023      	strb	r3, [r4, #0]
20000180:	4b04      	ldr	r3, [pc, #16]	@ (20000194 <ascii_read_status+0x38>)
20000182:	681b      	ldr	r3, [r3, #0]
20000184:	4a04      	ldr	r2, [pc, #16]	@ (20000198 <ascii_read_status+0x3c>)
20000186:	805a      	strh	r2, [r3, #2]
20000188:	1dfb      	adds	r3, r7, #7
2000018a:	781b      	ldrb	r3, [r3, #0]
2000018c:	0018      	movs	r0, r3
2000018e:	46bd      	mov	sp, r7
20000190:	b003      	add	sp, #12
20000192:	bd90      	pop	{r4, r7, pc}
20000194:	20002ec8 	.word	0x20002ec8
20000198:	00005555 	.word	0x00005555

2000019c <ascii_read_data>:
2000019c:	b590      	push	{r4, r7, lr}
2000019e:	b083      	sub	sp, #12
200001a0:	af00      	add	r7, sp, #0
200001a2:	4b0c      	ldr	r3, [pc, #48]	@ (200001d4 <ascii_read_data+0x38>)
200001a4:	681b      	ldr	r3, [r3, #0]
200001a6:	2200      	movs	r2, #0
200001a8:	805a      	strh	r2, [r3, #2]
200001aa:	2001      	movs	r0, #1
200001ac:	f7ff ff3a 	bl	20000024 <ascii_ctrl_bit_set>
200001b0:	2002      	movs	r0, #2
200001b2:	f7ff ff37 	bl	20000024 <ascii_ctrl_bit_set>
200001b6:	1dfc      	adds	r4, r7, #7
200001b8:	f7ff ff90 	bl	200000dc <ascii_read_controller>
200001bc:	0003      	movs	r3, r0
200001be:	7023      	strb	r3, [r4, #0]
200001c0:	4b04      	ldr	r3, [pc, #16]	@ (200001d4 <ascii_read_data+0x38>)
200001c2:	681b      	ldr	r3, [r3, #0]
200001c4:	4a04      	ldr	r2, [pc, #16]	@ (200001d8 <ascii_read_data+0x3c>)
200001c6:	805a      	strh	r2, [r3, #2]
200001c8:	1dfb      	adds	r3, r7, #7
200001ca:	781b      	ldrb	r3, [r3, #0]
200001cc:	0018      	movs	r0, r3
200001ce:	46bd      	mov	sp, r7
200001d0:	b003      	add	sp, #12
200001d2:	bd90      	pop	{r4, r7, pc}
200001d4:	20002ec8 	.word	0x20002ec8
200001d8:	00005555 	.word	0x00005555

200001dc <ascii_command>:
200001dc:	b580      	push	{r7, lr}
200001de:	b084      	sub	sp, #16
200001e0:	af00      	add	r7, sp, #0
200001e2:	60b9      	str	r1, [r7, #8]
200001e4:	607a      	str	r2, [r7, #4]
200001e6:	230f      	movs	r3, #15
200001e8:	18fb      	adds	r3, r7, r3
200001ea:	1c02      	adds	r2, r0, #0
200001ec:	701a      	strb	r2, [r3, #0]
200001ee:	46c0      	nop			@ (mov r8, r8)
200001f0:	f7ff ffb4 	bl	2000015c <ascii_read_status>
200001f4:	0003      	movs	r3, r0
200001f6:	001a      	movs	r2, r3
200001f8:	2380      	movs	r3, #128	@ 0x80
200001fa:	4013      	ands	r3, r2
200001fc:	2b80      	cmp	r3, #128	@ 0x80
200001fe:	d0f7      	beq.n	200001f0 <ascii_command+0x14>
20000200:	2008      	movs	r0, #8
20000202:	f000 f9a3 	bl	2000054c <delay_mikro>
20000206:	230f      	movs	r3, #15
20000208:	18fb      	adds	r3, r7, r3
2000020a:	781b      	ldrb	r3, [r3, #0]
2000020c:	0018      	movs	r0, r3
2000020e:	f7ff ff7b 	bl	20000108 <ascii_write_cmd>
20000212:	687a      	ldr	r2, [r7, #4]
20000214:	68bb      	ldr	r3, [r7, #8]
20000216:	0010      	movs	r0, r2
20000218:	4798      	blx	r3
2000021a:	46c0      	nop			@ (mov r8, r8)
2000021c:	46bd      	mov	sp, r7
2000021e:	b004      	add	sp, #16
20000220:	bd80      	pop	{r7, pc}

20000222 <ascii_data>:
20000222:	b580      	push	{r7, lr}
20000224:	b084      	sub	sp, #16
20000226:	af00      	add	r7, sp, #0
20000228:	60b9      	str	r1, [r7, #8]
2000022a:	607a      	str	r2, [r7, #4]
2000022c:	230f      	movs	r3, #15
2000022e:	18fb      	adds	r3, r7, r3
20000230:	1c02      	adds	r2, r0, #0
20000232:	701a      	strb	r2, [r3, #0]
20000234:	46c0      	nop			@ (mov r8, r8)
20000236:	f7ff ff91 	bl	2000015c <ascii_read_status>
2000023a:	0003      	movs	r3, r0
2000023c:	001a      	movs	r2, r3
2000023e:	2380      	movs	r3, #128	@ 0x80
20000240:	4013      	ands	r3, r2
20000242:	2b80      	cmp	r3, #128	@ 0x80
20000244:	d0f7      	beq.n	20000236 <ascii_data+0x14>
20000246:	2008      	movs	r0, #8
20000248:	f000 f980 	bl	2000054c <delay_mikro>
2000024c:	230f      	movs	r3, #15
2000024e:	18fb      	adds	r3, r7, r3
20000250:	781b      	ldrb	r3, [r3, #0]
20000252:	0018      	movs	r0, r3
20000254:	f7ff ff6d 	bl	20000132 <ascii_write_data>
20000258:	687a      	ldr	r2, [r7, #4]
2000025a:	68bb      	ldr	r3, [r7, #8]
2000025c:	0010      	movs	r0, r2
2000025e:	4798      	blx	r3
20000260:	46c0      	nop			@ (mov r8, r8)
20000262:	46bd      	mov	sp, r7
20000264:	b004      	add	sp, #16
20000266:	bd80      	pop	{r7, pc}

20000268 <ascii_init>:
20000268:	b580      	push	{r7, lr}
2000026a:	af00      	add	r7, sp, #0
2000026c:	4b0d      	ldr	r3, [pc, #52]	@ (200002a4 <ascii_init+0x3c>)
2000026e:	2228      	movs	r2, #40	@ 0x28
20000270:	0019      	movs	r1, r3
20000272:	2038      	movs	r0, #56	@ 0x38
20000274:	f7ff ffb2 	bl	200001dc <ascii_command>
20000278:	4b0a      	ldr	r3, [pc, #40]	@ (200002a4 <ascii_init+0x3c>)
2000027a:	2228      	movs	r2, #40	@ 0x28
2000027c:	0019      	movs	r1, r3
2000027e:	200e      	movs	r0, #14
20000280:	f7ff ffac 	bl	200001dc <ascii_command>
20000284:	4b08      	ldr	r3, [pc, #32]	@ (200002a8 <ascii_init+0x40>)
20000286:	2202      	movs	r2, #2
20000288:	0019      	movs	r1, r3
2000028a:	2001      	movs	r0, #1
2000028c:	f7ff ffa6 	bl	200001dc <ascii_command>
20000290:	4b04      	ldr	r3, [pc, #16]	@ (200002a4 <ascii_init+0x3c>)
20000292:	2228      	movs	r2, #40	@ 0x28
20000294:	0019      	movs	r1, r3
20000296:	2004      	movs	r0, #4
20000298:	f7ff ffa0 	bl	200001dc <ascii_command>
2000029c:	46c0      	nop			@ (mov r8, r8)
2000029e:	46bd      	mov	sp, r7
200002a0:	bd80      	pop	{r7, pc}
200002a2:	46c0      	nop			@ (mov r8, r8)
200002a4:	2000054d 	.word	0x2000054d
200002a8:	20000593 	.word	0x20000593

200002ac <ascii_goto>:
200002ac:	b580      	push	{r7, lr}
200002ae:	b084      	sub	sp, #16
200002b0:	af00      	add	r7, sp, #0
200002b2:	6078      	str	r0, [r7, #4]
200002b4:	6039      	str	r1, [r7, #0]
200002b6:	687b      	ldr	r3, [r7, #4]
200002b8:	3b01      	subs	r3, #1
200002ba:	60fb      	str	r3, [r7, #12]
200002bc:	683b      	ldr	r3, [r7, #0]
200002be:	2b02      	cmp	r3, #2
200002c0:	d102      	bne.n	200002c8 <ascii_goto+0x1c>
200002c2:	68fb      	ldr	r3, [r7, #12]
200002c4:	3340      	adds	r3, #64	@ 0x40
200002c6:	60fb      	str	r3, [r7, #12]
200002c8:	68fb      	ldr	r3, [r7, #12]
200002ca:	b2db      	uxtb	r3, r3
200002cc:	2280      	movs	r2, #128	@ 0x80
200002ce:	4252      	negs	r2, r2
200002d0:	4313      	orrs	r3, r2
200002d2:	b2db      	uxtb	r3, r3
200002d4:	0018      	movs	r0, r3
200002d6:	f7ff ff17 	bl	20000108 <ascii_write_cmd>
200002da:	46c0      	nop			@ (mov r8, r8)
200002dc:	46bd      	mov	sp, r7
200002de:	b004      	add	sp, #16
200002e0:	bd80      	pop	{r7, pc}

200002e2 <ascii_write_char>:
200002e2:	b580      	push	{r7, lr}
200002e4:	b082      	sub	sp, #8
200002e6:	af00      	add	r7, sp, #0
200002e8:	0002      	movs	r2, r0
200002ea:	1dfb      	adds	r3, r7, #7
200002ec:	701a      	strb	r2, [r3, #0]
200002ee:	4905      	ldr	r1, [pc, #20]	@ (20000304 <ascii_write_char+0x22>)
200002f0:	1dfb      	adds	r3, r7, #7
200002f2:	781b      	ldrb	r3, [r3, #0]
200002f4:	222b      	movs	r2, #43	@ 0x2b
200002f6:	0018      	movs	r0, r3
200002f8:	f7ff ff93 	bl	20000222 <ascii_data>
200002fc:	46c0      	nop			@ (mov r8, r8)
200002fe:	46bd      	mov	sp, r7
20000300:	b002      	add	sp, #8
20000302:	bd80      	pop	{r7, pc}
20000304:	2000054d 	.word	0x2000054d

20000308 <ascii_draw_score>:
20000308:	b580      	push	{r7, lr}
2000030a:	b082      	sub	sp, #8
2000030c:	af00      	add	r7, sp, #0
2000030e:	6078      	str	r0, [r7, #4]
20000310:	687b      	ldr	r3, [r7, #4]
20000312:	7c1b      	ldrb	r3, [r3, #16]
20000314:	3307      	adds	r3, #7
20000316:	2102      	movs	r1, #2
20000318:	0018      	movs	r0, r3
2000031a:	f7ff ffc7 	bl	200002ac <ascii_goto>
2000031e:	687b      	ldr	r3, [r7, #4]
20000320:	695b      	ldr	r3, [r3, #20]
20000322:	b2db      	uxtb	r3, r3
20000324:	3330      	adds	r3, #48	@ 0x30
20000326:	b2db      	uxtb	r3, r3
20000328:	0018      	movs	r0, r3
2000032a:	f7ff ffda 	bl	200002e2 <ascii_write_char>
2000032e:	46c0      	nop			@ (mov r8, r8)
20000330:	46bd      	mov	sp, r7
20000332:	b002      	add	sp, #8
20000334:	bd80      	pop	{r7, pc}

20000336 <ascii_draw_name>:
20000336:	b580      	push	{r7, lr}
20000338:	b084      	sub	sp, #16
2000033a:	af00      	add	r7, sp, #0
2000033c:	6078      	str	r0, [r7, #4]
2000033e:	687b      	ldr	r3, [r7, #4]
20000340:	7c1b      	ldrb	r3, [r3, #16]
20000342:	2101      	movs	r1, #1
20000344:	0018      	movs	r0, r3
20000346:	f7ff ffb1 	bl	200002ac <ascii_goto>
2000034a:	687b      	ldr	r3, [r7, #4]
2000034c:	60fb      	str	r3, [r7, #12]
2000034e:	e006      	b.n	2000035e <ascii_draw_name+0x28>
20000350:	68fb      	ldr	r3, [r7, #12]
20000352:	1c5a      	adds	r2, r3, #1
20000354:	60fa      	str	r2, [r7, #12]
20000356:	781b      	ldrb	r3, [r3, #0]
20000358:	0018      	movs	r0, r3
2000035a:	f7ff ffc2 	bl	200002e2 <ascii_write_char>
2000035e:	68fb      	ldr	r3, [r7, #12]
20000360:	781b      	ldrb	r3, [r3, #0]
20000362:	2b00      	cmp	r3, #0
20000364:	d1f4      	bne.n	20000350 <ascii_draw_name+0x1a>
20000366:	46c0      	nop			@ (mov r8, r8)
20000368:	46c0      	nop			@ (mov r8, r8)
2000036a:	46bd      	mov	sp, r7
2000036c:	b004      	add	sp, #16
2000036e:	bd80      	pop	{r7, pc}

20000370 <ascii_init_game>:
20000370:	b590      	push	{r4, r7, lr}
20000372:	b087      	sub	sp, #28
20000374:	af00      	add	r7, sp, #0
20000376:	6078      	str	r0, [r7, #4]
20000378:	6039      	str	r1, [r7, #0]
2000037a:	687b      	ldr	r3, [r7, #4]
2000037c:	0018      	movs	r0, r3
2000037e:	f7ff ffda 	bl	20000336 <ascii_draw_name>
20000382:	683b      	ldr	r3, [r7, #0]
20000384:	0018      	movs	r0, r3
20000386:	f7ff ffd6 	bl	20000336 <ascii_draw_name>
2000038a:	240c      	movs	r4, #12
2000038c:	193b      	adds	r3, r7, r4
2000038e:	4a18      	ldr	r2, [pc, #96]	@ (200003f0 <ascii_init_game+0x80>)
20000390:	ca03      	ldmia	r2!, {r0, r1}
20000392:	c303      	stmia	r3!, {r0, r1}
20000394:	687b      	ldr	r3, [r7, #4]
20000396:	7c1b      	ldrb	r3, [r3, #16]
20000398:	2102      	movs	r1, #2
2000039a:	0018      	movs	r0, r3
2000039c:	f7ff ff86 	bl	200002ac <ascii_goto>
200003a0:	193b      	adds	r3, r7, r4
200003a2:	617b      	str	r3, [r7, #20]
200003a4:	e006      	b.n	200003b4 <ascii_init_game+0x44>
200003a6:	697b      	ldr	r3, [r7, #20]
200003a8:	1c5a      	adds	r2, r3, #1
200003aa:	617a      	str	r2, [r7, #20]
200003ac:	781b      	ldrb	r3, [r3, #0]
200003ae:	0018      	movs	r0, r3
200003b0:	f7ff ff97 	bl	200002e2 <ascii_write_char>
200003b4:	697b      	ldr	r3, [r7, #20]
200003b6:	781b      	ldrb	r3, [r3, #0]
200003b8:	2b00      	cmp	r3, #0
200003ba:	d1f4      	bne.n	200003a6 <ascii_init_game+0x36>
200003bc:	683b      	ldr	r3, [r7, #0]
200003be:	7c1b      	ldrb	r3, [r3, #16]
200003c0:	2102      	movs	r1, #2
200003c2:	0018      	movs	r0, r3
200003c4:	f7ff ff72 	bl	200002ac <ascii_goto>
200003c8:	230c      	movs	r3, #12
200003ca:	18fb      	adds	r3, r7, r3
200003cc:	617b      	str	r3, [r7, #20]
200003ce:	e006      	b.n	200003de <ascii_init_game+0x6e>
200003d0:	697b      	ldr	r3, [r7, #20]
200003d2:	1c5a      	adds	r2, r3, #1
200003d4:	617a      	str	r2, [r7, #20]
200003d6:	781b      	ldrb	r3, [r3, #0]
200003d8:	0018      	movs	r0, r3
200003da:	f7ff ff82 	bl	200002e2 <ascii_write_char>
200003de:	697b      	ldr	r3, [r7, #20]
200003e0:	781b      	ldrb	r3, [r3, #0]
200003e2:	2b00      	cmp	r3, #0
200003e4:	d1f4      	bne.n	200003d0 <ascii_init_game+0x60>
200003e6:	46c0      	nop			@ (mov r8, r8)
200003e8:	46c0      	nop			@ (mov r8, r8)
200003ea:	46bd      	mov	sp, r7
200003ec:	b007      	add	sp, #28
200003ee:	bd90      	pop	{r4, r7, pc}
200003f0:	20003014 	.word	0x20003014

200003f4 <ascii_player_wins>:
200003f4:	b580      	push	{r7, lr}
200003f6:	b086      	sub	sp, #24
200003f8:	af00      	add	r7, sp, #0
200003fa:	6078      	str	r0, [r7, #4]
200003fc:	f000 f8f9 	bl	200005f2 <graphic_clear_screen>
20000400:	230c      	movs	r3, #12
20000402:	18fb      	adds	r3, r7, r3
20000404:	4a15      	ldr	r2, [pc, #84]	@ (2000045c <ascii_player_wins+0x68>)
20000406:	6811      	ldr	r1, [r2, #0]
20000408:	6019      	str	r1, [r3, #0]
2000040a:	8892      	ldrh	r2, [r2, #4]
2000040c:	809a      	strh	r2, [r3, #4]
2000040e:	2101      	movs	r1, #1
20000410:	2001      	movs	r0, #1
20000412:	f7ff ff4b 	bl	200002ac <ascii_goto>
20000416:	687b      	ldr	r3, [r7, #4]
20000418:	617b      	str	r3, [r7, #20]
2000041a:	e006      	b.n	2000042a <ascii_player_wins+0x36>
2000041c:	697b      	ldr	r3, [r7, #20]
2000041e:	1c5a      	adds	r2, r3, #1
20000420:	617a      	str	r2, [r7, #20]
20000422:	781b      	ldrb	r3, [r3, #0]
20000424:	0018      	movs	r0, r3
20000426:	f7ff ff5c 	bl	200002e2 <ascii_write_char>
2000042a:	697b      	ldr	r3, [r7, #20]
2000042c:	781b      	ldrb	r3, [r3, #0]
2000042e:	2b00      	cmp	r3, #0
20000430:	d1f4      	bne.n	2000041c <ascii_player_wins+0x28>
20000432:	230c      	movs	r3, #12
20000434:	18fb      	adds	r3, r7, r3
20000436:	617b      	str	r3, [r7, #20]
20000438:	e006      	b.n	20000448 <ascii_player_wins+0x54>
2000043a:	697b      	ldr	r3, [r7, #20]
2000043c:	1c5a      	adds	r2, r3, #1
2000043e:	617a      	str	r2, [r7, #20]
20000440:	781b      	ldrb	r3, [r3, #0]
20000442:	0018      	movs	r0, r3
20000444:	f7ff ff4d 	bl	200002e2 <ascii_write_char>
20000448:	697b      	ldr	r3, [r7, #20]
2000044a:	781b      	ldrb	r3, [r3, #0]
2000044c:	2b00      	cmp	r3, #0
2000044e:	d1f4      	bne.n	2000043a <ascii_player_wins+0x46>
20000450:	46c0      	nop			@ (mov r8, r8)
20000452:	46c0      	nop			@ (mov r8, r8)
20000454:	46bd      	mov	sp, r7
20000456:	b006      	add	sp, #24
20000458:	bd80      	pop	{r7, pc}
2000045a:	46c0      	nop			@ (mov r8, r8)
2000045c:	2000301c 	.word	0x2000301c

20000460 <ascii_start_screen>:
20000460:	b5b0      	push	{r4, r5, r7, lr}
20000462:	b08c      	sub	sp, #48	@ 0x30
20000464:	af00      	add	r7, sp, #0
20000466:	4b20      	ldr	r3, [pc, #128]	@ (200004e8 <ascii_start_screen+0x88>)
20000468:	2202      	movs	r2, #2
2000046a:	0019      	movs	r1, r3
2000046c:	2001      	movs	r0, #1
2000046e:	f7ff feb5 	bl	200001dc <ascii_command>
20000472:	2514      	movs	r5, #20
20000474:	197b      	adds	r3, r7, r5
20000476:	4a1d      	ldr	r2, [pc, #116]	@ (200004ec <ascii_start_screen+0x8c>)
20000478:	ca13      	ldmia	r2!, {r0, r1, r4}
2000047a:	c313      	stmia	r3!, {r0, r1, r4}
2000047c:	ca03      	ldmia	r2!, {r0, r1}
2000047e:	c303      	stmia	r3!, {r0, r1}
20000480:	8812      	ldrh	r2, [r2, #0]
20000482:	801a      	strh	r2, [r3, #0]
20000484:	003b      	movs	r3, r7
20000486:	4a1a      	ldr	r2, [pc, #104]	@ (200004f0 <ascii_start_screen+0x90>)
20000488:	ca13      	ldmia	r2!, {r0, r1, r4}
2000048a:	c313      	stmia	r3!, {r0, r1, r4}
2000048c:	6811      	ldr	r1, [r2, #0]
2000048e:	6019      	str	r1, [r3, #0]
20000490:	8892      	ldrh	r2, [r2, #4]
20000492:	809a      	strh	r2, [r3, #4]
20000494:	2101      	movs	r1, #1
20000496:	2001      	movs	r0, #1
20000498:	f7ff ff08 	bl	200002ac <ascii_goto>
2000049c:	197b      	adds	r3, r7, r5
2000049e:	62fb      	str	r3, [r7, #44]	@ 0x2c
200004a0:	e006      	b.n	200004b0 <ascii_start_screen+0x50>
200004a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200004a4:	1c5a      	adds	r2, r3, #1
200004a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	0018      	movs	r0, r3
200004ac:	f7ff ff19 	bl	200002e2 <ascii_write_char>
200004b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200004b2:	781b      	ldrb	r3, [r3, #0]
200004b4:	2b00      	cmp	r3, #0
200004b6:	d1f4      	bne.n	200004a2 <ascii_start_screen+0x42>
200004b8:	2102      	movs	r1, #2
200004ba:	2001      	movs	r0, #1
200004bc:	f7ff fef6 	bl	200002ac <ascii_goto>
200004c0:	003b      	movs	r3, r7
200004c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
200004c4:	e006      	b.n	200004d4 <ascii_start_screen+0x74>
200004c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200004c8:	1c5a      	adds	r2, r3, #1
200004ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
200004cc:	781b      	ldrb	r3, [r3, #0]
200004ce:	0018      	movs	r0, r3
200004d0:	f7ff ff07 	bl	200002e2 <ascii_write_char>
200004d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200004d6:	781b      	ldrb	r3, [r3, #0]
200004d8:	2b00      	cmp	r3, #0
200004da:	d1f4      	bne.n	200004c6 <ascii_start_screen+0x66>
200004dc:	46c0      	nop			@ (mov r8, r8)
200004de:	46c0      	nop			@ (mov r8, r8)
200004e0:	46bd      	mov	sp, r7
200004e2:	b00c      	add	sp, #48	@ 0x30
200004e4:	bdb0      	pop	{r4, r5, r7, pc}
200004e6:	46c0      	nop			@ (mov r8, r8)
200004e8:	20000593 	.word	0x20000593
200004ec:	20003024 	.word	0x20003024
200004f0:	2000303c 	.word	0x2000303c

200004f4 <delay_250ns>:
200004f4:	b580      	push	{r7, lr}
200004f6:	b082      	sub	sp, #8
200004f8:	af00      	add	r7, sp, #0
200004fa:	4b13      	ldr	r3, [pc, #76]	@ (20000548 <delay_250ns+0x54>)
200004fc:	607b      	str	r3, [r7, #4]
200004fe:	687b      	ldr	r3, [r7, #4]
20000500:	2200      	movs	r2, #0
20000502:	601a      	str	r2, [r3, #0]
20000504:	2329      	movs	r3, #41	@ 0x29
20000506:	021b      	lsls	r3, r3, #8
20000508:	0a19      	lsrs	r1, r3, #8
2000050a:	687b      	ldr	r3, [r7, #4]
2000050c:	685a      	ldr	r2, [r3, #4]
2000050e:	0209      	lsls	r1, r1, #8
20000510:	0a09      	lsrs	r1, r1, #8
20000512:	0e12      	lsrs	r2, r2, #24
20000514:	0612      	lsls	r2, r2, #24
20000516:	430a      	orrs	r2, r1
20000518:	605a      	str	r2, [r3, #4]
2000051a:	687b      	ldr	r3, [r7, #4]
2000051c:	689a      	ldr	r2, [r3, #8]
2000051e:	0e12      	lsrs	r2, r2, #24
20000520:	0612      	lsls	r2, r2, #24
20000522:	609a      	str	r2, [r3, #8]
20000524:	687b      	ldr	r3, [r7, #4]
20000526:	2205      	movs	r2, #5
20000528:	601a      	str	r2, [r3, #0]
2000052a:	46c0      	nop			@ (mov r8, r8)
2000052c:	687b      	ldr	r3, [r7, #4]
2000052e:	681b      	ldr	r3, [r3, #0]
20000530:	03db      	lsls	r3, r3, #15
20000532:	0fdb      	lsrs	r3, r3, #31
20000534:	b2db      	uxtb	r3, r3
20000536:	2b00      	cmp	r3, #0
20000538:	d0f8      	beq.n	2000052c <delay_250ns+0x38>
2000053a:	687b      	ldr	r3, [r7, #4]
2000053c:	2200      	movs	r2, #0
2000053e:	601a      	str	r2, [r3, #0]
20000540:	46c0      	nop			@ (mov r8, r8)
20000542:	46bd      	mov	sp, r7
20000544:	b002      	add	sp, #8
20000546:	bd80      	pop	{r7, pc}
20000548:	e000e010 	.word	0xe000e010

2000054c <delay_mikro>:
2000054c:	b580      	push	{r7, lr}
2000054e:	b082      	sub	sp, #8
20000550:	af00      	add	r7, sp, #0
20000552:	6078      	str	r0, [r7, #4]
20000554:	687b      	ldr	r3, [r7, #4]
20000556:	22fa      	movs	r2, #250	@ 0xfa
20000558:	0091      	lsls	r1, r2, #2
2000055a:	0018      	movs	r0, r3
2000055c:	f001 ff26 	bl	200023ac <__udivsi3>
20000560:	0003      	movs	r3, r0
20000562:	607b      	str	r3, [r7, #4]
20000564:	687b      	ldr	r3, [r7, #4]
20000566:	3301      	adds	r3, #1
20000568:	607b      	str	r3, [r7, #4]
2000056a:	e00a      	b.n	20000582 <delay_mikro+0x36>
2000056c:	f7ff ffc2 	bl	200004f4 <delay_250ns>
20000570:	f7ff ffc0 	bl	200004f4 <delay_250ns>
20000574:	f7ff ffbe 	bl	200004f4 <delay_250ns>
20000578:	f7ff ffbc 	bl	200004f4 <delay_250ns>
2000057c:	687b      	ldr	r3, [r7, #4]
2000057e:	3b01      	subs	r3, #1
20000580:	607b      	str	r3, [r7, #4]
20000582:	687b      	ldr	r3, [r7, #4]
20000584:	2b00      	cmp	r3, #0
20000586:	d1f1      	bne.n	2000056c <delay_mikro+0x20>
20000588:	46c0      	nop			@ (mov r8, r8)
2000058a:	46c0      	nop			@ (mov r8, r8)
2000058c:	46bd      	mov	sp, r7
2000058e:	b002      	add	sp, #8
20000590:	bd80      	pop	{r7, pc}

20000592 <delay_milli>:
20000592:	b580      	push	{r7, lr}
20000594:	b084      	sub	sp, #16
20000596:	af00      	add	r7, sp, #0
20000598:	6078      	str	r0, [r7, #4]
2000059a:	687b      	ldr	r3, [r7, #4]
2000059c:	22fa      	movs	r2, #250	@ 0xfa
2000059e:	0091      	lsls	r1, r2, #2
200005a0:	0018      	movs	r0, r3
200005a2:	f001 ff03 	bl	200023ac <__udivsi3>
200005a6:	0003      	movs	r3, r0
200005a8:	607b      	str	r3, [r7, #4]
200005aa:	687b      	ldr	r3, [r7, #4]
200005ac:	3301      	adds	r3, #1
200005ae:	607b      	str	r3, [r7, #4]
200005b0:	2300      	movs	r3, #0
200005b2:	60fb      	str	r3, [r7, #12]
200005b4:	e00a      	b.n	200005cc <delay_milli+0x3a>
200005b6:	f7ff ff9d 	bl	200004f4 <delay_250ns>
200005ba:	f7ff ff9b 	bl	200004f4 <delay_250ns>
200005be:	f7ff ff99 	bl	200004f4 <delay_250ns>
200005c2:	f7ff ff97 	bl	200004f4 <delay_250ns>
200005c6:	68fb      	ldr	r3, [r7, #12]
200005c8:	3301      	adds	r3, #1
200005ca:	60fb      	str	r3, [r7, #12]
200005cc:	687a      	ldr	r2, [r7, #4]
200005ce:	0013      	movs	r3, r2
200005d0:	015b      	lsls	r3, r3, #5
200005d2:	1a9b      	subs	r3, r3, r2
200005d4:	009b      	lsls	r3, r3, #2
200005d6:	189b      	adds	r3, r3, r2
200005d8:	00db      	lsls	r3, r3, #3
200005da:	001a      	movs	r2, r3
200005dc:	68fb      	ldr	r3, [r7, #12]
200005de:	4293      	cmp	r3, r2
200005e0:	d3e9      	bcc.n	200005b6 <delay_milli+0x24>
200005e2:	46c0      	nop			@ (mov r8, r8)
200005e4:	46c0      	nop			@ (mov r8, r8)
200005e6:	46bd      	mov	sp, r7
200005e8:	b004      	add	sp, #16
200005ea:	bd80      	pop	{r7, pc}

200005ec <graphic_initialize>:
200005ec:	dff0      	.short	0xdff0
200005ee:	4770      	bx	lr
200005f0:	46c0      	nop			@ (mov r8, r8)

200005f2 <graphic_clear_screen>:
200005f2:	dff1      	.short	0xdff1
200005f4:	4770      	bx	lr
200005f6:	46c0      	nop			@ (mov r8, r8)

200005f8 <graphic_pixel_set>:
200005f8:	dff2      	.short	0xdff2
200005fa:	4770      	bx	lr
200005fc:	46c0      	nop			@ (mov r8, r8)

200005fe <graphic_pixel_clear>:
200005fe:	dff3      	.short	0xdff3
20000600:	4770      	bx	lr
20000602:	46c0      	nop			@ (mov r8, r8)

20000604 <draw_line>:
/// <returns>
/// 1 if the line could be drawn inside the bounds of the screen.
/// 0, otherwise.
/// </returns>
int draw_line(P_Line line)
{
20000604:	b5f0      	push	{r4, r5, r6, r7, lr}
20000606:	b087      	sub	sp, #28
20000608:	af00      	add	r7, sp, #0
2000060a:	6078      	str	r0, [r7, #4]
    i8 x0, y0, x1, y1;

    x0 = line->p0.x;
2000060c:	687b      	ldr	r3, [r7, #4]
2000060e:	2200      	movs	r2, #0
20000610:	569a      	ldrsb	r2, [r3, r2]
20000612:	2510      	movs	r5, #16
20000614:	197b      	adds	r3, r7, r5
20000616:	701a      	strb	r2, [r3, #0]
    y0 = line->p0.y;
20000618:	687b      	ldr	r3, [r7, #4]
2000061a:	2201      	movs	r2, #1
2000061c:	569a      	ldrsb	r2, [r3, r2]
2000061e:	210f      	movs	r1, #15
20000620:	187b      	adds	r3, r7, r1
20000622:	701a      	strb	r2, [r3, #0]

    x1 = line->p1.x;
20000624:	687b      	ldr	r3, [r7, #4]
20000626:	2202      	movs	r2, #2
20000628:	569a      	ldrsb	r2, [r3, r2]
2000062a:	260e      	movs	r6, #14
2000062c:	19bb      	adds	r3, r7, r6
2000062e:	701a      	strb	r2, [r3, #0]
    y1 = line->p1.y;
20000630:	687b      	ldr	r3, [r7, #4]
20000632:	2203      	movs	r2, #3
20000634:	569a      	ldrsb	r2, [r3, r2]
20000636:	200d      	movs	r0, #13
20000638:	183b      	adds	r3, r7, r0
2000063a:	701a      	strb	r2, [r3, #0]

    bool steep = abs(y1 - y0) > abs(x1 - x0);
2000063c:	183b      	adds	r3, r7, r0
2000063e:	781b      	ldrb	r3, [r3, #0]
20000640:	b25b      	sxtb	r3, r3
20000642:	b2da      	uxtb	r2, r3
20000644:	187b      	adds	r3, r7, r1
20000646:	781b      	ldrb	r3, [r3, #0]
20000648:	b25b      	sxtb	r3, r3
2000064a:	b2db      	uxtb	r3, r3
2000064c:	1ad3      	subs	r3, r2, r3
2000064e:	b2db      	uxtb	r3, r3
20000650:	b25b      	sxtb	r3, r3
20000652:	0018      	movs	r0, r3
20000654:	f000 fa53 	bl	20000afe <abs>
20000658:	0003      	movs	r3, r0
2000065a:	001c      	movs	r4, r3
2000065c:	19bb      	adds	r3, r7, r6
2000065e:	781b      	ldrb	r3, [r3, #0]
20000660:	b25b      	sxtb	r3, r3
20000662:	b2da      	uxtb	r2, r3
20000664:	197b      	adds	r3, r7, r5
20000666:	781b      	ldrb	r3, [r3, #0]
20000668:	b25b      	sxtb	r3, r3
2000066a:	b2db      	uxtb	r3, r3
2000066c:	1ad3      	subs	r3, r2, r3
2000066e:	b2db      	uxtb	r3, r3
20000670:	b25b      	sxtb	r3, r3
20000672:	0018      	movs	r0, r3
20000674:	f000 fa43 	bl	20000afe <abs>
20000678:	0003      	movs	r3, r0
2000067a:	2201      	movs	r2, #1
2000067c:	429c      	cmp	r4, r3
2000067e:	dc01      	bgt.n	20000684 <draw_line+0x80>
20000680:	2300      	movs	r3, #0
20000682:	1c1a      	adds	r2, r3, #0
20000684:	b2d2      	uxtb	r2, r2
20000686:	2114      	movs	r1, #20
20000688:	187b      	adds	r3, r7, r1
2000068a:	701a      	strb	r2, [r3, #0]

    if (steep)
2000068c:	187b      	adds	r3, r7, r1
2000068e:	781b      	ldrb	r3, [r3, #0]
20000690:	2b00      	cmp	r3, #0
20000692:	d00f      	beq.n	200006b4 <draw_line+0xb0>
    {
        swap(&x0, &y0);
20000694:	230f      	movs	r3, #15
20000696:	18fa      	adds	r2, r7, r3
20000698:	2310      	movs	r3, #16
2000069a:	18fb      	adds	r3, r7, r3
2000069c:	0011      	movs	r1, r2
2000069e:	0018      	movs	r0, r3
200006a0:	f000 fa44 	bl	20000b2c <swap>
        swap(&x1, &y1);
200006a4:	230d      	movs	r3, #13
200006a6:	18fa      	adds	r2, r7, r3
200006a8:	230e      	movs	r3, #14
200006aa:	18fb      	adds	r3, r7, r3
200006ac:	0011      	movs	r1, r2
200006ae:	0018      	movs	r0, r3
200006b0:	f000 fa3c 	bl	20000b2c <swap>
    }

    if (x0 > x1)
200006b4:	2110      	movs	r1, #16
200006b6:	187b      	adds	r3, r7, r1
200006b8:	2200      	movs	r2, #0
200006ba:	569a      	ldrsb	r2, [r3, r2]
200006bc:	200e      	movs	r0, #14
200006be:	183b      	adds	r3, r7, r0
200006c0:	781b      	ldrb	r3, [r3, #0]
200006c2:	b25b      	sxtb	r3, r3
200006c4:	429a      	cmp	r2, r3
200006c6:	dd0d      	ble.n	200006e4 <draw_line+0xe0>
    {
        swap(&x0, &x1);
200006c8:	183a      	adds	r2, r7, r0
200006ca:	187b      	adds	r3, r7, r1
200006cc:	0011      	movs	r1, r2
200006ce:	0018      	movs	r0, r3
200006d0:	f000 fa2c 	bl	20000b2c <swap>
        swap(&y0, &y1);
200006d4:	230d      	movs	r3, #13
200006d6:	18fa      	adds	r2, r7, r3
200006d8:	230f      	movs	r3, #15
200006da:	18fb      	adds	r3, r7, r3
200006dc:	0011      	movs	r1, r2
200006de:	0018      	movs	r0, r3
200006e0:	f000 fa24 	bl	20000b2c <swap>
    }

    i8 delta_x = x1 - x0;
200006e4:	230e      	movs	r3, #14
200006e6:	18fb      	adds	r3, r7, r3
200006e8:	781b      	ldrb	r3, [r3, #0]
200006ea:	b25b      	sxtb	r3, r3
200006ec:	b2da      	uxtb	r2, r3
200006ee:	2310      	movs	r3, #16
200006f0:	18fb      	adds	r3, r7, r3
200006f2:	781b      	ldrb	r3, [r3, #0]
200006f4:	b25b      	sxtb	r3, r3
200006f6:	b2db      	uxtb	r3, r3
200006f8:	1ad3      	subs	r3, r2, r3
200006fa:	b2da      	uxtb	r2, r3
200006fc:	2313      	movs	r3, #19
200006fe:	18fb      	adds	r3, r7, r3
20000700:	701a      	strb	r2, [r3, #0]
    i8 delta_y = abs(y1 - y0);
20000702:	260d      	movs	r6, #13
20000704:	19bb      	adds	r3, r7, r6
20000706:	781b      	ldrb	r3, [r3, #0]
20000708:	b25b      	sxtb	r3, r3
2000070a:	b2da      	uxtb	r2, r3
2000070c:	250f      	movs	r5, #15
2000070e:	197b      	adds	r3, r7, r5
20000710:	781b      	ldrb	r3, [r3, #0]
20000712:	b25b      	sxtb	r3, r3
20000714:	b2db      	uxtb	r3, r3
20000716:	1ad3      	subs	r3, r2, r3
20000718:	b2db      	uxtb	r3, r3
2000071a:	b25b      	sxtb	r3, r3
2000071c:	2212      	movs	r2, #18
2000071e:	18bc      	adds	r4, r7, r2
20000720:	0018      	movs	r0, r3
20000722:	f000 f9ec 	bl	20000afe <abs>
20000726:	0003      	movs	r3, r0
20000728:	7023      	strb	r3, [r4, #0]

    i8 error = 0;
2000072a:	2317      	movs	r3, #23
2000072c:	18fb      	adds	r3, r7, r3
2000072e:	2200      	movs	r2, #0
20000730:	701a      	strb	r2, [r3, #0]
    i8 y     = y0;
20000732:	2316      	movs	r3, #22
20000734:	18fb      	adds	r3, r7, r3
20000736:	197a      	adds	r2, r7, r5
20000738:	7812      	ldrb	r2, [r2, #0]
2000073a:	701a      	strb	r2, [r3, #0]

    i8 y_step = y0 < y1 ? 1 : -1;
2000073c:	197b      	adds	r3, r7, r5
2000073e:	2200      	movs	r2, #0
20000740:	569a      	ldrsb	r2, [r3, r2]
20000742:	19bb      	adds	r3, r7, r6
20000744:	781b      	ldrb	r3, [r3, #0]
20000746:	b25b      	sxtb	r3, r3
20000748:	429a      	cmp	r2, r3
2000074a:	da01      	bge.n	20000750 <draw_line+0x14c>
2000074c:	2201      	movs	r2, #1
2000074e:	e001      	b.n	20000754 <draw_line+0x150>
20000750:	2301      	movs	r3, #1
20000752:	425a      	negs	r2, r3
20000754:	2311      	movs	r3, #17
20000756:	18fb      	adds	r3, r7, r3
20000758:	701a      	strb	r2, [r3, #0]

    for (i8 x = x0; x <= x1; x++)
2000075a:	2315      	movs	r3, #21
2000075c:	18fb      	adds	r3, r7, r3
2000075e:	2210      	movs	r2, #16
20000760:	18ba      	adds	r2, r7, r2
20000762:	7812      	ldrb	r2, [r2, #0]
20000764:	701a      	strb	r2, [r3, #0]
20000766:	e065      	b.n	20000834 <draw_line+0x230>
    {
        if (steep) {
20000768:	2314      	movs	r3, #20
2000076a:	18fb      	adds	r3, r7, r3
2000076c:	781b      	ldrb	r3, [r3, #0]
2000076e:	2b00      	cmp	r3, #0
20000770:	d019      	beq.n	200007a6 <draw_line+0x1a2>
            // Check boundaries before drawing
            if (y >= 0 && y < 128 && x >= 0 && x < 64) {
20000772:	2216      	movs	r2, #22
20000774:	18bb      	adds	r3, r7, r2
20000776:	781b      	ldrb	r3, [r3, #0]
20000778:	2b7f      	cmp	r3, #127	@ 0x7f
2000077a:	d82d      	bhi.n	200007d8 <draw_line+0x1d4>
2000077c:	2115      	movs	r1, #21
2000077e:	187b      	adds	r3, r7, r1
20000780:	781b      	ldrb	r3, [r3, #0]
20000782:	2b7f      	cmp	r3, #127	@ 0x7f
20000784:	d828      	bhi.n	200007d8 <draw_line+0x1d4>
20000786:	187b      	adds	r3, r7, r1
20000788:	781b      	ldrb	r3, [r3, #0]
2000078a:	b25b      	sxtb	r3, r3
2000078c:	2b3f      	cmp	r3, #63	@ 0x3f
2000078e:	dc23      	bgt.n	200007d8 <draw_line+0x1d4>
                graphic_pixel_set(y, x);
20000790:	18bb      	adds	r3, r7, r2
20000792:	2200      	movs	r2, #0
20000794:	569a      	ldrsb	r2, [r3, r2]
20000796:	187b      	adds	r3, r7, r1
20000798:	781b      	ldrb	r3, [r3, #0]
2000079a:	b25b      	sxtb	r3, r3
2000079c:	0019      	movs	r1, r3
2000079e:	0010      	movs	r0, r2
200007a0:	f7ff ff2a 	bl	200005f8 <graphic_pixel_set>
200007a4:	e018      	b.n	200007d8 <draw_line+0x1d4>
            }
        }
        else {
            // Check boundaries before drawing
            if (x >= 0 && x < 128 && y >= 0 && y < 64) {
200007a6:	2215      	movs	r2, #21
200007a8:	18bb      	adds	r3, r7, r2
200007aa:	781b      	ldrb	r3, [r3, #0]
200007ac:	2b7f      	cmp	r3, #127	@ 0x7f
200007ae:	d813      	bhi.n	200007d8 <draw_line+0x1d4>
200007b0:	2116      	movs	r1, #22
200007b2:	187b      	adds	r3, r7, r1
200007b4:	781b      	ldrb	r3, [r3, #0]
200007b6:	2b7f      	cmp	r3, #127	@ 0x7f
200007b8:	d80e      	bhi.n	200007d8 <draw_line+0x1d4>
200007ba:	187b      	adds	r3, r7, r1
200007bc:	781b      	ldrb	r3, [r3, #0]
200007be:	b25b      	sxtb	r3, r3
200007c0:	2b3f      	cmp	r3, #63	@ 0x3f
200007c2:	dc09      	bgt.n	200007d8 <draw_line+0x1d4>
                graphic_pixel_set(x, y);
200007c4:	18bb      	adds	r3, r7, r2
200007c6:	2200      	movs	r2, #0
200007c8:	569a      	ldrsb	r2, [r3, r2]
200007ca:	187b      	adds	r3, r7, r1
200007cc:	781b      	ldrb	r3, [r3, #0]
200007ce:	b25b      	sxtb	r3, r3
200007d0:	0019      	movs	r1, r3
200007d2:	0010      	movs	r0, r2
200007d4:	f7ff ff10 	bl	200005f8 <graphic_pixel_set>
            }
        }

        error += delta_y;
200007d8:	2117      	movs	r1, #23
200007da:	187b      	adds	r3, r7, r1
200007dc:	781a      	ldrb	r2, [r3, #0]
200007de:	2312      	movs	r3, #18
200007e0:	18fb      	adds	r3, r7, r3
200007e2:	781b      	ldrb	r3, [r3, #0]
200007e4:	18d3      	adds	r3, r2, r3
200007e6:	b2da      	uxtb	r2, r3
200007e8:	187b      	adds	r3, r7, r1
200007ea:	701a      	strb	r2, [r3, #0]
        if (error >= delta_x)
200007ec:	187a      	adds	r2, r7, r1
200007ee:	2013      	movs	r0, #19
200007f0:	183b      	adds	r3, r7, r0
200007f2:	7812      	ldrb	r2, [r2, #0]
200007f4:	b252      	sxtb	r2, r2
200007f6:	781b      	ldrb	r3, [r3, #0]
200007f8:	b25b      	sxtb	r3, r3
200007fa:	429a      	cmp	r2, r3
200007fc:	db11      	blt.n	20000822 <draw_line+0x21e>
        {
            y     += y_step;
200007fe:	2416      	movs	r4, #22
20000800:	193b      	adds	r3, r7, r4
20000802:	781a      	ldrb	r2, [r3, #0]
20000804:	2311      	movs	r3, #17
20000806:	18fb      	adds	r3, r7, r3
20000808:	781b      	ldrb	r3, [r3, #0]
2000080a:	18d3      	adds	r3, r2, r3
2000080c:	b2da      	uxtb	r2, r3
2000080e:	193b      	adds	r3, r7, r4
20000810:	701a      	strb	r2, [r3, #0]
            error -= delta_x;
20000812:	187b      	adds	r3, r7, r1
20000814:	781a      	ldrb	r2, [r3, #0]
20000816:	183b      	adds	r3, r7, r0
20000818:	781b      	ldrb	r3, [r3, #0]
2000081a:	1ad3      	subs	r3, r2, r3
2000081c:	b2da      	uxtb	r2, r3
2000081e:	187b      	adds	r3, r7, r1
20000820:	701a      	strb	r2, [r3, #0]
    for (i8 x = x0; x <= x1; x++)
20000822:	2115      	movs	r1, #21
20000824:	187b      	adds	r3, r7, r1
20000826:	781b      	ldrb	r3, [r3, #0]
20000828:	b25b      	sxtb	r3, r3
2000082a:	b2db      	uxtb	r3, r3
2000082c:	3301      	adds	r3, #1
2000082e:	b2da      	uxtb	r2, r3
20000830:	187b      	adds	r3, r7, r1
20000832:	701a      	strb	r2, [r3, #0]
20000834:	230e      	movs	r3, #14
20000836:	18fb      	adds	r3, r7, r3
20000838:	781b      	ldrb	r3, [r3, #0]
2000083a:	b25b      	sxtb	r3, r3
2000083c:	2215      	movs	r2, #21
2000083e:	18ba      	adds	r2, r7, r2
20000840:	7812      	ldrb	r2, [r2, #0]
20000842:	b252      	sxtb	r2, r2
20000844:	429a      	cmp	r2, r3
20000846:	dd8f      	ble.n	20000768 <draw_line+0x164>
        }
    }
}
20000848:	46c0      	nop			@ (mov r8, r8)
2000084a:	0018      	movs	r0, r3
2000084c:	46bd      	mov	sp, r7
2000084e:	b007      	add	sp, #28
20000850:	bdf0      	pop	{r4, r5, r6, r7, pc}

20000852 <draw_rect>:
/// <returns>
/// 1 if the rect could be drawn inside the bounds of the screen.
/// 0, otherwise.
/// </returns>
int draw_rect(P_Rect rect)
{
20000852:	b5f0      	push	{r4, r5, r6, r7, lr}
20000854:	b087      	sub	sp, #28
20000856:	af00      	add	r7, sp, #0
20000858:	6078      	str	r0, [r7, #4]
    i8 p_x    = rect->origin.x;
2000085a:	2517      	movs	r5, #23
2000085c:	197b      	adds	r3, r7, r5
2000085e:	687a      	ldr	r2, [r7, #4]
20000860:	7812      	ldrb	r2, [r2, #0]
20000862:	701a      	strb	r2, [r3, #0]
    i8 p_y    = rect->origin.y;
20000864:	2616      	movs	r6, #22
20000866:	19bb      	adds	r3, r7, r6
20000868:	687a      	ldr	r2, [r7, #4]
2000086a:	7852      	ldrb	r2, [r2, #1]
2000086c:	701a      	strb	r2, [r3, #0]
    i8 width  = rect->dimen.x;
2000086e:	2115      	movs	r1, #21
20000870:	187b      	adds	r3, r7, r1
20000872:	687a      	ldr	r2, [r7, #4]
20000874:	7892      	ldrb	r2, [r2, #2]
20000876:	701a      	strb	r2, [r3, #0]
    i8 height = rect->dimen.y;
20000878:	2314      	movs	r3, #20
2000087a:	18fb      	adds	r3, r7, r3
2000087c:	687a      	ldr	r2, [r7, #4]
2000087e:	78d2      	ldrb	r2, [r2, #3]
20000880:	701a      	strb	r2, [r3, #0]

    // Draw top line
    Point start = { p_x,         p_y };
20000882:	2010      	movs	r0, #16
20000884:	183b      	adds	r3, r7, r0
20000886:	197a      	adds	r2, r7, r5
20000888:	7812      	ldrb	r2, [r2, #0]
2000088a:	701a      	strb	r2, [r3, #0]
2000088c:	183b      	adds	r3, r7, r0
2000088e:	19ba      	adds	r2, r7, r6
20000890:	7812      	ldrb	r2, [r2, #0]
20000892:	705a      	strb	r2, [r3, #1]
    Point end   = { p_x + width, p_y };
20000894:	197b      	adds	r3, r7, r5
20000896:	781a      	ldrb	r2, [r3, #0]
20000898:	187b      	adds	r3, r7, r1
2000089a:	781b      	ldrb	r3, [r3, #0]
2000089c:	18d3      	adds	r3, r2, r3
2000089e:	b2db      	uxtb	r3, r3
200008a0:	b25a      	sxtb	r2, r3
200008a2:	240c      	movs	r4, #12
200008a4:	193b      	adds	r3, r7, r4
200008a6:	701a      	strb	r2, [r3, #0]
200008a8:	193b      	adds	r3, r7, r4
200008aa:	19ba      	adds	r2, r7, r6
200008ac:	7812      	ldrb	r2, [r2, #0]
200008ae:	705a      	strb	r2, [r3, #1]

    Line  line = { start, end };
200008b0:	2408      	movs	r4, #8
200008b2:	193b      	adds	r3, r7, r4
200008b4:	183a      	adds	r2, r7, r0
200008b6:	8812      	ldrh	r2, [r2, #0]
200008b8:	801a      	strh	r2, [r3, #0]
200008ba:	193b      	adds	r3, r7, r4
200008bc:	2102      	movs	r1, #2
200008be:	220c      	movs	r2, #12
200008c0:	18ba      	adds	r2, r7, r2
200008c2:	8812      	ldrh	r2, [r2, #0]
200008c4:	525a      	strh	r2, [r3, r1]
    draw_line(&line);
200008c6:	193b      	adds	r3, r7, r4
200008c8:	0018      	movs	r0, r3
200008ca:	f7ff fe9b 	bl	20000604 <draw_line>
    // Draw right line
    line.p0.x = p_x + width;
200008ce:	197b      	adds	r3, r7, r5
200008d0:	781a      	ldrb	r2, [r3, #0]
200008d2:	2115      	movs	r1, #21
200008d4:	187b      	adds	r3, r7, r1
200008d6:	781b      	ldrb	r3, [r3, #0]
200008d8:	18d3      	adds	r3, r2, r3
200008da:	b2db      	uxtb	r3, r3
200008dc:	b25a      	sxtb	r2, r3
200008de:	0021      	movs	r1, r4
200008e0:	187b      	adds	r3, r7, r1
200008e2:	701a      	strb	r2, [r3, #0]
    line.p1.y = p_y + height;
200008e4:	19bb      	adds	r3, r7, r6
200008e6:	781a      	ldrb	r2, [r3, #0]
200008e8:	2314      	movs	r3, #20
200008ea:	18fb      	adds	r3, r7, r3
200008ec:	781b      	ldrb	r3, [r3, #0]
200008ee:	18d3      	adds	r3, r2, r3
200008f0:	b2db      	uxtb	r3, r3
200008f2:	b25a      	sxtb	r2, r3
200008f4:	187b      	adds	r3, r7, r1
200008f6:	70da      	strb	r2, [r3, #3]
    draw_line(&line);
200008f8:	000c      	movs	r4, r1
200008fa:	187b      	adds	r3, r7, r1
200008fc:	0018      	movs	r0, r3
200008fe:	f7ff fe81 	bl	20000604 <draw_line>
    // Draw bottom line
    line.p0.y = p_y + height;
20000902:	19bb      	adds	r3, r7, r6
20000904:	781a      	ldrb	r2, [r3, #0]
20000906:	2314      	movs	r3, #20
20000908:	18fb      	adds	r3, r7, r3
2000090a:	781b      	ldrb	r3, [r3, #0]
2000090c:	18d3      	adds	r3, r2, r3
2000090e:	b2db      	uxtb	r3, r3
20000910:	b25a      	sxtb	r2, r3
20000912:	0021      	movs	r1, r4
20000914:	187b      	adds	r3, r7, r1
20000916:	705a      	strb	r2, [r3, #1]
    line.p0.x = p_x;
20000918:	187b      	adds	r3, r7, r1
2000091a:	197a      	adds	r2, r7, r5
2000091c:	7812      	ldrb	r2, [r2, #0]
2000091e:	701a      	strb	r2, [r3, #0]
    draw_line(&line);
20000920:	000c      	movs	r4, r1
20000922:	187b      	adds	r3, r7, r1
20000924:	0018      	movs	r0, r3
20000926:	f7ff fe6d 	bl	20000604 <draw_line>
    // Draw left line
    line.p1.x = p_x;
2000092a:	0021      	movs	r1, r4
2000092c:	187b      	adds	r3, r7, r1
2000092e:	197a      	adds	r2, r7, r5
20000930:	7812      	ldrb	r2, [r2, #0]
20000932:	709a      	strb	r2, [r3, #2]
    line.p1.y = p_y;
20000934:	187b      	adds	r3, r7, r1
20000936:	19ba      	adds	r2, r7, r6
20000938:	7812      	ldrb	r2, [r2, #0]
2000093a:	70da      	strb	r2, [r3, #3]
    draw_line(&line);
2000093c:	187b      	adds	r3, r7, r1
2000093e:	0018      	movs	r0, r3
20000940:	f7ff fe60 	bl	20000604 <draw_line>
}
20000944:	46c0      	nop			@ (mov r8, r8)
20000946:	0018      	movs	r0, r3
20000948:	46bd      	mov	sp, r7
2000094a:	b007      	add	sp, #28
2000094c:	bdf0      	pop	{r4, r5, r6, r7, pc}

2000094e <draw_poly>:
/// <returns>
/// 1 if the polygon could be drawn inside the bounds of the screen.
/// 0, otherwise.
/// </returns>
int draw_poly(P_PolyPoint poly)
{
2000094e:	b5f0      	push	{r4, r5, r6, r7, lr}
20000950:	b087      	sub	sp, #28
20000952:	af00      	add	r7, sp, #0
20000954:	6078      	str	r0, [r7, #4]
    Point p0 = { poly->x, poly->y };
20000956:	687b      	ldr	r3, [r7, #4]
20000958:	2200      	movs	r2, #0
2000095a:	569a      	ldrsb	r2, [r3, r2]
2000095c:	2110      	movs	r1, #16
2000095e:	187b      	adds	r3, r7, r1
20000960:	701a      	strb	r2, [r3, #0]
20000962:	687b      	ldr	r3, [r7, #4]
20000964:	2201      	movs	r2, #1
20000966:	569a      	ldrsb	r2, [r3, r2]
20000968:	187b      	adds	r3, r7, r1
2000096a:	705a      	strb	r2, [r3, #1]
    P_PolyPoint next = poly->next;
2000096c:	687b      	ldr	r3, [r7, #4]
2000096e:	685b      	ldr	r3, [r3, #4]
20000970:	617b      	str	r3, [r7, #20]
    while (next)
20000972:	e028      	b.n	200009c6 <draw_poly+0x78>
    {
        Point p1 = { next->x, next->y };
20000974:	697b      	ldr	r3, [r7, #20]
20000976:	2200      	movs	r2, #0
20000978:	569a      	ldrsb	r2, [r3, r2]
2000097a:	200c      	movs	r0, #12
2000097c:	183b      	adds	r3, r7, r0
2000097e:	701a      	strb	r2, [r3, #0]
20000980:	697b      	ldr	r3, [r7, #20]
20000982:	2201      	movs	r2, #1
20000984:	569a      	ldrsb	r2, [r3, r2]
20000986:	183b      	adds	r3, r7, r0
20000988:	705a      	strb	r2, [r3, #1]
        Line  l  = { p0, p1 };
2000098a:	2508      	movs	r5, #8
2000098c:	197b      	adds	r3, r7, r5
2000098e:	2610      	movs	r6, #16
20000990:	19ba      	adds	r2, r7, r6
20000992:	8812      	ldrh	r2, [r2, #0]
20000994:	801a      	strh	r2, [r3, #0]
20000996:	197b      	adds	r3, r7, r5
20000998:	2102      	movs	r1, #2
2000099a:	0004      	movs	r4, r0
2000099c:	183a      	adds	r2, r7, r0
2000099e:	8812      	ldrh	r2, [r2, #0]
200009a0:	525a      	strh	r2, [r3, r1]
        draw_line(&l);
200009a2:	197b      	adds	r3, r7, r5
200009a4:	0018      	movs	r0, r3
200009a6:	f7ff fe2d 	bl	20000604 <draw_line>
        p0.x = p1.x;
200009aa:	0020      	movs	r0, r4
200009ac:	183b      	adds	r3, r7, r0
200009ae:	2200      	movs	r2, #0
200009b0:	569a      	ldrsb	r2, [r3, r2]
200009b2:	19bb      	adds	r3, r7, r6
200009b4:	701a      	strb	r2, [r3, #0]
        p0.y = p1.y;
200009b6:	183b      	adds	r3, r7, r0
200009b8:	2201      	movs	r2, #1
200009ba:	569a      	ldrsb	r2, [r3, r2]
200009bc:	19bb      	adds	r3, r7, r6
200009be:	705a      	strb	r2, [r3, #1]
        next = next->next;
200009c0:	697b      	ldr	r3, [r7, #20]
200009c2:	685b      	ldr	r3, [r3, #4]
200009c4:	617b      	str	r3, [r7, #20]
    while (next)
200009c6:	697b      	ldr	r3, [r7, #20]
200009c8:	2b00      	cmp	r3, #0
200009ca:	d1d3      	bne.n	20000974 <draw_poly+0x26>
    }
}
200009cc:	46c0      	nop			@ (mov r8, r8)
200009ce:	0018      	movs	r0, r3
200009d0:	46bd      	mov	sp, r7
200009d2:	b007      	add	sp, #28
200009d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

200009d6 <draw_object>:
/// </summary>
/// <param name="obj">
/// The object whose pixels will be drawn to the screen.
/// </param>
void draw_object(P_Object obj)
{
200009d6:	b580      	push	{r7, lr}
200009d8:	b088      	sub	sp, #32
200009da:	af00      	add	r7, sp, #0
200009dc:	6078      	str	r0, [r7, #4]
    const int x = obj->pos_x;
200009de:	687b      	ldr	r3, [r7, #4]
200009e0:	68db      	ldr	r3, [r3, #12]
200009e2:	61bb      	str	r3, [r7, #24]
    const int y = obj->pos_y;
200009e4:	687b      	ldr	r3, [r7, #4]
200009e6:	691b      	ldr	r3, [r3, #16]
200009e8:	617b      	str	r3, [r7, #20]
    P_Point   arr = obj->geo->px;
200009ea:	687b      	ldr	r3, [r7, #4]
200009ec:	681b      	ldr	r3, [r3, #0]
200009ee:	330c      	adds	r3, #12
200009f0:	613b      	str	r3, [r7, #16]

    for (char i = 0; i < obj->geo->num_points; i++) {
200009f2:	231f      	movs	r3, #31
200009f4:	18fb      	adds	r3, r7, r3
200009f6:	2200      	movs	r2, #0
200009f8:	701a      	strb	r2, [r3, #0]
200009fa:	e02e      	b.n	20000a5a <draw_object+0x84>
        int px = x + arr[i].x;
200009fc:	211f      	movs	r1, #31
200009fe:	187b      	adds	r3, r7, r1
20000a00:	781b      	ldrb	r3, [r3, #0]
20000a02:	005b      	lsls	r3, r3, #1
20000a04:	693a      	ldr	r2, [r7, #16]
20000a06:	18d3      	adds	r3, r2, r3
20000a08:	781b      	ldrb	r3, [r3, #0]
20000a0a:	b25b      	sxtb	r3, r3
20000a0c:	001a      	movs	r2, r3
20000a0e:	69bb      	ldr	r3, [r7, #24]
20000a10:	189b      	adds	r3, r3, r2
20000a12:	60fb      	str	r3, [r7, #12]
        int py = y + arr[i].y;
20000a14:	187b      	adds	r3, r7, r1
20000a16:	781b      	ldrb	r3, [r3, #0]
20000a18:	005b      	lsls	r3, r3, #1
20000a1a:	693a      	ldr	r2, [r7, #16]
20000a1c:	18d3      	adds	r3, r2, r3
20000a1e:	785b      	ldrb	r3, [r3, #1]
20000a20:	b25b      	sxtb	r3, r3
20000a22:	001a      	movs	r2, r3
20000a24:	697b      	ldr	r3, [r7, #20]
20000a26:	189b      	adds	r3, r3, r2
20000a28:	60bb      	str	r3, [r7, #8]
        // Only draw if within screen bounds
        if (px >= 0 && px < 128 && py >= 0 && py < 64) {
20000a2a:	68fb      	ldr	r3, [r7, #12]
20000a2c:	2b00      	cmp	r3, #0
20000a2e:	db0e      	blt.n	20000a4e <draw_object+0x78>
20000a30:	68fb      	ldr	r3, [r7, #12]
20000a32:	2b7f      	cmp	r3, #127	@ 0x7f
20000a34:	dc0b      	bgt.n	20000a4e <draw_object+0x78>
20000a36:	68bb      	ldr	r3, [r7, #8]
20000a38:	2b00      	cmp	r3, #0
20000a3a:	db08      	blt.n	20000a4e <draw_object+0x78>
20000a3c:	68bb      	ldr	r3, [r7, #8]
20000a3e:	2b3f      	cmp	r3, #63	@ 0x3f
20000a40:	dc05      	bgt.n	20000a4e <draw_object+0x78>
            graphic_pixel_set(px, py);
20000a42:	68ba      	ldr	r2, [r7, #8]
20000a44:	68fb      	ldr	r3, [r7, #12]
20000a46:	0011      	movs	r1, r2
20000a48:	0018      	movs	r0, r3
20000a4a:	f7ff fdd5 	bl	200005f8 <graphic_pixel_set>
    for (char i = 0; i < obj->geo->num_points; i++) {
20000a4e:	211f      	movs	r1, #31
20000a50:	187b      	adds	r3, r7, r1
20000a52:	781a      	ldrb	r2, [r3, #0]
20000a54:	187b      	adds	r3, r7, r1
20000a56:	3201      	adds	r2, #1
20000a58:	701a      	strb	r2, [r3, #0]
20000a5a:	231f      	movs	r3, #31
20000a5c:	18fb      	adds	r3, r7, r3
20000a5e:	781a      	ldrb	r2, [r3, #0]
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	681b      	ldr	r3, [r3, #0]
20000a64:	681b      	ldr	r3, [r3, #0]
20000a66:	429a      	cmp	r2, r3
20000a68:	dbc8      	blt.n	200009fc <draw_object+0x26>
        }
    }
}
20000a6a:	46c0      	nop			@ (mov r8, r8)
20000a6c:	46c0      	nop			@ (mov r8, r8)
20000a6e:	46bd      	mov	sp, r7
20000a70:	b008      	add	sp, #32
20000a72:	bd80      	pop	{r7, pc}

20000a74 <clear_object>:
/// <summary>
/// Clear an object's off the screen.
/// </summary>
/// <param name="obj">The object whose pixels to delete.</param>
void clear_object(P_Object obj)
{
20000a74:	b580      	push	{r7, lr}
20000a76:	b088      	sub	sp, #32
20000a78:	af00      	add	r7, sp, #0
20000a7a:	6078      	str	r0, [r7, #4]
    const int x = obj->pos_x;
20000a7c:	687b      	ldr	r3, [r7, #4]
20000a7e:	68db      	ldr	r3, [r3, #12]
20000a80:	61bb      	str	r3, [r7, #24]
    const int y = obj->pos_y;
20000a82:	687b      	ldr	r3, [r7, #4]
20000a84:	691b      	ldr	r3, [r3, #16]
20000a86:	617b      	str	r3, [r7, #20]
    P_Point   arr = obj->geo->px;
20000a88:	687b      	ldr	r3, [r7, #4]
20000a8a:	681b      	ldr	r3, [r3, #0]
20000a8c:	330c      	adds	r3, #12
20000a8e:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < obj->geo->num_points; i++) {
20000a90:	2300      	movs	r3, #0
20000a92:	61fb      	str	r3, [r7, #28]
20000a94:	e028      	b.n	20000ae8 <clear_object+0x74>
        int px = x + arr[i].x;
20000a96:	69fb      	ldr	r3, [r7, #28]
20000a98:	005b      	lsls	r3, r3, #1
20000a9a:	693a      	ldr	r2, [r7, #16]
20000a9c:	18d3      	adds	r3, r2, r3
20000a9e:	781b      	ldrb	r3, [r3, #0]
20000aa0:	b25b      	sxtb	r3, r3
20000aa2:	001a      	movs	r2, r3
20000aa4:	69bb      	ldr	r3, [r7, #24]
20000aa6:	189b      	adds	r3, r3, r2
20000aa8:	60fb      	str	r3, [r7, #12]
        int py = y + arr[i].y;
20000aaa:	69fb      	ldr	r3, [r7, #28]
20000aac:	005b      	lsls	r3, r3, #1
20000aae:	693a      	ldr	r2, [r7, #16]
20000ab0:	18d3      	adds	r3, r2, r3
20000ab2:	785b      	ldrb	r3, [r3, #1]
20000ab4:	b25b      	sxtb	r3, r3
20000ab6:	001a      	movs	r2, r3
20000ab8:	697b      	ldr	r3, [r7, #20]
20000aba:	189b      	adds	r3, r3, r2
20000abc:	60bb      	str	r3, [r7, #8]
        // Only clear if within screen bounds
        if (px >= 0 && px < 128 && py >= 0 && py < 64) {
20000abe:	68fb      	ldr	r3, [r7, #12]
20000ac0:	2b00      	cmp	r3, #0
20000ac2:	db0e      	blt.n	20000ae2 <clear_object+0x6e>
20000ac4:	68fb      	ldr	r3, [r7, #12]
20000ac6:	2b7f      	cmp	r3, #127	@ 0x7f
20000ac8:	dc0b      	bgt.n	20000ae2 <clear_object+0x6e>
20000aca:	68bb      	ldr	r3, [r7, #8]
20000acc:	2b00      	cmp	r3, #0
20000ace:	db08      	blt.n	20000ae2 <clear_object+0x6e>
20000ad0:	68bb      	ldr	r3, [r7, #8]
20000ad2:	2b3f      	cmp	r3, #63	@ 0x3f
20000ad4:	dc05      	bgt.n	20000ae2 <clear_object+0x6e>
            graphic_pixel_clear(px, py);
20000ad6:	68ba      	ldr	r2, [r7, #8]
20000ad8:	68fb      	ldr	r3, [r7, #12]
20000ada:	0011      	movs	r1, r2
20000adc:	0018      	movs	r0, r3
20000ade:	f7ff fd8e 	bl	200005fe <graphic_pixel_clear>
    for (int i = 0; i < obj->geo->num_points; i++) {
20000ae2:	69fb      	ldr	r3, [r7, #28]
20000ae4:	3301      	adds	r3, #1
20000ae6:	61fb      	str	r3, [r7, #28]
20000ae8:	687b      	ldr	r3, [r7, #4]
20000aea:	681b      	ldr	r3, [r3, #0]
20000aec:	681b      	ldr	r3, [r3, #0]
20000aee:	69fa      	ldr	r2, [r7, #28]
20000af0:	429a      	cmp	r2, r3
20000af2:	dbd0      	blt.n	20000a96 <clear_object+0x22>
        }
    }
}
20000af4:	46c0      	nop			@ (mov r8, r8)
20000af6:	46c0      	nop			@ (mov r8, r8)
20000af8:	46bd      	mov	sp, r7
20000afa:	b008      	add	sp, #32
20000afc:	bd80      	pop	{r7, pc}

20000afe <abs>:
/// </summary>
/// <param name="nr">
/// The value to retrieve the absolute value from.
/// </param>
i8 abs(i8 nr)
{
20000afe:	b580      	push	{r7, lr}
20000b00:	b082      	sub	sp, #8
20000b02:	af00      	add	r7, sp, #0
20000b04:	0002      	movs	r2, r0
20000b06:	1dfb      	adds	r3, r7, #7
20000b08:	701a      	strb	r2, [r3, #0]
    if (nr < 0) return -nr;
20000b0a:	1dfb      	adds	r3, r7, #7
20000b0c:	781b      	ldrb	r3, [r3, #0]
20000b0e:	2b7f      	cmp	r3, #127	@ 0x7f
20000b10:	d905      	bls.n	20000b1e <abs+0x20>
20000b12:	1dfb      	adds	r3, r7, #7
20000b14:	781b      	ldrb	r3, [r3, #0]
20000b16:	425b      	negs	r3, r3
20000b18:	b2db      	uxtb	r3, r3
20000b1a:	b25b      	sxtb	r3, r3
20000b1c:	e002      	b.n	20000b24 <abs+0x26>
    return nr;
20000b1e:	1dfb      	adds	r3, r7, #7
20000b20:	781b      	ldrb	r3, [r3, #0]
20000b22:	b25b      	sxtb	r3, r3
}
20000b24:	0018      	movs	r0, r3
20000b26:	46bd      	mov	sp, r7
20000b28:	b002      	add	sp, #8
20000b2a:	bd80      	pop	{r7, pc}

20000b2c <swap>:

/// <summary>
/// Swap the values of two chars.
/// </summary>
void swap(i8 *a, i8 *b)
{
20000b2c:	b580      	push	{r7, lr}
20000b2e:	b084      	sub	sp, #16
20000b30:	af00      	add	r7, sp, #0
20000b32:	6078      	str	r0, [r7, #4]
20000b34:	6039      	str	r1, [r7, #0]
    char temp = *a;
20000b36:	687b      	ldr	r3, [r7, #4]
20000b38:	2200      	movs	r2, #0
20000b3a:	569a      	ldrsb	r2, [r3, r2]
20000b3c:	210f      	movs	r1, #15
20000b3e:	187b      	adds	r3, r7, r1
20000b40:	701a      	strb	r2, [r3, #0]
    *a = *b;
20000b42:	683b      	ldr	r3, [r7, #0]
20000b44:	2200      	movs	r2, #0
20000b46:	569a      	ldrsb	r2, [r3, r2]
20000b48:	687b      	ldr	r3, [r7, #4]
20000b4a:	701a      	strb	r2, [r3, #0]
    *b = temp;
20000b4c:	187b      	adds	r3, r7, r1
20000b4e:	2200      	movs	r2, #0
20000b50:	569a      	ldrsb	r2, [r3, r2]
20000b52:	683b      	ldr	r3, [r7, #0]
20000b54:	701a      	strb	r2, [r3, #0]
20000b56:	46c0      	nop			@ (mov r8, r8)
20000b58:	46bd      	mov	sp, r7
20000b5a:	b004      	add	sp, #16
20000b5c:	bd80      	pop	{r7, pc}
	...

20000b60 <keyb>:
20000b60:	b5b0      	push	{r4, r5, r7, lr}
20000b62:	b084      	sub	sp, #16
20000b64:	af00      	add	r7, sp, #0
20000b66:	4b28      	ldr	r3, [pc, #160]	@ (20000c08 <keyb+0xa8>)
20000b68:	2200      	movs	r2, #0
20000b6a:	711a      	strb	r2, [r3, #4]
20000b6c:	4b27      	ldr	r3, [pc, #156]	@ (20000c0c <keyb+0xac>)
20000b6e:	2200      	movs	r2, #0
20000b70:	701a      	strb	r2, [r3, #0]
20000b72:	230f      	movs	r3, #15
20000b74:	18fb      	adds	r3, r7, r3
20000b76:	2204      	movs	r2, #4
20000b78:	701a      	strb	r2, [r3, #0]
20000b7a:	2301      	movs	r3, #1
20000b7c:	60bb      	str	r3, [r7, #8]
20000b7e:	e039      	b.n	20000bf4 <keyb+0x94>
20000b80:	230f      	movs	r3, #15
20000b82:	18fb      	adds	r3, r7, r3
20000b84:	781b      	ldrb	r3, [r3, #0]
20000b86:	2b00      	cmp	r3, #0
20000b88:	d038      	beq.n	20000bfc <keyb+0x9c>
20000b8a:	68bb      	ldr	r3, [r7, #8]
20000b8c:	0018      	movs	r0, r3
20000b8e:	f000 f841 	bl	20000c14 <activate_row>
20000b92:	f000 f86f 	bl	20000c74 <buffered_read_column>
20000b96:	1dfb      	adds	r3, r7, #7
20000b98:	2200      	movs	r2, #0
20000b9a:	701a      	strb	r2, [r3, #0]
20000b9c:	e021      	b.n	20000be2 <keyb+0x82>
20000b9e:	1dfb      	adds	r3, r7, #7
20000ba0:	781b      	ldrb	r3, [r3, #0]
20000ba2:	4a1b      	ldr	r2, [pc, #108]	@ (20000c10 <keyb+0xb0>)
20000ba4:	5cd3      	ldrb	r3, [r2, r3]
20000ba6:	0019      	movs	r1, r3
20000ba8:	250f      	movs	r5, #15
20000baa:	197b      	adds	r3, r7, r5
20000bac:	781b      	ldrb	r3, [r3, #0]
20000bae:	2204      	movs	r2, #4
20000bb0:	1ad4      	subs	r4, r2, r3
20000bb2:	68bb      	ldr	r3, [r7, #8]
20000bb4:	0018      	movs	r0, r3
20000bb6:	f000 f8ad 	bl	20000d14 <key_value>
20000bba:	0003      	movs	r3, r0
20000bbc:	001a      	movs	r2, r3
20000bbe:	4b12      	ldr	r3, [pc, #72]	@ (20000c08 <keyb+0xa8>)
20000bc0:	551a      	strb	r2, [r3, r4]
20000bc2:	4b11      	ldr	r3, [pc, #68]	@ (20000c08 <keyb+0xa8>)
20000bc4:	791b      	ldrb	r3, [r3, #4]
20000bc6:	3301      	adds	r3, #1
20000bc8:	b2da      	uxtb	r2, r3
20000bca:	4b0f      	ldr	r3, [pc, #60]	@ (20000c08 <keyb+0xa8>)
20000bcc:	711a      	strb	r2, [r3, #4]
20000bce:	197b      	adds	r3, r7, r5
20000bd0:	781a      	ldrb	r2, [r3, #0]
20000bd2:	197b      	adds	r3, r7, r5
20000bd4:	3a01      	subs	r2, #1
20000bd6:	701a      	strb	r2, [r3, #0]
20000bd8:	1dfb      	adds	r3, r7, #7
20000bda:	781a      	ldrb	r2, [r3, #0]
20000bdc:	1dfb      	adds	r3, r7, #7
20000bde:	3201      	adds	r2, #1
20000be0:	701a      	strb	r2, [r3, #0]
20000be2:	4b0a      	ldr	r3, [pc, #40]	@ (20000c0c <keyb+0xac>)
20000be4:	781b      	ldrb	r3, [r3, #0]
20000be6:	1dfa      	adds	r2, r7, #7
20000be8:	7812      	ldrb	r2, [r2, #0]
20000bea:	429a      	cmp	r2, r3
20000bec:	d3d7      	bcc.n	20000b9e <keyb+0x3e>
20000bee:	68bb      	ldr	r3, [r7, #8]
20000bf0:	3301      	adds	r3, #1
20000bf2:	60bb      	str	r3, [r7, #8]
20000bf4:	68bb      	ldr	r3, [r7, #8]
20000bf6:	2b04      	cmp	r3, #4
20000bf8:	d9c2      	bls.n	20000b80 <keyb+0x20>
20000bfa:	e000      	b.n	20000bfe <keyb+0x9e>
20000bfc:	46c0      	nop			@ (mov r8, r8)
20000bfe:	4b02      	ldr	r3, [pc, #8]	@ (20000c08 <keyb+0xa8>)
20000c00:	0018      	movs	r0, r3
20000c02:	46bd      	mov	sp, r7
20000c04:	b004      	add	sp, #16
20000c06:	bdb0      	pop	{r4, r5, r7, pc}
20000c08:	20003108 	.word	0x20003108
20000c0c:	20003114 	.word	0x20003114
20000c10:	20003110 	.word	0x20003110

20000c14 <activate_row>:
20000c14:	b580      	push	{r7, lr}
20000c16:	b084      	sub	sp, #16
20000c18:	af00      	add	r7, sp, #0
20000c1a:	6078      	str	r0, [r7, #4]
20000c1c:	4b14      	ldr	r3, [pc, #80]	@ (20000c70 <activate_row+0x5c>)
20000c1e:	60fb      	str	r3, [r7, #12]
20000c20:	687b      	ldr	r3, [r7, #4]
20000c22:	2b04      	cmp	r3, #4
20000c24:	d01b      	beq.n	20000c5e <activate_row+0x4a>
20000c26:	687b      	ldr	r3, [r7, #4]
20000c28:	2b04      	cmp	r3, #4
20000c2a:	d81c      	bhi.n	20000c66 <activate_row+0x52>
20000c2c:	687b      	ldr	r3, [r7, #4]
20000c2e:	2b03      	cmp	r3, #3
20000c30:	d011      	beq.n	20000c56 <activate_row+0x42>
20000c32:	687b      	ldr	r3, [r7, #4]
20000c34:	2b03      	cmp	r3, #3
20000c36:	d816      	bhi.n	20000c66 <activate_row+0x52>
20000c38:	687b      	ldr	r3, [r7, #4]
20000c3a:	2b01      	cmp	r3, #1
20000c3c:	d003      	beq.n	20000c46 <activate_row+0x32>
20000c3e:	687b      	ldr	r3, [r7, #4]
20000c40:	2b02      	cmp	r3, #2
20000c42:	d004      	beq.n	20000c4e <activate_row+0x3a>
20000c44:	e00f      	b.n	20000c66 <activate_row+0x52>
20000c46:	68fb      	ldr	r3, [r7, #12]
20000c48:	2210      	movs	r2, #16
20000c4a:	755a      	strb	r2, [r3, #21]
20000c4c:	e00c      	b.n	20000c68 <activate_row+0x54>
20000c4e:	68fb      	ldr	r3, [r7, #12]
20000c50:	2220      	movs	r2, #32
20000c52:	755a      	strb	r2, [r3, #21]
20000c54:	e008      	b.n	20000c68 <activate_row+0x54>
20000c56:	68fb      	ldr	r3, [r7, #12]
20000c58:	2240      	movs	r2, #64	@ 0x40
20000c5a:	755a      	strb	r2, [r3, #21]
20000c5c:	e004      	b.n	20000c68 <activate_row+0x54>
20000c5e:	68fb      	ldr	r3, [r7, #12]
20000c60:	2280      	movs	r2, #128	@ 0x80
20000c62:	755a      	strb	r2, [r3, #21]
20000c64:	e000      	b.n	20000c68 <activate_row+0x54>
20000c66:	46c0      	nop			@ (mov r8, r8)
20000c68:	46c0      	nop			@ (mov r8, r8)
20000c6a:	46bd      	mov	sp, r7
20000c6c:	b004      	add	sp, #16
20000c6e:	bd80      	pop	{r7, pc}
20000c70:	40020c00 	.word	0x40020c00

20000c74 <buffered_read_column>:
20000c74:	b580      	push	{r7, lr}
20000c76:	b082      	sub	sp, #8
20000c78:	af00      	add	r7, sp, #0
20000c7a:	4b23      	ldr	r3, [pc, #140]	@ (20000d08 <buffered_read_column+0x94>)
20000c7c:	607b      	str	r3, [r7, #4]
20000c7e:	1cfb      	adds	r3, r7, #3
20000c80:	687a      	ldr	r2, [r7, #4]
20000c82:	7c52      	ldrb	r2, [r2, #17]
20000c84:	701a      	strb	r2, [r3, #0]
20000c86:	1cfb      	adds	r3, r7, #3
20000c88:	781b      	ldrb	r3, [r3, #0]
20000c8a:	2208      	movs	r2, #8
20000c8c:	4013      	ands	r3, r2
20000c8e:	d009      	beq.n	20000ca4 <buffered_read_column+0x30>
20000c90:	4b1e      	ldr	r3, [pc, #120]	@ (20000d0c <buffered_read_column+0x98>)
20000c92:	781b      	ldrb	r3, [r3, #0]
20000c94:	1c5a      	adds	r2, r3, #1
20000c96:	b2d1      	uxtb	r1, r2
20000c98:	4a1c      	ldr	r2, [pc, #112]	@ (20000d0c <buffered_read_column+0x98>)
20000c9a:	7011      	strb	r1, [r2, #0]
20000c9c:	001a      	movs	r2, r3
20000c9e:	4b1c      	ldr	r3, [pc, #112]	@ (20000d10 <buffered_read_column+0x9c>)
20000ca0:	2104      	movs	r1, #4
20000ca2:	5499      	strb	r1, [r3, r2]
20000ca4:	1cfb      	adds	r3, r7, #3
20000ca6:	781b      	ldrb	r3, [r3, #0]
20000ca8:	2204      	movs	r2, #4
20000caa:	4013      	ands	r3, r2
20000cac:	d009      	beq.n	20000cc2 <buffered_read_column+0x4e>
20000cae:	4b17      	ldr	r3, [pc, #92]	@ (20000d0c <buffered_read_column+0x98>)
20000cb0:	781b      	ldrb	r3, [r3, #0]
20000cb2:	1c5a      	adds	r2, r3, #1
20000cb4:	b2d1      	uxtb	r1, r2
20000cb6:	4a15      	ldr	r2, [pc, #84]	@ (20000d0c <buffered_read_column+0x98>)
20000cb8:	7011      	strb	r1, [r2, #0]
20000cba:	001a      	movs	r2, r3
20000cbc:	4b14      	ldr	r3, [pc, #80]	@ (20000d10 <buffered_read_column+0x9c>)
20000cbe:	2103      	movs	r1, #3
20000cc0:	5499      	strb	r1, [r3, r2]
20000cc2:	1cfb      	adds	r3, r7, #3
20000cc4:	781b      	ldrb	r3, [r3, #0]
20000cc6:	2202      	movs	r2, #2
20000cc8:	4013      	ands	r3, r2
20000cca:	d009      	beq.n	20000ce0 <buffered_read_column+0x6c>
20000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (20000d0c <buffered_read_column+0x98>)
20000cce:	781b      	ldrb	r3, [r3, #0]
20000cd0:	1c5a      	adds	r2, r3, #1
20000cd2:	b2d1      	uxtb	r1, r2
20000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (20000d0c <buffered_read_column+0x98>)
20000cd6:	7011      	strb	r1, [r2, #0]
20000cd8:	001a      	movs	r2, r3
20000cda:	4b0d      	ldr	r3, [pc, #52]	@ (20000d10 <buffered_read_column+0x9c>)
20000cdc:	2102      	movs	r1, #2
20000cde:	5499      	strb	r1, [r3, r2]
20000ce0:	1cfb      	adds	r3, r7, #3
20000ce2:	781b      	ldrb	r3, [r3, #0]
20000ce4:	2201      	movs	r2, #1
20000ce6:	4013      	ands	r3, r2
20000ce8:	d009      	beq.n	20000cfe <buffered_read_column+0x8a>
20000cea:	4b08      	ldr	r3, [pc, #32]	@ (20000d0c <buffered_read_column+0x98>)
20000cec:	781b      	ldrb	r3, [r3, #0]
20000cee:	1c5a      	adds	r2, r3, #1
20000cf0:	b2d1      	uxtb	r1, r2
20000cf2:	4a06      	ldr	r2, [pc, #24]	@ (20000d0c <buffered_read_column+0x98>)
20000cf4:	7011      	strb	r1, [r2, #0]
20000cf6:	001a      	movs	r2, r3
20000cf8:	4b05      	ldr	r3, [pc, #20]	@ (20000d10 <buffered_read_column+0x9c>)
20000cfa:	2101      	movs	r1, #1
20000cfc:	5499      	strb	r1, [r3, r2]
20000cfe:	46c0      	nop			@ (mov r8, r8)
20000d00:	46bd      	mov	sp, r7
20000d02:	b002      	add	sp, #8
20000d04:	bd80      	pop	{r7, pc}
20000d06:	46c0      	nop			@ (mov r8, r8)
20000d08:	40020c00 	.word	0x40020c00
20000d0c:	20003114 	.word	0x20003114
20000d10:	20003110 	.word	0x20003110

20000d14 <key_value>:
20000d14:	b580      	push	{r7, lr}
20000d16:	b082      	sub	sp, #8
20000d18:	af00      	add	r7, sp, #0
20000d1a:	6078      	str	r0, [r7, #4]
20000d1c:	6039      	str	r1, [r7, #0]
20000d1e:	687b      	ldr	r3, [r7, #4]
20000d20:	3b01      	subs	r3, #1
20000d22:	607b      	str	r3, [r7, #4]
20000d24:	683b      	ldr	r3, [r7, #0]
20000d26:	3b01      	subs	r3, #1
20000d28:	603b      	str	r3, [r7, #0]
20000d2a:	4a05      	ldr	r2, [pc, #20]	@ (20000d40 <key_value+0x2c>)
20000d2c:	687b      	ldr	r3, [r7, #4]
20000d2e:	009b      	lsls	r3, r3, #2
20000d30:	18d2      	adds	r2, r2, r3
20000d32:	683b      	ldr	r3, [r7, #0]
20000d34:	18d3      	adds	r3, r2, r3
20000d36:	781b      	ldrb	r3, [r3, #0]
20000d38:	0018      	movs	r0, r3
20000d3a:	46bd      	mov	sp, r7
20000d3c:	b002      	add	sp, #8
20000d3e:	bd80      	pop	{r7, pc}
20000d40:	20003054 	.word	0x20003054

20000d44 <min>:
#define SCREEN_WIDTH      128
#define SCREEN_HEIGHT     64
#define MAX_LIVES         3

// Helper functions for min and max
int min(int a, int b) {
20000d44:	b580      	push	{r7, lr}
20000d46:	b082      	sub	sp, #8
20000d48:	af00      	add	r7, sp, #0
20000d4a:	6078      	str	r0, [r7, #4]
20000d4c:	6039      	str	r1, [r7, #0]
    return a < b ? a : b;
20000d4e:	687a      	ldr	r2, [r7, #4]
20000d50:	683b      	ldr	r3, [r7, #0]
20000d52:	4293      	cmp	r3, r2
20000d54:	dd00      	ble.n	20000d58 <min+0x14>
20000d56:	0013      	movs	r3, r2
}
20000d58:	0018      	movs	r0, r3
20000d5a:	46bd      	mov	sp, r7
20000d5c:	b002      	add	sp, #8
20000d5e:	bd80      	pop	{r7, pc}

20000d60 <max>:

int max(int a, int b) {
20000d60:	b580      	push	{r7, lr}
20000d62:	b082      	sub	sp, #8
20000d64:	af00      	add	r7, sp, #0
20000d66:	6078      	str	r0, [r7, #4]
20000d68:	6039      	str	r1, [r7, #0]
    return a > b ? a : b;
20000d6a:	687a      	ldr	r2, [r7, #4]
20000d6c:	683b      	ldr	r3, [r7, #0]
20000d6e:	4293      	cmp	r3, r2
20000d70:	da00      	bge.n	20000d74 <max+0x14>
20000d72:	0013      	movs	r3, r2
}
20000d74:	0018      	movs	r0, r3
20000d76:	46bd      	mov	sp, r7
20000d78:	b002      	add	sp, #8
20000d7a:	bd80      	pop	{r7, pc}

20000d7c <app_init>:

// Setup
void app_init(void)
{
20000d7c:	b580      	push	{r7, lr}
20000d7e:	af00      	add	r7, sp, #0
    // Start clocks for port D and port E.
    *(ulong*)0x40023830 = 0x18;
20000d80:	4b1e      	ldr	r3, [pc, #120]	@ (20000dfc <app_init+0x80>)
20000d82:	2218      	movs	r2, #24
20000d84:	601a      	str	r2, [r3, #0]
    // Start clocks for SYSCFG
    *(ulong*)0x40023844 |= 0x4000;
20000d86:	4b1e      	ldr	r3, [pc, #120]	@ (20000e00 <app_init+0x84>)
20000d88:	681a      	ldr	r2, [r3, #0]
20000d8a:	4b1d      	ldr	r3, [pc, #116]	@ (20000e00 <app_init+0x84>)
20000d8c:	2180      	movs	r1, #128	@ 0x80
20000d8e:	01c9      	lsls	r1, r1, #7
20000d90:	430a      	orrs	r2, r1
20000d92:	601a      	str	r2, [r3, #0]

    gpiod->MODER_LOW  =     0x5555;
20000d94:	4b1b      	ldr	r3, [pc, #108]	@ (20000e04 <app_init+0x88>)
20000d96:	681b      	ldr	r3, [r3, #0]
20000d98:	4a1b      	ldr	r2, [pc, #108]	@ (20000e08 <app_init+0x8c>)
20000d9a:	801a      	strh	r2, [r3, #0]
    gpiod->MODER_HIGH =     0x5500;
20000d9c:	4b19      	ldr	r3, [pc, #100]	@ (20000e04 <app_init+0x88>)
20000d9e:	681b      	ldr	r3, [r3, #0]
20000da0:	22aa      	movs	r2, #170	@ 0xaa
20000da2:	01d2      	lsls	r2, r2, #7
20000da4:	805a      	strh	r2, [r3, #2]
    gpiod->OSPEEDR    = 0x55555555;
20000da6:	4b17      	ldr	r3, [pc, #92]	@ (20000e04 <app_init+0x88>)
20000da8:	681b      	ldr	r3, [r3, #0]
20000daa:	4a18      	ldr	r2, [pc, #96]	@ (20000e0c <app_init+0x90>)
20000dac:	609a      	str	r2, [r3, #8]
    gpiod->OTYPER    &=     0x00FF;
20000dae:	4b15      	ldr	r3, [pc, #84]	@ (20000e04 <app_init+0x88>)
20000db0:	681b      	ldr	r3, [r3, #0]
20000db2:	889b      	ldrh	r3, [r3, #4]
20000db4:	b29a      	uxth	r2, r3
20000db6:	4b13      	ldr	r3, [pc, #76]	@ (20000e04 <app_init+0x88>)
20000db8:	681b      	ldr	r3, [r3, #0]
20000dba:	21ff      	movs	r1, #255	@ 0xff
20000dbc:	400a      	ands	r2, r1
20000dbe:	b292      	uxth	r2, r2
20000dc0:	809a      	strh	r2, [r3, #4]
    gpiod->PUPDR     &= 0x0000FFFF;
20000dc2:	4b10      	ldr	r3, [pc, #64]	@ (20000e04 <app_init+0x88>)
20000dc4:	681b      	ldr	r3, [r3, #0]
20000dc6:	68da      	ldr	r2, [r3, #12]
20000dc8:	4b0e      	ldr	r3, [pc, #56]	@ (20000e04 <app_init+0x88>)
20000dca:	681b      	ldr	r3, [r3, #0]
20000dcc:	0412      	lsls	r2, r2, #16
20000dce:	0c12      	lsrs	r2, r2, #16
20000dd0:	60da      	str	r2, [r3, #12]
    gpiod->PUPDR     |= 0x00AA0000;
20000dd2:	4b0c      	ldr	r3, [pc, #48]	@ (20000e04 <app_init+0x88>)
20000dd4:	681b      	ldr	r3, [r3, #0]
20000dd6:	68da      	ldr	r2, [r3, #12]
20000dd8:	4b0a      	ldr	r3, [pc, #40]	@ (20000e04 <app_init+0x88>)
20000dda:	681b      	ldr	r3, [r3, #0]
20000ddc:	21aa      	movs	r1, #170	@ 0xaa
20000dde:	0409      	lsls	r1, r1, #16
20000de0:	430a      	orrs	r2, r1
20000de2:	60da      	str	r2, [r3, #12]

    gpioe->MODER   = 0x00005555;
20000de4:	4b0a      	ldr	r3, [pc, #40]	@ (20000e10 <app_init+0x94>)
20000de6:	681b      	ldr	r3, [r3, #0]
20000de8:	4a07      	ldr	r2, [pc, #28]	@ (20000e08 <app_init+0x8c>)
20000dea:	601a      	str	r2, [r3, #0]
    gpioe->OSPEEDR = 0x55555555;
20000dec:	4b08      	ldr	r3, [pc, #32]	@ (20000e10 <app_init+0x94>)
20000dee:	681b      	ldr	r3, [r3, #0]
20000df0:	4a06      	ldr	r2, [pc, #24]	@ (20000e0c <app_init+0x90>)
20000df2:	609a      	str	r2, [r3, #8]
}
20000df4:	46c0      	nop			@ (mov r8, r8)
20000df6:	46bd      	mov	sp, r7
20000df8:	bd80      	pop	{r7, pc}
20000dfa:	46c0      	nop			@ (mov r8, r8)
20000dfc:	40023830 	.word	0x40023830
20000e00:	40023844 	.word	0x40023844
20000e04:	20002ecc 	.word	0x20002ecc
20000e08:	00005555 	.word	0x00005555
20000e0c:	55555555 	.word	0x55555555
20000e10:	20002ed0 	.word	0x20002ed0

20000e14 <wait_for_start_press>:

// Helper functions
void wait_for_start_press()
{
20000e14:	b580      	push	{r7, lr}
20000e16:	b084      	sub	sp, #16
20000e18:	af00      	add	r7, sp, #0
    bool start = false;
20000e1a:	230f      	movs	r3, #15
20000e1c:	18fb      	adds	r3, r7, r3
20000e1e:	2200      	movs	r2, #0
20000e20:	701a      	strb	r2, [r3, #0]
    while (true)
    {
        Input *keyb_input = keyb();
20000e22:	f7ff fe9d 	bl	20000b60 <keyb>
20000e26:	0003      	movs	r3, r0
20000e28:	60bb      	str	r3, [r7, #8]

        for (u8 i = 0; i < keyb_input->n_presses; i++)
20000e2a:	230e      	movs	r3, #14
20000e2c:	18fb      	adds	r3, r7, r3
20000e2e:	2200      	movs	r2, #0
20000e30:	701a      	strb	r2, [r3, #0]
20000e32:	e015      	b.n	20000e60 <wait_for_start_press+0x4c>
        {
            u8 current_input = keyb_input->buffer[i];
20000e34:	230e      	movs	r3, #14
20000e36:	18fb      	adds	r3, r7, r3
20000e38:	781a      	ldrb	r2, [r3, #0]
20000e3a:	1dfb      	adds	r3, r7, #7
20000e3c:	68b9      	ldr	r1, [r7, #8]
20000e3e:	5c8a      	ldrb	r2, [r1, r2]
20000e40:	701a      	strb	r2, [r3, #0]
            if (current_input == 5) {
20000e42:	1dfb      	adds	r3, r7, #7
20000e44:	781b      	ldrb	r3, [r3, #0]
20000e46:	2b05      	cmp	r3, #5
20000e48:	d104      	bne.n	20000e54 <wait_for_start_press+0x40>
                start = true;
20000e4a:	230f      	movs	r3, #15
20000e4c:	18fb      	adds	r3, r7, r3
20000e4e:	2201      	movs	r2, #1
20000e50:	701a      	strb	r2, [r3, #0]
                break;
20000e52:	e00c      	b.n	20000e6e <wait_for_start_press+0x5a>
        for (u8 i = 0; i < keyb_input->n_presses; i++)
20000e54:	210e      	movs	r1, #14
20000e56:	187b      	adds	r3, r7, r1
20000e58:	781a      	ldrb	r2, [r3, #0]
20000e5a:	187b      	adds	r3, r7, r1
20000e5c:	3201      	adds	r2, #1
20000e5e:	701a      	strb	r2, [r3, #0]
20000e60:	68bb      	ldr	r3, [r7, #8]
20000e62:	791b      	ldrb	r3, [r3, #4]
20000e64:	220e      	movs	r2, #14
20000e66:	18ba      	adds	r2, r7, r2
20000e68:	7812      	ldrb	r2, [r2, #0]
20000e6a:	429a      	cmp	r2, r3
20000e6c:	d3e2      	bcc.n	20000e34 <wait_for_start_press+0x20>
            }
        }

        if (start) break;
20000e6e:	230f      	movs	r3, #15
20000e70:	18fb      	adds	r3, r7, r3
20000e72:	781b      	ldrb	r3, [r3, #0]
20000e74:	2b00      	cmp	r3, #0
20000e76:	d100      	bne.n	20000e7a <wait_for_start_press+0x66>
    {
20000e78:	e7d3      	b.n	20000e22 <wait_for_start_press+0xe>
        if (start) break;
20000e7a:	46c0      	nop			@ (mov r8, r8)
    }
}
20000e7c:	46c0      	nop			@ (mov r8, r8)
20000e7e:	46bd      	mov	sp, r7
20000e80:	b004      	add	sp, #16
20000e82:	bd80      	pop	{r7, pc}

20000e84 <colliding_with_paddle>:

/**
* @brief Checks if the ball collides with the paddle.
*/
bool colliding_with_paddle(P_Object ball, P_Object paddle)
{
20000e84:	b5f0      	push	{r4, r5, r6, r7, lr}
20000e86:	b085      	sub	sp, #20
20000e88:	af00      	add	r7, sp, #0
20000e8a:	6078      	str	r0, [r7, #4]
20000e8c:	6039      	str	r1, [r7, #0]
    i8 ball_min_x = ball->pos_x;
20000e8e:	687b      	ldr	r3, [r7, #4]
20000e90:	68da      	ldr	r2, [r3, #12]
20000e92:	210f      	movs	r1, #15
20000e94:	187b      	adds	r3, r7, r1
20000e96:	701a      	strb	r2, [r3, #0]
    i8 ball_max_x = ball->pos_x + ball->geo->size_x;
20000e98:	687b      	ldr	r3, [r7, #4]
20000e9a:	68db      	ldr	r3, [r3, #12]
20000e9c:	b2da      	uxtb	r2, r3
20000e9e:	687b      	ldr	r3, [r7, #4]
20000ea0:	681b      	ldr	r3, [r3, #0]
20000ea2:	685b      	ldr	r3, [r3, #4]
20000ea4:	b2db      	uxtb	r3, r3
20000ea6:	18d3      	adds	r3, r2, r3
20000ea8:	b2da      	uxtb	r2, r3
20000eaa:	200e      	movs	r0, #14
20000eac:	183b      	adds	r3, r7, r0
20000eae:	701a      	strb	r2, [r3, #0]
    i8 ball_min_y = ball->pos_y;
20000eb0:	687b      	ldr	r3, [r7, #4]
20000eb2:	691a      	ldr	r2, [r3, #16]
20000eb4:	240d      	movs	r4, #13
20000eb6:	193b      	adds	r3, r7, r4
20000eb8:	701a      	strb	r2, [r3, #0]
    i8 ball_max_y = ball->pos_y + ball->geo->size_y;
20000eba:	687b      	ldr	r3, [r7, #4]
20000ebc:	691b      	ldr	r3, [r3, #16]
20000ebe:	b2da      	uxtb	r2, r3
20000ec0:	687b      	ldr	r3, [r7, #4]
20000ec2:	681b      	ldr	r3, [r3, #0]
20000ec4:	689b      	ldr	r3, [r3, #8]
20000ec6:	b2db      	uxtb	r3, r3
20000ec8:	18d3      	adds	r3, r2, r3
20000eca:	b2da      	uxtb	r2, r3
20000ecc:	250c      	movs	r5, #12
20000ece:	197b      	adds	r3, r7, r5
20000ed0:	701a      	strb	r2, [r3, #0]

    i8 paddle_min_x = paddle->pos_x;
20000ed2:	683b      	ldr	r3, [r7, #0]
20000ed4:	68da      	ldr	r2, [r3, #12]
20000ed6:	260b      	movs	r6, #11
20000ed8:	19bb      	adds	r3, r7, r6
20000eda:	701a      	strb	r2, [r3, #0]
    i8 paddle_max_x = paddle->pos_x + paddle->geo->size_x;
20000edc:	683b      	ldr	r3, [r7, #0]
20000ede:	68db      	ldr	r3, [r3, #12]
20000ee0:	b2da      	uxtb	r2, r3
20000ee2:	683b      	ldr	r3, [r7, #0]
20000ee4:	681b      	ldr	r3, [r3, #0]
20000ee6:	685b      	ldr	r3, [r3, #4]
20000ee8:	b2db      	uxtb	r3, r3
20000eea:	18d3      	adds	r3, r2, r3
20000eec:	b2da      	uxtb	r2, r3
20000eee:	230a      	movs	r3, #10
20000ef0:	18fb      	adds	r3, r7, r3
20000ef2:	701a      	strb	r2, [r3, #0]
    i8 paddle_min_y = paddle->pos_y;
20000ef4:	683b      	ldr	r3, [r7, #0]
20000ef6:	691a      	ldr	r2, [r3, #16]
20000ef8:	2309      	movs	r3, #9
20000efa:	18fb      	adds	r3, r7, r3
20000efc:	701a      	strb	r2, [r3, #0]
    i8 paddle_max_y = paddle->pos_y + paddle->geo->size_y;
20000efe:	683b      	ldr	r3, [r7, #0]
20000f00:	691b      	ldr	r3, [r3, #16]
20000f02:	b2da      	uxtb	r2, r3
20000f04:	683b      	ldr	r3, [r7, #0]
20000f06:	681b      	ldr	r3, [r3, #0]
20000f08:	689b      	ldr	r3, [r3, #8]
20000f0a:	b2db      	uxtb	r3, r3
20000f0c:	18d3      	adds	r3, r2, r3
20000f0e:	b2da      	uxtb	r2, r3
20000f10:	2308      	movs	r3, #8
20000f12:	18fb      	adds	r3, r7, r3
20000f14:	701a      	strb	r2, [r3, #0]
        ball_min_x <= paddle_max_x
        &&
        ball_max_x >= paddle_min_x
        &&
        ball_min_y <= paddle_max_y
        &&
20000f16:	187a      	adds	r2, r7, r1
20000f18:	230a      	movs	r3, #10
20000f1a:	18fb      	adds	r3, r7, r3
20000f1c:	7812      	ldrb	r2, [r2, #0]
20000f1e:	b252      	sxtb	r2, r2
20000f20:	781b      	ldrb	r3, [r3, #0]
20000f22:	b25b      	sxtb	r3, r3
20000f24:	429a      	cmp	r2, r3
20000f26:	dc1b      	bgt.n	20000f60 <colliding_with_paddle+0xdc>
        &&
20000f28:	183a      	adds	r2, r7, r0
20000f2a:	19bb      	adds	r3, r7, r6
20000f2c:	7812      	ldrb	r2, [r2, #0]
20000f2e:	b252      	sxtb	r2, r2
20000f30:	781b      	ldrb	r3, [r3, #0]
20000f32:	b25b      	sxtb	r3, r3
20000f34:	429a      	cmp	r2, r3
20000f36:	db13      	blt.n	20000f60 <colliding_with_paddle+0xdc>
        &&
20000f38:	193a      	adds	r2, r7, r4
20000f3a:	2108      	movs	r1, #8
20000f3c:	187b      	adds	r3, r7, r1
20000f3e:	7812      	ldrb	r2, [r2, #0]
20000f40:	b252      	sxtb	r2, r2
20000f42:	781b      	ldrb	r3, [r3, #0]
20000f44:	b25b      	sxtb	r3, r3
20000f46:	429a      	cmp	r2, r3
20000f48:	dc0a      	bgt.n	20000f60 <colliding_with_paddle+0xdc>
        &&
20000f4a:	197a      	adds	r2, r7, r5
20000f4c:	2309      	movs	r3, #9
20000f4e:	18fb      	adds	r3, r7, r3
20000f50:	7812      	ldrb	r2, [r2, #0]
20000f52:	b252      	sxtb	r2, r2
20000f54:	781b      	ldrb	r3, [r3, #0]
20000f56:	b25b      	sxtb	r3, r3
20000f58:	429a      	cmp	r2, r3
20000f5a:	db01      	blt.n	20000f60 <colliding_with_paddle+0xdc>
20000f5c:	2301      	movs	r3, #1
20000f5e:	e000      	b.n	20000f62 <colliding_with_paddle+0xde>
20000f60:	2300      	movs	r3, #0
20000f62:	b2db      	uxtb	r3, r3
        ball_max_y >= paddle_min_y;
}
20000f64:	0018      	movs	r0, r3
20000f66:	46bd      	mov	sp, r7
20000f68:	b005      	add	sp, #20
20000f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

20000f6c <move_object>:

/**
* @brief Moves an object one "tick" by updating its coordinates with its speed.
*/
void move_object(P_Object object)
{
20000f6c:	b580      	push	{r7, lr}
20000f6e:	b082      	sub	sp, #8
20000f70:	af00      	add	r7, sp, #0
20000f72:	6078      	str	r0, [r7, #4]
    // Clear the object temporarily from the screen
    object->clear(object);
20000f74:	687b      	ldr	r3, [r7, #4]
20000f76:	699b      	ldr	r3, [r3, #24]
20000f78:	687a      	ldr	r2, [r7, #4]
20000f7a:	0010      	movs	r0, r2
20000f7c:	4798      	blx	r3

    // Update the position of the object
    object->pos_x += object->dir_x;
20000f7e:	687b      	ldr	r3, [r7, #4]
20000f80:	68da      	ldr	r2, [r3, #12]
20000f82:	687b      	ldr	r3, [r7, #4]
20000f84:	685b      	ldr	r3, [r3, #4]
20000f86:	18d2      	adds	r2, r2, r3
20000f88:	687b      	ldr	r3, [r7, #4]
20000f8a:	60da      	str	r2, [r3, #12]
    object->pos_y += object->dir_y;
20000f8c:	687b      	ldr	r3, [r7, #4]
20000f8e:	691a      	ldr	r2, [r3, #16]
20000f90:	687b      	ldr	r3, [r7, #4]
20000f92:	689b      	ldr	r3, [r3, #8]
20000f94:	18d2      	adds	r2, r2, r3
20000f96:	687b      	ldr	r3, [r7, #4]
20000f98:	611a      	str	r2, [r3, #16]

    // Draw the object with its new positions
    draw_object(object);
20000f9a:	687b      	ldr	r3, [r7, #4]
20000f9c:	0018      	movs	r0, r3
20000f9e:	f7ff fd1a 	bl	200009d6 <draw_object>
}
20000fa2:	46c0      	nop			@ (mov r8, r8)
20000fa4:	46bd      	mov	sp, r7
20000fa6:	b002      	add	sp, #8
20000fa8:	bd80      	pop	{r7, pc}

20000faa <set_object_speed>:

/**
* @brief Sets the speed of the given object
*/
void set_object_speed(P_Object object, int speed_x, int speed_y)
{
20000faa:	b580      	push	{r7, lr}
20000fac:	b084      	sub	sp, #16
20000fae:	af00      	add	r7, sp, #0
20000fb0:	60f8      	str	r0, [r7, #12]
20000fb2:	60b9      	str	r1, [r7, #8]
20000fb4:	607a      	str	r2, [r7, #4]
    object->dir_x = speed_x;
20000fb6:	68fb      	ldr	r3, [r7, #12]
20000fb8:	68ba      	ldr	r2, [r7, #8]
20000fba:	605a      	str	r2, [r3, #4]
    object->dir_y = speed_y;
20000fbc:	68fb      	ldr	r3, [r7, #12]
20000fbe:	687a      	ldr	r2, [r7, #4]
20000fc0:	609a      	str	r2, [r3, #8]
}
20000fc2:	46c0      	nop			@ (mov r8, r8)
20000fc4:	46bd      	mov	sp, r7
20000fc6:	b004      	add	sp, #16
20000fc8:	bd80      	pop	{r7, pc}

20000fca <check_wall_collision>:

/**
* @brief Checks if the ball collides with a wall.
*/
WallCollision check_wall_collision(P_Object ball)
{
20000fca:	b580      	push	{r7, lr}
20000fcc:	b08c      	sub	sp, #48	@ 0x30
20000fce:	af00      	add	r7, sp, #0
20000fd0:	6078      	str	r0, [r7, #4]
    i16 ball_min_x = ball->pos_x;
20000fd2:	687b      	ldr	r3, [r7, #4]
20000fd4:	68da      	ldr	r2, [r3, #12]
20000fd6:	212e      	movs	r1, #46	@ 0x2e
20000fd8:	187b      	adds	r3, r7, r1
20000fda:	801a      	strh	r2, [r3, #0]
    i16 ball_max_x = ball->pos_x + ball->geo->size_x;
20000fdc:	687b      	ldr	r3, [r7, #4]
20000fde:	68db      	ldr	r3, [r3, #12]
20000fe0:	b29a      	uxth	r2, r3
20000fe2:	687b      	ldr	r3, [r7, #4]
20000fe4:	681b      	ldr	r3, [r3, #0]
20000fe6:	685b      	ldr	r3, [r3, #4]
20000fe8:	b29b      	uxth	r3, r3
20000fea:	18d3      	adds	r3, r2, r3
20000fec:	b29a      	uxth	r2, r3
20000fee:	232c      	movs	r3, #44	@ 0x2c
20000ff0:	18fb      	adds	r3, r7, r3
20000ff2:	801a      	strh	r2, [r3, #0]
    i16 ball_min_y = ball->pos_y;
20000ff4:	687b      	ldr	r3, [r7, #4]
20000ff6:	691a      	ldr	r2, [r3, #16]
20000ff8:	232a      	movs	r3, #42	@ 0x2a
20000ffa:	18fb      	adds	r3, r7, r3
20000ffc:	801a      	strh	r2, [r3, #0]
    i16 ball_max_y = ball->pos_y + ball->geo->size_y;
20000ffe:	687b      	ldr	r3, [r7, #4]
20001000:	691b      	ldr	r3, [r3, #16]
20001002:	b29a      	uxth	r2, r3
20001004:	687b      	ldr	r3, [r7, #4]
20001006:	681b      	ldr	r3, [r3, #0]
20001008:	689b      	ldr	r3, [r3, #8]
2000100a:	b29b      	uxth	r3, r3
2000100c:	18d3      	adds	r3, r2, r3
2000100e:	b29a      	uxth	r2, r3
20001010:	2328      	movs	r3, #40	@ 0x28
20001012:	18fb      	adds	r3, r7, r3
20001014:	801a      	strh	r2, [r3, #0]
    WallCollision result;

    // Check left wall collision
    if (ball_min_x < 1) {
20001016:	187b      	adds	r3, r7, r1
20001018:	2200      	movs	r2, #0
2000101a:	5e9b      	ldrsh	r3, [r3, r2]
2000101c:	2b00      	cmp	r3, #0
2000101e:	dc0a      	bgt.n	20001036 <check_wall_collision+0x6c>
        result = (WallCollision) { .is_colliding = true, .which = 'l'};
20001020:	2120      	movs	r1, #32
20001022:	187b      	adds	r3, r7, r1
20001024:	4a2c      	ldr	r2, [pc, #176]	@ (200010d8 <check_wall_collision+0x10e>)
20001026:	8812      	ldrh	r2, [r2, #0]
20001028:	801a      	strh	r2, [r3, #0]
        return result;
2000102a:	2324      	movs	r3, #36	@ 0x24
2000102c:	18fb      	adds	r3, r7, r3
2000102e:	187a      	adds	r2, r7, r1
20001030:	8812      	ldrh	r2, [r2, #0]
20001032:	801a      	strh	r2, [r3, #0]
20001034:	e03b      	b.n	200010ae <check_wall_collision+0xe4>
    }
    // Check right wall collision
    if (ball_max_x > SCREEN_WIDTH) {
20001036:	232c      	movs	r3, #44	@ 0x2c
20001038:	18fb      	adds	r3, r7, r3
2000103a:	2200      	movs	r2, #0
2000103c:	5e9b      	ldrsh	r3, [r3, r2]
2000103e:	2b80      	cmp	r3, #128	@ 0x80
20001040:	dd0a      	ble.n	20001058 <check_wall_collision+0x8e>
        result = (WallCollision) { .is_colliding = true, .which = 'r'};
20001042:	2120      	movs	r1, #32
20001044:	187b      	adds	r3, r7, r1
20001046:	4a25      	ldr	r2, [pc, #148]	@ (200010dc <check_wall_collision+0x112>)
20001048:	8812      	ldrh	r2, [r2, #0]
2000104a:	801a      	strh	r2, [r3, #0]
        return result;
2000104c:	2324      	movs	r3, #36	@ 0x24
2000104e:	18fb      	adds	r3, r7, r3
20001050:	187a      	adds	r2, r7, r1
20001052:	8812      	ldrh	r2, [r2, #0]
20001054:	801a      	strh	r2, [r3, #0]
20001056:	e02a      	b.n	200010ae <check_wall_collision+0xe4>
    }
    // Check upper wall collision
    if (ball_min_y < 1) {
20001058:	232a      	movs	r3, #42	@ 0x2a
2000105a:	18fb      	adds	r3, r7, r3
2000105c:	2200      	movs	r2, #0
2000105e:	5e9b      	ldrsh	r3, [r3, r2]
20001060:	2b00      	cmp	r3, #0
20001062:	dc0a      	bgt.n	2000107a <check_wall_collision+0xb0>
        result = (WallCollision) { .is_colliding = true, .which = 'u'};
20001064:	2120      	movs	r1, #32
20001066:	187b      	adds	r3, r7, r1
20001068:	4a1d      	ldr	r2, [pc, #116]	@ (200010e0 <check_wall_collision+0x116>)
2000106a:	8812      	ldrh	r2, [r2, #0]
2000106c:	801a      	strh	r2, [r3, #0]
        return result;
2000106e:	2324      	movs	r3, #36	@ 0x24
20001070:	18fb      	adds	r3, r7, r3
20001072:	187a      	adds	r2, r7, r1
20001074:	8812      	ldrh	r2, [r2, #0]
20001076:	801a      	strh	r2, [r3, #0]
20001078:	e019      	b.n	200010ae <check_wall_collision+0xe4>
    }
    // Check lower wall collision (game over)
    if (ball_max_y > SCREEN_HEIGHT) {
2000107a:	2328      	movs	r3, #40	@ 0x28
2000107c:	18fb      	adds	r3, r7, r3
2000107e:	2200      	movs	r2, #0
20001080:	5e9b      	ldrsh	r3, [r3, r2]
20001082:	2b40      	cmp	r3, #64	@ 0x40
20001084:	dd0a      	ble.n	2000109c <check_wall_collision+0xd2>
        result = (WallCollision) { .is_colliding = true, .which = 'd'};
20001086:	2120      	movs	r1, #32
20001088:	187b      	adds	r3, r7, r1
2000108a:	4a16      	ldr	r2, [pc, #88]	@ (200010e4 <check_wall_collision+0x11a>)
2000108c:	8812      	ldrh	r2, [r2, #0]
2000108e:	801a      	strh	r2, [r3, #0]
        return result;
20001090:	2324      	movs	r3, #36	@ 0x24
20001092:	18fb      	adds	r3, r7, r3
20001094:	187a      	adds	r2, r7, r1
20001096:	8812      	ldrh	r2, [r2, #0]
20001098:	801a      	strh	r2, [r3, #0]
2000109a:	e008      	b.n	200010ae <check_wall_collision+0xe4>
    }
    // When no wall collision occurs
    result = (WallCollision){ false };
2000109c:	2120      	movs	r1, #32
2000109e:	187b      	adds	r3, r7, r1
200010a0:	2200      	movs	r2, #0
200010a2:	801a      	strh	r2, [r3, #0]
    return result;
200010a4:	2324      	movs	r3, #36	@ 0x24
200010a6:	18fb      	adds	r3, r7, r3
200010a8:	187a      	adds	r2, r7, r1
200010aa:	8812      	ldrh	r2, [r2, #0]
200010ac:	801a      	strh	r2, [r3, #0]
}
200010ae:	2324      	movs	r3, #36	@ 0x24
200010b0:	18fa      	adds	r2, r7, r3
200010b2:	2300      	movs	r3, #0
200010b4:	7811      	ldrb	r1, [r2, #0]
200010b6:	20ff      	movs	r0, #255	@ 0xff
200010b8:	4001      	ands	r1, r0
200010ba:	20ff      	movs	r0, #255	@ 0xff
200010bc:	4383      	bics	r3, r0
200010be:	430b      	orrs	r3, r1
200010c0:	7852      	ldrb	r2, [r2, #1]
200010c2:	21ff      	movs	r1, #255	@ 0xff
200010c4:	400a      	ands	r2, r1
200010c6:	0212      	lsls	r2, r2, #8
200010c8:	4907      	ldr	r1, [pc, #28]	@ (200010e8 <check_wall_collision+0x11e>)
200010ca:	400b      	ands	r3, r1
200010cc:	4313      	orrs	r3, r2
200010ce:	1c18      	adds	r0, r3, #0
200010d0:	46bd      	mov	sp, r7
200010d2:	b00c      	add	sp, #48	@ 0x30
200010d4:	bd80      	pop	{r7, pc}
200010d6:	46c0      	nop			@ (mov r8, r8)
200010d8:	20003074 	.word	0x20003074
200010dc:	20003078 	.word	0x20003078
200010e0:	2000307c 	.word	0x2000307c
200010e4:	20003080 	.word	0x20003080
200010e8:	ffff00ff 	.word	0xffff00ff

200010ec <reset_game_objects>:

/**
* @brief Reset the ball and paddle to initial positions
*/
void reset_game_objects(P_Object ball, P_Object paddle)
{
200010ec:	b580      	push	{r7, lr}
200010ee:	b082      	sub	sp, #8
200010f0:	af00      	add	r7, sp, #0
200010f2:	6078      	str	r0, [r7, #4]
200010f4:	6039      	str	r1, [r7, #0]
    // Reset ball - start from the middle of the paddle with upward trajectory
    ball->dir_x = 4;  // Increased to 4 for faster horizontal movement
200010f6:	687b      	ldr	r3, [r7, #4]
200010f8:	2204      	movs	r2, #4
200010fa:	605a      	str	r2, [r3, #4]
    ball->dir_y = -5; // Increased to -5 for faster vertical movement
200010fc:	687b      	ldr	r3, [r7, #4]
200010fe:	2205      	movs	r2, #5
20001100:	4252      	negs	r2, r2
20001102:	609a      	str	r2, [r3, #8]
    ball->pos_x = SCREEN_WIDTH / 2 - ball->geo->size_x / 2;
20001104:	687b      	ldr	r3, [r7, #4]
20001106:	681b      	ldr	r3, [r3, #0]
20001108:	685b      	ldr	r3, [r3, #4]
2000110a:	2b00      	cmp	r3, #0
2000110c:	da00      	bge.n	20001110 <reset_game_objects+0x24>
2000110e:	3301      	adds	r3, #1
20001110:	105b      	asrs	r3, r3, #1
20001112:	425b      	negs	r3, r3
20001114:	3340      	adds	r3, #64	@ 0x40
20001116:	001a      	movs	r2, r3
20001118:	687b      	ldr	r3, [r7, #4]
2000111a:	60da      	str	r2, [r3, #12]
    ball->pos_y = SCREEN_HEIGHT - 12; // Start a bit higher for better visibility
2000111c:	687b      	ldr	r3, [r7, #4]
2000111e:	2234      	movs	r2, #52	@ 0x34
20001120:	611a      	str	r2, [r3, #16]

    // Reset paddle
    paddle->dir_x = 0;
20001122:	683b      	ldr	r3, [r7, #0]
20001124:	2200      	movs	r2, #0
20001126:	605a      	str	r2, [r3, #4]
    paddle->dir_y = 0;
20001128:	683b      	ldr	r3, [r7, #0]
2000112a:	2200      	movs	r2, #0
2000112c:	609a      	str	r2, [r3, #8]
    paddle->pos_x = SCREEN_WIDTH / 2 - paddle->geo->size_x / 2;
2000112e:	683b      	ldr	r3, [r7, #0]
20001130:	681b      	ldr	r3, [r3, #0]
20001132:	685b      	ldr	r3, [r3, #4]
20001134:	2b00      	cmp	r3, #0
20001136:	da00      	bge.n	2000113a <reset_game_objects+0x4e>
20001138:	3301      	adds	r3, #1
2000113a:	105b      	asrs	r3, r3, #1
2000113c:	425b      	negs	r3, r3
2000113e:	3340      	adds	r3, #64	@ 0x40
20001140:	001a      	movs	r2, r3
20001142:	683b      	ldr	r3, [r7, #0]
20001144:	60da      	str	r2, [r3, #12]
    paddle->pos_y = SCREEN_HEIGHT - 6;
20001146:	683b      	ldr	r3, [r7, #0]
20001148:	223a      	movs	r2, #58	@ 0x3a
2000114a:	611a      	str	r2, [r3, #16]
}
2000114c:	46c0      	nop			@ (mov r8, r8)
2000114e:	46bd      	mov	sp, r7
20001150:	b002      	add	sp, #8
20001152:	bd80      	pop	{r7, pc}

20001154 <colliding_with_brick>:

/**
* @brief Checks if ball collides with a brick
*/
bool colliding_with_brick(P_Object ball, Rect brick)
{
20001154:	b5f0      	push	{r4, r5, r6, r7, lr}
20001156:	b085      	sub	sp, #20
20001158:	af00      	add	r7, sp, #0
2000115a:	6078      	str	r0, [r7, #4]
2000115c:	003b      	movs	r3, r7
2000115e:	6019      	str	r1, [r3, #0]
    i8 ball_min_x = ball->pos_x;
20001160:	687b      	ldr	r3, [r7, #4]
20001162:	68da      	ldr	r2, [r3, #12]
20001164:	210f      	movs	r1, #15
20001166:	187b      	adds	r3, r7, r1
20001168:	701a      	strb	r2, [r3, #0]
    i8 ball_max_x = ball->pos_x + ball->geo->size_x;
2000116a:	687b      	ldr	r3, [r7, #4]
2000116c:	68db      	ldr	r3, [r3, #12]
2000116e:	b2da      	uxtb	r2, r3
20001170:	687b      	ldr	r3, [r7, #4]
20001172:	681b      	ldr	r3, [r3, #0]
20001174:	685b      	ldr	r3, [r3, #4]
20001176:	b2db      	uxtb	r3, r3
20001178:	18d3      	adds	r3, r2, r3
2000117a:	b2da      	uxtb	r2, r3
2000117c:	200e      	movs	r0, #14
2000117e:	183b      	adds	r3, r7, r0
20001180:	701a      	strb	r2, [r3, #0]
    i8 ball_min_y = ball->pos_y;
20001182:	687b      	ldr	r3, [r7, #4]
20001184:	691a      	ldr	r2, [r3, #16]
20001186:	240d      	movs	r4, #13
20001188:	193b      	adds	r3, r7, r4
2000118a:	701a      	strb	r2, [r3, #0]
    i8 ball_max_y = ball->pos_y + ball->geo->size_y;
2000118c:	687b      	ldr	r3, [r7, #4]
2000118e:	691b      	ldr	r3, [r3, #16]
20001190:	b2da      	uxtb	r2, r3
20001192:	687b      	ldr	r3, [r7, #4]
20001194:	681b      	ldr	r3, [r3, #0]
20001196:	689b      	ldr	r3, [r3, #8]
20001198:	b2db      	uxtb	r3, r3
2000119a:	18d3      	adds	r3, r2, r3
2000119c:	b2da      	uxtb	r2, r3
2000119e:	250c      	movs	r5, #12
200011a0:	197b      	adds	r3, r7, r5
200011a2:	701a      	strb	r2, [r3, #0]

    i8 brick_min_x = brick.origin.x;
200011a4:	260b      	movs	r6, #11
200011a6:	19bb      	adds	r3, r7, r6
200011a8:	003a      	movs	r2, r7
200011aa:	7812      	ldrb	r2, [r2, #0]
200011ac:	701a      	strb	r2, [r3, #0]
    i8 brick_max_x = brick.origin.x + brick.dimen.x;
200011ae:	003b      	movs	r3, r7
200011b0:	781b      	ldrb	r3, [r3, #0]
200011b2:	b25b      	sxtb	r3, r3
200011b4:	b2da      	uxtb	r2, r3
200011b6:	003b      	movs	r3, r7
200011b8:	789b      	ldrb	r3, [r3, #2]
200011ba:	b25b      	sxtb	r3, r3
200011bc:	b2db      	uxtb	r3, r3
200011be:	18d3      	adds	r3, r2, r3
200011c0:	b2da      	uxtb	r2, r3
200011c2:	230a      	movs	r3, #10
200011c4:	18fb      	adds	r3, r7, r3
200011c6:	701a      	strb	r2, [r3, #0]
    i8 brick_min_y = brick.origin.y;
200011c8:	2209      	movs	r2, #9
200011ca:	18bb      	adds	r3, r7, r2
200011cc:	003a      	movs	r2, r7
200011ce:	7852      	ldrb	r2, [r2, #1]
200011d0:	701a      	strb	r2, [r3, #0]
    i8 brick_max_y = brick.origin.y + brick.dimen.y;
200011d2:	003b      	movs	r3, r7
200011d4:	785b      	ldrb	r3, [r3, #1]
200011d6:	b25b      	sxtb	r3, r3
200011d8:	b2da      	uxtb	r2, r3
200011da:	003b      	movs	r3, r7
200011dc:	78db      	ldrb	r3, [r3, #3]
200011de:	b25b      	sxtb	r3, r3
200011e0:	b2db      	uxtb	r3, r3
200011e2:	18d3      	adds	r3, r2, r3
200011e4:	b2da      	uxtb	r2, r3
200011e6:	2308      	movs	r3, #8
200011e8:	18fb      	adds	r3, r7, r3
200011ea:	701a      	strb	r2, [r3, #0]
        ball_min_x <= brick_max_x
        &&
        ball_max_x >= brick_min_x
        &&
        ball_min_y <= brick_max_y
        &&
200011ec:	187a      	adds	r2, r7, r1
200011ee:	230a      	movs	r3, #10
200011f0:	18fb      	adds	r3, r7, r3
200011f2:	7812      	ldrb	r2, [r2, #0]
200011f4:	b252      	sxtb	r2, r2
200011f6:	781b      	ldrb	r3, [r3, #0]
200011f8:	b25b      	sxtb	r3, r3
200011fa:	429a      	cmp	r2, r3
200011fc:	dc1b      	bgt.n	20001236 <colliding_with_brick+0xe2>
        &&
200011fe:	183a      	adds	r2, r7, r0
20001200:	19bb      	adds	r3, r7, r6
20001202:	7812      	ldrb	r2, [r2, #0]
20001204:	b252      	sxtb	r2, r2
20001206:	781b      	ldrb	r3, [r3, #0]
20001208:	b25b      	sxtb	r3, r3
2000120a:	429a      	cmp	r2, r3
2000120c:	db13      	blt.n	20001236 <colliding_with_brick+0xe2>
        &&
2000120e:	193a      	adds	r2, r7, r4
20001210:	2108      	movs	r1, #8
20001212:	187b      	adds	r3, r7, r1
20001214:	7812      	ldrb	r2, [r2, #0]
20001216:	b252      	sxtb	r2, r2
20001218:	781b      	ldrb	r3, [r3, #0]
2000121a:	b25b      	sxtb	r3, r3
2000121c:	429a      	cmp	r2, r3
2000121e:	dc0a      	bgt.n	20001236 <colliding_with_brick+0xe2>
        &&
20001220:	197a      	adds	r2, r7, r5
20001222:	2309      	movs	r3, #9
20001224:	18fb      	adds	r3, r7, r3
20001226:	7812      	ldrb	r2, [r2, #0]
20001228:	b252      	sxtb	r2, r2
2000122a:	781b      	ldrb	r3, [r3, #0]
2000122c:	b25b      	sxtb	r3, r3
2000122e:	429a      	cmp	r2, r3
20001230:	db01      	blt.n	20001236 <colliding_with_brick+0xe2>
20001232:	2301      	movs	r3, #1
20001234:	e000      	b.n	20001238 <colliding_with_brick+0xe4>
20001236:	2300      	movs	r3, #0
20001238:	b2db      	uxtb	r3, r3
        ball_max_y >= brick_min_y;
}
2000123a:	0018      	movs	r0, r3
2000123c:	46bd      	mov	sp, r7
2000123e:	b005      	add	sp, #20
20001240:	bdf0      	pop	{r4, r5, r6, r7, pc}

20001242 <game_over>:

/**
* @brief Display game over screen with final score
*/
void game_over(int score, bool win)
{
20001242:	b580      	push	{r7, lr}
20001244:	b086      	sub	sp, #24
20001246:	af00      	add	r7, sp, #0
20001248:	6078      	str	r0, [r7, #4]
2000124a:	000a      	movs	r2, r1
2000124c:	1cfb      	adds	r3, r7, #3
2000124e:	701a      	strb	r2, [r3, #0]
    graphic_clear_screen();
20001250:	f7ff f9cf 	bl	200005f2 <graphic_clear_screen>
    ascii_command(0b00000001, delay_milli, 2); // Clear display
20001254:	4b37      	ldr	r3, [pc, #220]	@ (20001334 <game_over+0xf2>)
20001256:	2202      	movs	r2, #2
20001258:	0019      	movs	r1, r3
2000125a:	2001      	movs	r0, #1
2000125c:	f7fe ffbe 	bl	200001dc <ascii_command>
    
    char* game_result = win ? "You Win!" : "Game Over!";
20001260:	1cfb      	adds	r3, r7, #3
20001262:	781b      	ldrb	r3, [r3, #0]
20001264:	2b00      	cmp	r3, #0
20001266:	d001      	beq.n	2000126c <game_over+0x2a>
20001268:	4b33      	ldr	r3, [pc, #204]	@ (20001338 <game_over+0xf6>)
2000126a:	e000      	b.n	2000126e <game_over+0x2c>
2000126c:	4b33      	ldr	r3, [pc, #204]	@ (2000133c <game_over+0xfa>)
2000126e:	613b      	str	r3, [r7, #16]
    char score_text[] = "Score: ";
20001270:	2308      	movs	r3, #8
20001272:	18fb      	adds	r3, r7, r3
20001274:	4a32      	ldr	r2, [pc, #200]	@ (20001340 <game_over+0xfe>)
20001276:	ca03      	ldmia	r2!, {r0, r1}
20001278:	c303      	stmia	r3!, {r0, r1}
    char* s;
    
    ascii_goto(1, 1);
2000127a:	2101      	movs	r1, #1
2000127c:	2001      	movs	r0, #1
2000127e:	f7ff f815 	bl	200002ac <ascii_goto>
    s = game_result;
20001282:	693b      	ldr	r3, [r7, #16]
20001284:	617b      	str	r3, [r7, #20]
    while (*s)
20001286:	e006      	b.n	20001296 <game_over+0x54>
        ascii_write_char(*s++);
20001288:	697b      	ldr	r3, [r7, #20]
2000128a:	1c5a      	adds	r2, r3, #1
2000128c:	617a      	str	r2, [r7, #20]
2000128e:	781b      	ldrb	r3, [r3, #0]
20001290:	0018      	movs	r0, r3
20001292:	f7ff f826 	bl	200002e2 <ascii_write_char>
    while (*s)
20001296:	697b      	ldr	r3, [r7, #20]
20001298:	781b      	ldrb	r3, [r3, #0]
2000129a:	2b00      	cmp	r3, #0
2000129c:	d1f4      	bne.n	20001288 <game_over+0x46>
        
    ascii_goto(1, 2);
2000129e:	2102      	movs	r1, #2
200012a0:	2001      	movs	r0, #1
200012a2:	f7ff f803 	bl	200002ac <ascii_goto>
    s = score_text;
200012a6:	2308      	movs	r3, #8
200012a8:	18fb      	adds	r3, r7, r3
200012aa:	617b      	str	r3, [r7, #20]
    while (*s)
200012ac:	e006      	b.n	200012bc <game_over+0x7a>
        ascii_write_char(*s++);
200012ae:	697b      	ldr	r3, [r7, #20]
200012b0:	1c5a      	adds	r2, r3, #1
200012b2:	617a      	str	r2, [r7, #20]
200012b4:	781b      	ldrb	r3, [r3, #0]
200012b6:	0018      	movs	r0, r3
200012b8:	f7ff f813 	bl	200002e2 <ascii_write_char>
    while (*s)
200012bc:	697b      	ldr	r3, [r7, #20]
200012be:	781b      	ldrb	r3, [r3, #0]
200012c0:	2b00      	cmp	r3, #0
200012c2:	d1f4      	bne.n	200012ae <game_over+0x6c>
        
    // Convert score to string and display
    if (score >= 100)
200012c4:	687b      	ldr	r3, [r7, #4]
200012c6:	2b63      	cmp	r3, #99	@ 0x63
200012c8:	dd0b      	ble.n	200012e2 <game_over+0xa0>
        ascii_write_char('0' + score / 100);
200012ca:	687b      	ldr	r3, [r7, #4]
200012cc:	2164      	movs	r1, #100	@ 0x64
200012ce:	0018      	movs	r0, r3
200012d0:	f001 f87e 	bl	200023d0 <__divsi3>
200012d4:	0003      	movs	r3, r0
200012d6:	b2db      	uxtb	r3, r3
200012d8:	3330      	adds	r3, #48	@ 0x30
200012da:	b2db      	uxtb	r3, r3
200012dc:	0018      	movs	r0, r3
200012de:	f7ff f800 	bl	200002e2 <ascii_write_char>
    if (score >= 10)
200012e2:	687b      	ldr	r3, [r7, #4]
200012e4:	2b09      	cmp	r3, #9
200012e6:	dd10      	ble.n	2000130a <game_over+0xc8>
        ascii_write_char('0' + (score % 100) / 10);
200012e8:	687b      	ldr	r3, [r7, #4]
200012ea:	2164      	movs	r1, #100	@ 0x64
200012ec:	0018      	movs	r0, r3
200012ee:	f001 f87d 	bl	200023ec <__aeabi_idivmod>
200012f2:	000b      	movs	r3, r1
200012f4:	210a      	movs	r1, #10
200012f6:	0018      	movs	r0, r3
200012f8:	f001 f86a 	bl	200023d0 <__divsi3>
200012fc:	0003      	movs	r3, r0
200012fe:	b2db      	uxtb	r3, r3
20001300:	3330      	adds	r3, #48	@ 0x30
20001302:	b2db      	uxtb	r3, r3
20001304:	0018      	movs	r0, r3
20001306:	f7fe ffec 	bl	200002e2 <ascii_write_char>
    ascii_write_char('0' + (score % 10));
2000130a:	687b      	ldr	r3, [r7, #4]
2000130c:	210a      	movs	r1, #10
2000130e:	0018      	movs	r0, r3
20001310:	f001 f86c 	bl	200023ec <__aeabi_idivmod>
20001314:	000b      	movs	r3, r1
20001316:	b2db      	uxtb	r3, r3
20001318:	3330      	adds	r3, #48	@ 0x30
2000131a:	b2db      	uxtb	r3, r3
2000131c:	0018      	movs	r0, r3
2000131e:	f7fe ffe0 	bl	200002e2 <ascii_write_char>
    
    delay_milli(5000);
20001322:	4b08      	ldr	r3, [pc, #32]	@ (20001344 <game_over+0x102>)
20001324:	0018      	movs	r0, r3
20001326:	f7ff f934 	bl	20000592 <delay_milli>
}
2000132a:	46c0      	nop			@ (mov r8, r8)
2000132c:	46bd      	mov	sp, r7
2000132e:	b006      	add	sp, #24
20001330:	bd80      	pop	{r7, pc}
20001332:	46c0      	nop			@ (mov r8, r8)
20001334:	20000593 	.word	0x20000593
20001338:	20003084 	.word	0x20003084
2000133c:	20003090 	.word	0x20003090
20001340:	2000309c 	.word	0x2000309c
20001344:	00001388 	.word	0x00001388

20001348 <breakout_start_screen>:

/**
* @brief Show welcome screen
*/
void breakout_start_screen(void)
{
20001348:	b5b0      	push	{r4, r5, r7, lr}
2000134a:	b08c      	sub	sp, #48	@ 0x30
2000134c:	af00      	add	r7, sp, #0
    ascii_command(0b00000001, delay_milli, 2);
2000134e:	4b20      	ldr	r3, [pc, #128]	@ (200013d0 <breakout_start_screen+0x88>)
20001350:	2202      	movs	r2, #2
20001352:	0019      	movs	r1, r3
20001354:	2001      	movs	r0, #1
20001356:	f7fe ff41 	bl	200001dc <ascii_command>

    char welcome[] = "Welcome to Breakout!";
2000135a:	2514      	movs	r5, #20
2000135c:	197b      	adds	r3, r7, r5
2000135e:	4a1d      	ldr	r2, [pc, #116]	@ (200013d4 <breakout_start_screen+0x8c>)
20001360:	ca13      	ldmia	r2!, {r0, r1, r4}
20001362:	c313      	stmia	r3!, {r0, r1, r4}
20001364:	ca03      	ldmia	r2!, {r0, r1}
20001366:	c303      	stmia	r3!, {r0, r1}
20001368:	7812      	ldrb	r2, [r2, #0]
2000136a:	701a      	strb	r2, [r3, #0]
    char press[]   = "Press 5 to start.";
2000136c:	003b      	movs	r3, r7
2000136e:	4a1a      	ldr	r2, [pc, #104]	@ (200013d8 <breakout_start_screen+0x90>)
20001370:	ca13      	ldmia	r2!, {r0, r1, r4}
20001372:	c313      	stmia	r3!, {r0, r1, r4}
20001374:	6811      	ldr	r1, [r2, #0]
20001376:	6019      	str	r1, [r3, #0]
20001378:	8892      	ldrh	r2, [r2, #4]
2000137a:	809a      	strh	r2, [r3, #4]

    ascii_goto(1, 1);
2000137c:	2101      	movs	r1, #1
2000137e:	2001      	movs	r0, #1
20001380:	f7fe ff94 	bl	200002ac <ascii_goto>
    
    char *s = welcome;
20001384:	197b      	adds	r3, r7, r5
20001386:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (*s)
20001388:	e006      	b.n	20001398 <breakout_start_screen+0x50>
        ascii_write_char(*s++);
2000138a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2000138c:	1c5a      	adds	r2, r3, #1
2000138e:	62fa      	str	r2, [r7, #44]	@ 0x2c
20001390:	781b      	ldrb	r3, [r3, #0]
20001392:	0018      	movs	r0, r3
20001394:	f7fe ffa5 	bl	200002e2 <ascii_write_char>
    while (*s)
20001398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2000139a:	781b      	ldrb	r3, [r3, #0]
2000139c:	2b00      	cmp	r3, #0
2000139e:	d1f4      	bne.n	2000138a <breakout_start_screen+0x42>

    ascii_goto(1, 2);
200013a0:	2102      	movs	r1, #2
200013a2:	2001      	movs	r0, #1
200013a4:	f7fe ff82 	bl	200002ac <ascii_goto>

    s = press;
200013a8:	003b      	movs	r3, r7
200013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (*s)
200013ac:	e006      	b.n	200013bc <breakout_start_screen+0x74>
        ascii_write_char(*s++);
200013ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200013b0:	1c5a      	adds	r2, r3, #1
200013b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
200013b4:	781b      	ldrb	r3, [r3, #0]
200013b6:	0018      	movs	r0, r3
200013b8:	f7fe ff93 	bl	200002e2 <ascii_write_char>
    while (*s)
200013bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200013be:	781b      	ldrb	r3, [r3, #0]
200013c0:	2b00      	cmp	r3, #0
200013c2:	d1f4      	bne.n	200013ae <breakout_start_screen+0x66>
}
200013c4:	46c0      	nop			@ (mov r8, r8)
200013c6:	46c0      	nop			@ (mov r8, r8)
200013c8:	46bd      	mov	sp, r7
200013ca:	b00c      	add	sp, #48	@ 0x30
200013cc:	bdb0      	pop	{r4, r5, r7, pc}
200013ce:	46c0      	nop			@ (mov r8, r8)
200013d0:	20000593 	.word	0x20000593
200013d4:	200030a4 	.word	0x200030a4
200013d8:	200030bc 	.word	0x200030bc

200013dc <display_game_info>:

/**
* @brief Display score and lives on ascii display
*/
void display_game_info(int score, int lives)
{
200013dc:	b590      	push	{r4, r7, lr}
200013de:	b089      	sub	sp, #36	@ 0x24
200013e0:	af00      	add	r7, sp, #0
200013e2:	6078      	str	r0, [r7, #4]
200013e4:	6039      	str	r1, [r7, #0]
    // Display score
    ascii_goto(1, 2);
200013e6:	2102      	movs	r1, #2
200013e8:	2001      	movs	r0, #1
200013ea:	f7fe ff5f 	bl	200002ac <ascii_goto>
    char score_text[] = "Score: ";
200013ee:	2414      	movs	r4, #20
200013f0:	193b      	adds	r3, r7, r4
200013f2:	4a31      	ldr	r2, [pc, #196]	@ (200014b8 <display_game_info+0xdc>)
200013f4:	ca03      	ldmia	r2!, {r0, r1}
200013f6:	c303      	stmia	r3!, {r0, r1}
    char* s = score_text;
200013f8:	193b      	adds	r3, r7, r4
200013fa:	61fb      	str	r3, [r7, #28]
    while (*s)
200013fc:	e006      	b.n	2000140c <display_game_info+0x30>
        ascii_write_char(*s++);
200013fe:	69fb      	ldr	r3, [r7, #28]
20001400:	1c5a      	adds	r2, r3, #1
20001402:	61fa      	str	r2, [r7, #28]
20001404:	781b      	ldrb	r3, [r3, #0]
20001406:	0018      	movs	r0, r3
20001408:	f7fe ff6b 	bl	200002e2 <ascii_write_char>
    while (*s)
2000140c:	69fb      	ldr	r3, [r7, #28]
2000140e:	781b      	ldrb	r3, [r3, #0]
20001410:	2b00      	cmp	r3, #0
20001412:	d1f4      	bne.n	200013fe <display_game_info+0x22>
    
    // Convert score to string and display
    if (score >= 100)
20001414:	687b      	ldr	r3, [r7, #4]
20001416:	2b63      	cmp	r3, #99	@ 0x63
20001418:	dd0b      	ble.n	20001432 <display_game_info+0x56>
        ascii_write_char('0' + score / 100);
2000141a:	687b      	ldr	r3, [r7, #4]
2000141c:	2164      	movs	r1, #100	@ 0x64
2000141e:	0018      	movs	r0, r3
20001420:	f000 ffd6 	bl	200023d0 <__divsi3>
20001424:	0003      	movs	r3, r0
20001426:	b2db      	uxtb	r3, r3
20001428:	3330      	adds	r3, #48	@ 0x30
2000142a:	b2db      	uxtb	r3, r3
2000142c:	0018      	movs	r0, r3
2000142e:	f7fe ff58 	bl	200002e2 <ascii_write_char>
    if (score >= 10)
20001432:	687b      	ldr	r3, [r7, #4]
20001434:	2b09      	cmp	r3, #9
20001436:	dd10      	ble.n	2000145a <display_game_info+0x7e>
        ascii_write_char('0' + (score % 100) / 10);
20001438:	687b      	ldr	r3, [r7, #4]
2000143a:	2164      	movs	r1, #100	@ 0x64
2000143c:	0018      	movs	r0, r3
2000143e:	f000 ffd5 	bl	200023ec <__aeabi_idivmod>
20001442:	000b      	movs	r3, r1
20001444:	210a      	movs	r1, #10
20001446:	0018      	movs	r0, r3
20001448:	f000 ffc2 	bl	200023d0 <__divsi3>
2000144c:	0003      	movs	r3, r0
2000144e:	b2db      	uxtb	r3, r3
20001450:	3330      	adds	r3, #48	@ 0x30
20001452:	b2db      	uxtb	r3, r3
20001454:	0018      	movs	r0, r3
20001456:	f7fe ff44 	bl	200002e2 <ascii_write_char>
    ascii_write_char('0' + (score % 10));
2000145a:	687b      	ldr	r3, [r7, #4]
2000145c:	210a      	movs	r1, #10
2000145e:	0018      	movs	r0, r3
20001460:	f000 ffc4 	bl	200023ec <__aeabi_idivmod>
20001464:	000b      	movs	r3, r1
20001466:	b2db      	uxtb	r3, r3
20001468:	3330      	adds	r3, #48	@ 0x30
2000146a:	b2db      	uxtb	r3, r3
2000146c:	0018      	movs	r0, r3
2000146e:	f7fe ff38 	bl	200002e2 <ascii_write_char>
    
    // Display lives
    ascii_goto(12, 2);
20001472:	2102      	movs	r1, #2
20001474:	200c      	movs	r0, #12
20001476:	f7fe ff19 	bl	200002ac <ascii_goto>
    char lives_text[] = "Lives: ";
2000147a:	240c      	movs	r4, #12
2000147c:	193b      	adds	r3, r7, r4
2000147e:	4a0f      	ldr	r2, [pc, #60]	@ (200014bc <display_game_info+0xe0>)
20001480:	ca03      	ldmia	r2!, {r0, r1}
20001482:	c303      	stmia	r3!, {r0, r1}
    s = lives_text;
20001484:	193b      	adds	r3, r7, r4
20001486:	61fb      	str	r3, [r7, #28]
    while (*s)
20001488:	e006      	b.n	20001498 <display_game_info+0xbc>
        ascii_write_char(*s++);
2000148a:	69fb      	ldr	r3, [r7, #28]
2000148c:	1c5a      	adds	r2, r3, #1
2000148e:	61fa      	str	r2, [r7, #28]
20001490:	781b      	ldrb	r3, [r3, #0]
20001492:	0018      	movs	r0, r3
20001494:	f7fe ff25 	bl	200002e2 <ascii_write_char>
    while (*s)
20001498:	69fb      	ldr	r3, [r7, #28]
2000149a:	781b      	ldrb	r3, [r3, #0]
2000149c:	2b00      	cmp	r3, #0
2000149e:	d1f4      	bne.n	2000148a <display_game_info+0xae>
    ascii_write_char('0' + lives);
200014a0:	683b      	ldr	r3, [r7, #0]
200014a2:	b2db      	uxtb	r3, r3
200014a4:	3330      	adds	r3, #48	@ 0x30
200014a6:	b2db      	uxtb	r3, r3
200014a8:	0018      	movs	r0, r3
200014aa:	f7fe ff1a 	bl	200002e2 <ascii_write_char>
}
200014ae:	46c0      	nop			@ (mov r8, r8)
200014b0:	46bd      	mov	sp, r7
200014b2:	b009      	add	sp, #36	@ 0x24
200014b4:	bd90      	pop	{r4, r7, pc}
200014b6:	46c0      	nop			@ (mov r8, r8)
200014b8:	2000309c 	.word	0x2000309c
200014bc:	200030d0 	.word	0x200030d0

200014c0 <init_bricks>:

/**
* @brief Initialize brick layout for the game
*/
int init_bricks(Rect bricks[], bool brick_active[])
{
200014c0:	b5b0      	push	{r4, r5, r7, lr}
200014c2:	b08e      	sub	sp, #56	@ 0x38
200014c4:	af00      	add	r7, sp, #0
200014c6:	6078      	str	r0, [r7, #4]
200014c8:	6039      	str	r1, [r7, #0]
    int brick_count = 0;
200014ca:	2300      	movs	r3, #0
200014cc:	637b      	str	r3, [r7, #52]	@ 0x34
    int brick_margin_x = 3;  // Increased horizontal margin between bricks
200014ce:	2303      	movs	r3, #3
200014d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    int brick_margin_y = 3;  // Increased vertical margin between bricks
200014d2:	2303      	movs	r3, #3
200014d4:	627b      	str	r3, [r7, #36]	@ 0x24
    int start_x = 4;         // Starting x position for the first brick
200014d6:	2304      	movs	r3, #4
200014d8:	623b      	str	r3, [r7, #32]
    int start_y = 4;         // Starting y position for the first brick
200014da:	2304      	movs	r3, #4
200014dc:	61fb      	str	r3, [r7, #28]
    
    // Calculate actual brick width to fit screen properly
    int actual_brick_width = (SCREEN_WIDTH - 2*start_x - (BRICK_COLS-1)*brick_margin_x) / BRICK_COLS;
200014de:	6a3b      	ldr	r3, [r7, #32]
200014e0:	2240      	movs	r2, #64	@ 0x40
200014e2:	1ad3      	subs	r3, r2, r3
200014e4:	005a      	lsls	r2, r3, #1
200014e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200014e8:	0019      	movs	r1, r3
200014ea:	00db      	lsls	r3, r3, #3
200014ec:	1acb      	subs	r3, r1, r3
200014ee:	18d3      	adds	r3, r2, r3
200014f0:	2b00      	cmp	r3, #0
200014f2:	da00      	bge.n	200014f6 <init_bricks+0x36>
200014f4:	3307      	adds	r3, #7
200014f6:	10db      	asrs	r3, r3, #3
200014f8:	61bb      	str	r3, [r7, #24]
    
    for (int row = 0; row < BRICK_ROWS; row++) {
200014fa:	2300      	movs	r3, #0
200014fc:	633b      	str	r3, [r7, #48]	@ 0x30
200014fe:	e058      	b.n	200015b2 <init_bricks+0xf2>
        for (int col = 0; col < BRICK_COLS; col++) {
20001500:	2300      	movs	r3, #0
20001502:	62fb      	str	r3, [r7, #44]	@ 0x2c
20001504:	e04f      	b.n	200015a6 <init_bricks+0xe6>
            int index = row * BRICK_COLS + col;
20001506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20001508:	00db      	lsls	r3, r3, #3
2000150a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
2000150c:	18d3      	adds	r3, r2, r3
2000150e:	617b      	str	r3, [r7, #20]
            Point origin = {
                start_x + col * (actual_brick_width + brick_margin_x),
20001510:	69ba      	ldr	r2, [r7, #24]
20001512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20001514:	18d3      	adds	r3, r2, r3
20001516:	b2db      	uxtb	r3, r3
20001518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
2000151a:	b2d2      	uxtb	r2, r2
2000151c:	4353      	muls	r3, r2
2000151e:	b2da      	uxtb	r2, r3
20001520:	6a3b      	ldr	r3, [r7, #32]
20001522:	b2db      	uxtb	r3, r3
20001524:	18d3      	adds	r3, r2, r3
20001526:	b2db      	uxtb	r3, r3
20001528:	b25a      	sxtb	r2, r3
            Point origin = {
2000152a:	2110      	movs	r1, #16
2000152c:	187b      	adds	r3, r7, r1
2000152e:	701a      	strb	r2, [r3, #0]
                start_y + row * (BRICK_HEIGHT + brick_margin_y)
20001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20001532:	3304      	adds	r3, #4
20001534:	b2db      	uxtb	r3, r3
20001536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20001538:	b2d2      	uxtb	r2, r2
2000153a:	4353      	muls	r3, r2
2000153c:	b2da      	uxtb	r2, r3
2000153e:	69fb      	ldr	r3, [r7, #28]
20001540:	b2db      	uxtb	r3, r3
20001542:	18d3      	adds	r3, r2, r3
20001544:	b2db      	uxtb	r3, r3
20001546:	b25a      	sxtb	r2, r3
            Point origin = {
20001548:	187b      	adds	r3, r7, r1
2000154a:	705a      	strb	r2, [r3, #1]
            };
            Point dimen = {actual_brick_width, BRICK_HEIGHT};
2000154c:	69bb      	ldr	r3, [r7, #24]
2000154e:	b25a      	sxtb	r2, r3
20001550:	250c      	movs	r5, #12
20001552:	197b      	adds	r3, r7, r5
20001554:	701a      	strb	r2, [r3, #0]
20001556:	197b      	adds	r3, r7, r5
20001558:	2204      	movs	r2, #4
2000155a:	705a      	strb	r2, [r3, #1]
            bricks[index] = (Rect){origin, dimen};
2000155c:	697b      	ldr	r3, [r7, #20]
2000155e:	009b      	lsls	r3, r3, #2
20001560:	687a      	ldr	r2, [r7, #4]
20001562:	18d4      	adds	r4, r2, r3
20001564:	187b      	adds	r3, r7, r1
20001566:	0020      	movs	r0, r4
20001568:	0019      	movs	r1, r3
2000156a:	2302      	movs	r3, #2
2000156c:	001a      	movs	r2, r3
2000156e:	f001 faf7 	bl	20002b60 <memcpy>
20001572:	2302      	movs	r3, #2
20001574:	197a      	adds	r2, r7, r5
20001576:	18e3      	adds	r3, r4, r3
20001578:	0011      	movs	r1, r2
2000157a:	2202      	movs	r2, #2
2000157c:	0018      	movs	r0, r3
2000157e:	f001 faef 	bl	20002b60 <memcpy>
            brick_active[index] = true;
20001582:	697b      	ldr	r3, [r7, #20]
20001584:	683a      	ldr	r2, [r7, #0]
20001586:	18d3      	adds	r3, r2, r3
20001588:	2201      	movs	r2, #1
2000158a:	701a      	strb	r2, [r3, #0]
            draw_rect(&bricks[index]);
2000158c:	697b      	ldr	r3, [r7, #20]
2000158e:	009b      	lsls	r3, r3, #2
20001590:	687a      	ldr	r2, [r7, #4]
20001592:	18d3      	adds	r3, r2, r3
20001594:	0018      	movs	r0, r3
20001596:	f7ff f95c 	bl	20000852 <draw_rect>
            brick_count++;
2000159a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000159c:	3301      	adds	r3, #1
2000159e:	637b      	str	r3, [r7, #52]	@ 0x34
        for (int col = 0; col < BRICK_COLS; col++) {
200015a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200015a2:	3301      	adds	r3, #1
200015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
200015a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200015a8:	2b07      	cmp	r3, #7
200015aa:	ddac      	ble.n	20001506 <init_bricks+0x46>
    for (int row = 0; row < BRICK_ROWS; row++) {
200015ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200015ae:	3301      	adds	r3, #1
200015b0:	633b      	str	r3, [r7, #48]	@ 0x30
200015b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200015b4:	2b03      	cmp	r3, #3
200015b6:	dda3      	ble.n	20001500 <init_bricks+0x40>
        }
    }
    
    return brick_count;
200015b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
200015ba:	0018      	movs	r0, r3
200015bc:	46bd      	mov	sp, r7
200015be:	b00e      	add	sp, #56	@ 0x38
200015c0:	bdb0      	pop	{r4, r5, r7, pc}

200015c2 <main>:
    move_object,
    set_object_speed
};

int main(void)
{
200015c2:	b5f0      	push	{r4, r5, r6, r7, lr}
200015c4:	b0d3      	sub	sp, #332	@ 0x14c
200015c6:	af00      	add	r7, sp, #0
    // Initialize application
    app_init();
200015c8:	f7ff fbd8 	bl	20000d7c <app_init>
    graphic_initialize();
200015cc:	f7ff f80e 	bl	200005ec <graphic_initialize>
    ascii_init();
200015d0:	f7fe fe4a 	bl	20000268 <ascii_init>

    // Define brick array and state
    Rect bricks[MAX_BRICKS];
    bool brick_active[MAX_BRICKS] = {0};
200015d4:	4bc6      	ldr	r3, [pc, #792]	@ (200018f0 <main+0x32e>)
200015d6:	22a4      	movs	r2, #164	@ 0xa4
200015d8:	0052      	lsls	r2, r2, #1
200015da:	189b      	adds	r3, r3, r2
200015dc:	19db      	adds	r3, r3, r7
200015de:	0018      	movs	r0, r3
200015e0:	231e      	movs	r3, #30
200015e2:	001a      	movs	r2, r3
200015e4:	2100      	movs	r1, #0
200015e6:	f001 fa20 	bl	20002a2a <memset>
    
    // Game variables
    int score = 0;
200015ea:	2300      	movs	r3, #0
200015ec:	22a2      	movs	r2, #162	@ 0xa2
200015ee:	0052      	lsls	r2, r2, #1
200015f0:	18ba      	adds	r2, r7, r2
200015f2:	6013      	str	r3, [r2, #0]
    int lives = MAX_LIVES;
200015f4:	2303      	movs	r3, #3
200015f6:	22a0      	movs	r2, #160	@ 0xa0
200015f8:	0052      	lsls	r2, r2, #1
200015fa:	18ba      	adds	r2, r7, r2
200015fc:	6013      	str	r3, [r2, #0]
    int brick_count = 0;
200015fe:	2300      	movs	r3, #0
20001600:	229e      	movs	r2, #158	@ 0x9e
20001602:	0052      	lsls	r2, r2, #1
20001604:	18ba      	adds	r2, r7, r2
20001606:	6013      	str	r3, [r2, #0]
    int level = 1;
20001608:	2301      	movs	r3, #1
2000160a:	229c      	movs	r2, #156	@ 0x9c
2000160c:	0052      	lsls	r2, r2, #1
2000160e:	18ba      	adds	r2, r7, r2
20001610:	6013      	str	r3, [r2, #0]
    int game_speed = 12; // milliseconds per frame - reduced to 12 for much faster gameplay
20001612:	230c      	movs	r3, #12
20001614:	229a      	movs	r2, #154	@ 0x9a
20001616:	0052      	lsls	r2, r2, #1
20001618:	18ba      	adds	r2, r7, r2
2000161a:	6013      	str	r3, [r2, #0]

init_game:
    graphic_clear_screen();
2000161c:	f7fe ffe9 	bl	200005f2 <graphic_clear_screen>
    breakout_start_screen();
20001620:	f7ff fe92 	bl	20001348 <breakout_start_screen>
    wait_for_start_press();
20001624:	f7ff fbf6 	bl	20000e14 <wait_for_start_press>
    
    // Reset game state
    score = 0;
20001628:	2300      	movs	r3, #0
2000162a:	22a2      	movs	r2, #162	@ 0xa2
2000162c:	0052      	lsls	r2, r2, #1
2000162e:	18ba      	adds	r2, r7, r2
20001630:	6013      	str	r3, [r2, #0]
    lives = MAX_LIVES;
20001632:	2303      	movs	r3, #3
20001634:	22a0      	movs	r2, #160	@ 0xa0
20001636:	0052      	lsls	r2, r2, #1
20001638:	18ba      	adds	r2, r7, r2
2000163a:	6013      	str	r3, [r2, #0]
    level = 1;
2000163c:	2301      	movs	r3, #1
2000163e:	229c      	movs	r2, #156	@ 0x9c
20001640:	0052      	lsls	r2, r2, #1
20001642:	18ba      	adds	r2, r7, r2
20001644:	6013      	str	r3, [r2, #0]
    game_speed = 12; // Keep consistent with initial value
20001646:	230c      	movs	r3, #12
20001648:	229a      	movs	r2, #154	@ 0x9a
2000164a:	0052      	lsls	r2, r2, #1
2000164c:	18ba      	adds	r2, r7, r2
2000164e:	6013      	str	r3, [r2, #0]
    
    // Initialize bricks for first level
    brick_count = init_bricks(bricks, brick_active);
20001650:	233c      	movs	r3, #60	@ 0x3c
20001652:	18fa      	adds	r2, r7, r3
20001654:	235c      	movs	r3, #92	@ 0x5c
20001656:	18fb      	adds	r3, r7, r3
20001658:	0011      	movs	r1, r2
2000165a:	0018      	movs	r0, r3
2000165c:	f7ff ff30 	bl	200014c0 <init_bricks>
20001660:	0003      	movs	r3, r0
20001662:	229e      	movs	r2, #158	@ 0x9e
20001664:	0052      	lsls	r2, r2, #1
20001666:	18ba      	adds	r2, r7, r2
20001668:	6013      	str	r3, [r2, #0]

new_life:
    // Clear entire screen to start fresh
    graphic_clear_screen();
2000166a:	f7fe ffc2 	bl	200005f2 <graphic_clear_screen>
    
    // Redraw active bricks completely from scratch
    for (int i = 0; i < BRICK_ROWS * BRICK_COLS; i++) {
2000166e:	2300      	movs	r3, #0
20001670:	2298      	movs	r2, #152	@ 0x98
20001672:	0052      	lsls	r2, r2, #1
20001674:	18ba      	adds	r2, r7, r2
20001676:	6013      	str	r3, [r2, #0]
20001678:	e0aa      	b.n	200017d0 <main+0x20e>
        if (brick_active[i]) {
2000167a:	4b9d      	ldr	r3, [pc, #628]	@ (200018f0 <main+0x32e>)
2000167c:	22a4      	movs	r2, #164	@ 0xa4
2000167e:	0052      	lsls	r2, r2, #1
20001680:	189b      	adds	r3, r3, r2
20001682:	19da      	adds	r2, r3, r7
20001684:	2198      	movs	r1, #152	@ 0x98
20001686:	0049      	lsls	r1, r1, #1
20001688:	187b      	adds	r3, r7, r1
2000168a:	681b      	ldr	r3, [r3, #0]
2000168c:	18d3      	adds	r3, r2, r3
2000168e:	781b      	ldrb	r3, [r3, #0]
20001690:	2b00      	cmp	r3, #0
20001692:	d100      	bne.n	20001696 <main+0xd4>
20001694:	e095      	b.n	200017c2 <main+0x200>
            // Create a fresh brick rect with the original parameters
            int row = i / BRICK_COLS;
20001696:	187b      	adds	r3, r7, r1
20001698:	681b      	ldr	r3, [r3, #0]
2000169a:	2b00      	cmp	r3, #0
2000169c:	da00      	bge.n	200016a0 <main+0xde>
2000169e:	3307      	adds	r3, #7
200016a0:	10db      	asrs	r3, r3, #3
200016a2:	22ec      	movs	r2, #236	@ 0xec
200016a4:	18ba      	adds	r2, r7, r2
200016a6:	6013      	str	r3, [r2, #0]
            int col = i % BRICK_COLS;
200016a8:	2398      	movs	r3, #152	@ 0x98
200016aa:	005b      	lsls	r3, r3, #1
200016ac:	18fb      	adds	r3, r7, r3
200016ae:	681b      	ldr	r3, [r3, #0]
200016b0:	4a90      	ldr	r2, [pc, #576]	@ (200018f4 <main+0x332>)
200016b2:	4013      	ands	r3, r2
200016b4:	d504      	bpl.n	200016c0 <main+0xfe>
200016b6:	3b01      	subs	r3, #1
200016b8:	2208      	movs	r2, #8
200016ba:	4252      	negs	r2, r2
200016bc:	4313      	orrs	r3, r2
200016be:	3301      	adds	r3, #1
200016c0:	22e8      	movs	r2, #232	@ 0xe8
200016c2:	18ba      	adds	r2, r7, r2
200016c4:	6013      	str	r3, [r2, #0]
            
            int brick_margin_x = 3;
200016c6:	2303      	movs	r3, #3
200016c8:	21e4      	movs	r1, #228	@ 0xe4
200016ca:	187a      	adds	r2, r7, r1
200016cc:	6013      	str	r3, [r2, #0]
            int brick_margin_y = 3;
200016ce:	2303      	movs	r3, #3
200016d0:	22e0      	movs	r2, #224	@ 0xe0
200016d2:	18ba      	adds	r2, r7, r2
200016d4:	6013      	str	r3, [r2, #0]
            int start_x = 4;
200016d6:	2304      	movs	r3, #4
200016d8:	22dc      	movs	r2, #220	@ 0xdc
200016da:	18b8      	adds	r0, r7, r2
200016dc:	6003      	str	r3, [r0, #0]
            int start_y = 4;
200016de:	2304      	movs	r3, #4
200016e0:	20d8      	movs	r0, #216	@ 0xd8
200016e2:	1838      	adds	r0, r7, r0
200016e4:	6003      	str	r3, [r0, #0]
            
            // Calculate brick width like in init_bricks
            int actual_brick_width = (SCREEN_WIDTH - 2*start_x - (BRICK_COLS-1)*brick_margin_x) / BRICK_COLS;
200016e6:	18bb      	adds	r3, r7, r2
200016e8:	681b      	ldr	r3, [r3, #0]
200016ea:	2240      	movs	r2, #64	@ 0x40
200016ec:	1ad3      	subs	r3, r2, r3
200016ee:	005a      	lsls	r2, r3, #1
200016f0:	187b      	adds	r3, r7, r1
200016f2:	681b      	ldr	r3, [r3, #0]
200016f4:	0019      	movs	r1, r3
200016f6:	00db      	lsls	r3, r3, #3
200016f8:	1acb      	subs	r3, r1, r3
200016fa:	18d3      	adds	r3, r2, r3
200016fc:	2b00      	cmp	r3, #0
200016fe:	da00      	bge.n	20001702 <main+0x140>
20001700:	3307      	adds	r3, #7
20001702:	10db      	asrs	r3, r3, #3
20001704:	20d4      	movs	r0, #212	@ 0xd4
20001706:	183a      	adds	r2, r7, r0
20001708:	6013      	str	r3, [r2, #0]
            
            // Recreate the brick with exact original dimensions
            Point origin = {
                start_x + col * (actual_brick_width + brick_margin_x),
2000170a:	183b      	adds	r3, r7, r0
2000170c:	681a      	ldr	r2, [r3, #0]
2000170e:	23e4      	movs	r3, #228	@ 0xe4
20001710:	18fb      	adds	r3, r7, r3
20001712:	681b      	ldr	r3, [r3, #0]
20001714:	18d3      	adds	r3, r2, r3
20001716:	b2db      	uxtb	r3, r3
20001718:	22e8      	movs	r2, #232	@ 0xe8
2000171a:	18ba      	adds	r2, r7, r2
2000171c:	6812      	ldr	r2, [r2, #0]
2000171e:	b2d2      	uxtb	r2, r2
20001720:	4353      	muls	r3, r2
20001722:	b2da      	uxtb	r2, r3
20001724:	23dc      	movs	r3, #220	@ 0xdc
20001726:	18fb      	adds	r3, r7, r3
20001728:	681b      	ldr	r3, [r3, #0]
2000172a:	b2db      	uxtb	r3, r3
2000172c:	18d3      	adds	r3, r2, r3
2000172e:	b2db      	uxtb	r3, r3
20001730:	b25a      	sxtb	r2, r3
            Point origin = {
20001732:	4b71      	ldr	r3, [pc, #452]	@ (200018f8 <main+0x336>)
20001734:	21a4      	movs	r1, #164	@ 0xa4
20001736:	0049      	lsls	r1, r1, #1
20001738:	185b      	adds	r3, r3, r1
2000173a:	19db      	adds	r3, r3, r7
2000173c:	701a      	strb	r2, [r3, #0]
                start_y + row * (BRICK_HEIGHT + brick_margin_y)
2000173e:	23e0      	movs	r3, #224	@ 0xe0
20001740:	18fb      	adds	r3, r7, r3
20001742:	681b      	ldr	r3, [r3, #0]
20001744:	3304      	adds	r3, #4
20001746:	b2db      	uxtb	r3, r3
20001748:	22ec      	movs	r2, #236	@ 0xec
2000174a:	18ba      	adds	r2, r7, r2
2000174c:	6812      	ldr	r2, [r2, #0]
2000174e:	b2d2      	uxtb	r2, r2
20001750:	4353      	muls	r3, r2
20001752:	b2da      	uxtb	r2, r3
20001754:	23d8      	movs	r3, #216	@ 0xd8
20001756:	18fb      	adds	r3, r7, r3
20001758:	681b      	ldr	r3, [r3, #0]
2000175a:	b2db      	uxtb	r3, r3
2000175c:	18d3      	adds	r3, r2, r3
2000175e:	b2db      	uxtb	r3, r3
20001760:	b25a      	sxtb	r2, r3
            Point origin = {
20001762:	4b65      	ldr	r3, [pc, #404]	@ (200018f8 <main+0x336>)
20001764:	185b      	adds	r3, r3, r1
20001766:	19db      	adds	r3, r3, r7
20001768:	705a      	strb	r2, [r3, #1]
            };
            Point dimen = {actual_brick_width, BRICK_HEIGHT};
2000176a:	183b      	adds	r3, r7, r0
2000176c:	681b      	ldr	r3, [r3, #0]
2000176e:	b25a      	sxtb	r2, r3
20001770:	4b62      	ldr	r3, [pc, #392]	@ (200018fc <main+0x33a>)
20001772:	185b      	adds	r3, r3, r1
20001774:	19db      	adds	r3, r3, r7
20001776:	701a      	strb	r2, [r3, #0]
20001778:	4b60      	ldr	r3, [pc, #384]	@ (200018fc <main+0x33a>)
2000177a:	0008      	movs	r0, r1
2000177c:	185b      	adds	r3, r3, r1
2000177e:	19db      	adds	r3, r3, r7
20001780:	2204      	movs	r2, #4
20001782:	705a      	strb	r2, [r3, #1]
            
            // Update the brick in the array and redraw it
            bricks[i].origin = origin;
20001784:	245c      	movs	r4, #92	@ 0x5c
20001786:	193b      	adds	r3, r7, r4
20001788:	2598      	movs	r5, #152	@ 0x98
2000178a:	006d      	lsls	r5, r5, #1
2000178c:	197a      	adds	r2, r7, r5
2000178e:	6812      	ldr	r2, [r2, #0]
20001790:	0092      	lsls	r2, r2, #2
20001792:	4959      	ldr	r1, [pc, #356]	@ (200018f8 <main+0x336>)
20001794:	1809      	adds	r1, r1, r0
20001796:	19c9      	adds	r1, r1, r7
20001798:	8809      	ldrh	r1, [r1, #0]
2000179a:	52d1      	strh	r1, [r2, r3]
            bricks[i].dimen = dimen;
2000179c:	193a      	adds	r2, r7, r4
2000179e:	197b      	adds	r3, r7, r5
200017a0:	681b      	ldr	r3, [r3, #0]
200017a2:	2102      	movs	r1, #2
200017a4:	009b      	lsls	r3, r3, #2
200017a6:	18d3      	adds	r3, r2, r3
200017a8:	4a54      	ldr	r2, [pc, #336]	@ (200018fc <main+0x33a>)
200017aa:	1812      	adds	r2, r2, r0
200017ac:	19d2      	adds	r2, r2, r7
200017ae:	8812      	ldrh	r2, [r2, #0]
200017b0:	525a      	strh	r2, [r3, r1]
            draw_rect(&bricks[i]);
200017b2:	193a      	adds	r2, r7, r4
200017b4:	197b      	adds	r3, r7, r5
200017b6:	681b      	ldr	r3, [r3, #0]
200017b8:	009b      	lsls	r3, r3, #2
200017ba:	18d3      	adds	r3, r2, r3
200017bc:	0018      	movs	r0, r3
200017be:	f7ff f848 	bl	20000852 <draw_rect>
    for (int i = 0; i < BRICK_ROWS * BRICK_COLS; i++) {
200017c2:	2298      	movs	r2, #152	@ 0x98
200017c4:	0052      	lsls	r2, r2, #1
200017c6:	18bb      	adds	r3, r7, r2
200017c8:	681b      	ldr	r3, [r3, #0]
200017ca:	3301      	adds	r3, #1
200017cc:	18ba      	adds	r2, r7, r2
200017ce:	6013      	str	r3, [r2, #0]
200017d0:	2398      	movs	r3, #152	@ 0x98
200017d2:	005b      	lsls	r3, r3, #1
200017d4:	18fb      	adds	r3, r7, r3
200017d6:	681b      	ldr	r3, [r3, #0]
200017d8:	2b1f      	cmp	r3, #31
200017da:	dc00      	bgt.n	200017de <main+0x21c>
200017dc:	e74d      	b.n	2000167a <main+0xb8>
        }
    }
    
    // Make sure ball and paddle are properly cleared
    ball.clear(&ball);
200017de:	4b48      	ldr	r3, [pc, #288]	@ (20001900 <main+0x33e>)
200017e0:	699b      	ldr	r3, [r3, #24]
200017e2:	4a47      	ldr	r2, [pc, #284]	@ (20001900 <main+0x33e>)
200017e4:	0010      	movs	r0, r2
200017e6:	4798      	blx	r3
    paddle.clear(&paddle);
200017e8:	4b46      	ldr	r3, [pc, #280]	@ (20001904 <main+0x342>)
200017ea:	699b      	ldr	r3, [r3, #24]
200017ec:	4a45      	ldr	r2, [pc, #276]	@ (20001904 <main+0x342>)
200017ee:	0010      	movs	r0, r2
200017f0:	4798      	blx	r3
    reset_game_objects(&ball, &paddle);
200017f2:	4a44      	ldr	r2, [pc, #272]	@ (20001904 <main+0x342>)
200017f4:	4b42      	ldr	r3, [pc, #264]	@ (20001900 <main+0x33e>)
200017f6:	0011      	movs	r1, r2
200017f8:	0018      	movs	r0, r3
200017fa:	f7ff fc77 	bl	200010ec <reset_game_objects>
    
    // Display game info
    ascii_command(0b00000001, delay_milli, 2); // Clear display
200017fe:	4b42      	ldr	r3, [pc, #264]	@ (20001908 <main+0x346>)
20001800:	2202      	movs	r2, #2
20001802:	0019      	movs	r1, r3
20001804:	2001      	movs	r0, #1
20001806:	f7fe fce9 	bl	200001dc <ascii_command>
    
    char breakout[] = "Breakout - Lvl ";
2000180a:	4b40      	ldr	r3, [pc, #256]	@ (2000190c <main+0x34a>)
2000180c:	22a4      	movs	r2, #164	@ 0xa4
2000180e:	0052      	lsls	r2, r2, #1
20001810:	189b      	adds	r3, r3, r2
20001812:	19db      	adds	r3, r3, r7
20001814:	4a3e      	ldr	r2, [pc, #248]	@ (20001910 <main+0x34e>)
20001816:	ca13      	ldmia	r2!, {r0, r1, r4}
20001818:	c313      	stmia	r3!, {r0, r1, r4}
2000181a:	6812      	ldr	r2, [r2, #0]
2000181c:	601a      	str	r2, [r3, #0]
    
    ascii_goto(1, 1);
2000181e:	2101      	movs	r1, #1
20001820:	2001      	movs	r0, #1
20001822:	f7fe fd43 	bl	200002ac <ascii_goto>
    char *s = breakout;
20001826:	232c      	movs	r3, #44	@ 0x2c
20001828:	18fb      	adds	r3, r7, r3
2000182a:	2296      	movs	r2, #150	@ 0x96
2000182c:	0052      	lsls	r2, r2, #1
2000182e:	18ba      	adds	r2, r7, r2
20001830:	6013      	str	r3, [r2, #0]
    while (*s)
20001832:	e00a      	b.n	2000184a <main+0x288>
        ascii_write_char(*s++);
20001834:	2196      	movs	r1, #150	@ 0x96
20001836:	0049      	lsls	r1, r1, #1
20001838:	187b      	adds	r3, r7, r1
2000183a:	681b      	ldr	r3, [r3, #0]
2000183c:	1c5a      	adds	r2, r3, #1
2000183e:	1879      	adds	r1, r7, r1
20001840:	600a      	str	r2, [r1, #0]
20001842:	781b      	ldrb	r3, [r3, #0]
20001844:	0018      	movs	r0, r3
20001846:	f7fe fd4c 	bl	200002e2 <ascii_write_char>
    while (*s)
2000184a:	2396      	movs	r3, #150	@ 0x96
2000184c:	005b      	lsls	r3, r3, #1
2000184e:	18fb      	adds	r3, r7, r3
20001850:	681b      	ldr	r3, [r3, #0]
20001852:	781b      	ldrb	r3, [r3, #0]
20001854:	2b00      	cmp	r3, #0
20001856:	d1ed      	bne.n	20001834 <main+0x272>
    
    // Display level number
    ascii_write_char('0' + level);
20001858:	239c      	movs	r3, #156	@ 0x9c
2000185a:	005b      	lsls	r3, r3, #1
2000185c:	18fb      	adds	r3, r7, r3
2000185e:	681b      	ldr	r3, [r3, #0]
20001860:	b2db      	uxtb	r3, r3
20001862:	3330      	adds	r3, #48	@ 0x30
20001864:	b2db      	uxtb	r3, r3
20001866:	0018      	movs	r0, r3
20001868:	f7fe fd3b 	bl	200002e2 <ascii_write_char>
    
    // Display score and lives
    display_game_info(score, lives);
2000186c:	23a0      	movs	r3, #160	@ 0xa0
2000186e:	005b      	lsls	r3, r3, #1
20001870:	18fb      	adds	r3, r7, r3
20001872:	681a      	ldr	r2, [r3, #0]
20001874:	23a2      	movs	r3, #162	@ 0xa2
20001876:	005b      	lsls	r3, r3, #1
20001878:	18fb      	adds	r3, r7, r3
2000187a:	681b      	ldr	r3, [r3, #0]
2000187c:	0011      	movs	r1, r2
2000187e:	0018      	movs	r0, r3
20001880:	f7ff fdac 	bl	200013dc <display_game_info>

    // Gameplay-loop
    while (true)
    {
        // Read input
        Input *keyb_input = keyb();
20001884:	f7ff f96c 	bl	20000b60 <keyb>
20001888:	0003      	movs	r3, r0
2000188a:	218c      	movs	r1, #140	@ 0x8c
2000188c:	0049      	lsls	r1, r1, #1
2000188e:	187a      	adds	r2, r7, r1
20001890:	6013      	str	r3, [r2, #0]
        i8 paddle_dx = 0;
20001892:	232c      	movs	r3, #44	@ 0x2c
20001894:	33ff      	adds	r3, #255	@ 0xff
20001896:	18fb      	adds	r3, r7, r3
20001898:	2200      	movs	r2, #0
2000189a:	701a      	strb	r2, [r3, #0]

        if (keyb_input->n_presses > 0)
2000189c:	187b      	adds	r3, r7, r1
2000189e:	681b      	ldr	r3, [r3, #0]
200018a0:	791b      	ldrb	r3, [r3, #4]
200018a2:	2b00      	cmp	r3, #0
200018a4:	d053      	beq.n	2000194e <main+0x38c>
        {
            for (u8 i = 0; i < keyb_input->n_presses; i++)
200018a6:	2395      	movs	r3, #149	@ 0x95
200018a8:	005b      	lsls	r3, r3, #1
200018aa:	18fb      	adds	r3, r7, r3
200018ac:	2200      	movs	r2, #0
200018ae:	701a      	strb	r2, [r3, #0]
200018b0:	e042      	b.n	20001938 <main+0x376>
            {
                u8 current_input = keyb_input->buffer[i];
200018b2:	2395      	movs	r3, #149	@ 0x95
200018b4:	005b      	lsls	r3, r3, #1
200018b6:	18fb      	adds	r3, r7, r3
200018b8:	781a      	ldrb	r2, [r3, #0]
200018ba:	2018      	movs	r0, #24
200018bc:	30ff      	adds	r0, #255	@ 0xff
200018be:	183b      	adds	r3, r7, r0
200018c0:	218c      	movs	r1, #140	@ 0x8c
200018c2:	0049      	lsls	r1, r1, #1
200018c4:	1879      	adds	r1, r7, r1
200018c6:	6809      	ldr	r1, [r1, #0]
200018c8:	5c8a      	ldrb	r2, [r1, r2]
200018ca:	701a      	strb	r2, [r3, #0]
                switch (current_input)
200018cc:	183b      	adds	r3, r7, r0
200018ce:	781b      	ldrb	r3, [r3, #0]
200018d0:	2b01      	cmp	r3, #1
200018d2:	d002      	beq.n	200018da <main+0x318>
200018d4:	2b03      	cmp	r3, #3
200018d6:	d01d      	beq.n	20001914 <main+0x352>
                case PADDLE_MOVE_LEFT:
                    paddle_dx--; break;
                case PADDLE_MOVE_RIGHT:
                    paddle_dx++; break;
                default:
                    break;
200018d8:	e027      	b.n	2000192a <main+0x368>
                    paddle_dx--; break;
200018da:	212c      	movs	r1, #44	@ 0x2c
200018dc:	31ff      	adds	r1, #255	@ 0xff
200018de:	187b      	adds	r3, r7, r1
200018e0:	781b      	ldrb	r3, [r3, #0]
200018e2:	b25b      	sxtb	r3, r3
200018e4:	b2db      	uxtb	r3, r3
200018e6:	3b01      	subs	r3, #1
200018e8:	b2da      	uxtb	r2, r3
200018ea:	187b      	adds	r3, r7, r1
200018ec:	701a      	strb	r2, [r3, #0]
200018ee:	e01c      	b.n	2000192a <main+0x368>
200018f0:	fffffef4 	.word	0xfffffef4
200018f4:	80000007 	.word	0x80000007
200018f8:	fffffee0 	.word	0xfffffee0
200018fc:	fffffedc 	.word	0xfffffedc
20001900:	20002f70 	.word	0x20002f70
20001904:	20002f94 	.word	0x20002f94
20001908:	20000593 	.word	0x20000593
2000190c:	fffffee4 	.word	0xfffffee4
20001910:	200030d8 	.word	0x200030d8
                    paddle_dx++; break;
20001914:	212c      	movs	r1, #44	@ 0x2c
20001916:	31ff      	adds	r1, #255	@ 0xff
20001918:	187b      	adds	r3, r7, r1
2000191a:	781b      	ldrb	r3, [r3, #0]
2000191c:	b25b      	sxtb	r3, r3
2000191e:	b2db      	uxtb	r3, r3
20001920:	3301      	adds	r3, #1
20001922:	b2da      	uxtb	r2, r3
20001924:	187b      	adds	r3, r7, r1
20001926:	701a      	strb	r2, [r3, #0]
20001928:	46c0      	nop			@ (mov r8, r8)
            for (u8 i = 0; i < keyb_input->n_presses; i++)
2000192a:	2195      	movs	r1, #149	@ 0x95
2000192c:	0049      	lsls	r1, r1, #1
2000192e:	187b      	adds	r3, r7, r1
20001930:	781a      	ldrb	r2, [r3, #0]
20001932:	187b      	adds	r3, r7, r1
20001934:	3201      	adds	r2, #1
20001936:	701a      	strb	r2, [r3, #0]
20001938:	238c      	movs	r3, #140	@ 0x8c
2000193a:	005b      	lsls	r3, r3, #1
2000193c:	18fb      	adds	r3, r7, r3
2000193e:	681b      	ldr	r3, [r3, #0]
20001940:	791b      	ldrb	r3, [r3, #4]
20001942:	2295      	movs	r2, #149	@ 0x95
20001944:	0052      	lsls	r2, r2, #1
20001946:	18ba      	adds	r2, r7, r2
20001948:	7812      	ldrb	r2, [r2, #0]
2000194a:	429a      	cmp	r2, r3
2000194c:	d3b1      	bcc.n	200018b2 <main+0x2f0>
                }
            }
        }

        // Set paddle speed from input
        paddle.set_speed(&paddle, paddle_dx * SPEED, 0);
2000194e:	4bca      	ldr	r3, [pc, #808]	@ (20001c78 <main+0x6b6>)
20001950:	6a1b      	ldr	r3, [r3, #32]
20001952:	222c      	movs	r2, #44	@ 0x2c
20001954:	32ff      	adds	r2, #255	@ 0xff
20001956:	18ba      	adds	r2, r7, r2
20001958:	7812      	ldrb	r2, [r2, #0]
2000195a:	b252      	sxtb	r2, r2
2000195c:	00d1      	lsls	r1, r2, #3
2000195e:	48c6      	ldr	r0, [pc, #792]	@ (20001c78 <main+0x6b6>)
20001960:	2200      	movs	r2, #0
20001962:	4798      	blx	r3

        // Only move the paddle if it stays inside the screen
        if ((paddle.pos_x + paddle.dir_x >= 1) && 
20001964:	4bc4      	ldr	r3, [pc, #784]	@ (20001c78 <main+0x6b6>)
20001966:	68da      	ldr	r2, [r3, #12]
20001968:	4bc3      	ldr	r3, [pc, #780]	@ (20001c78 <main+0x6b6>)
2000196a:	685b      	ldr	r3, [r3, #4]
2000196c:	18d3      	adds	r3, r2, r3
2000196e:	2b00      	cmp	r3, #0
20001970:	dd0f      	ble.n	20001992 <main+0x3d0>
            (paddle.pos_x + paddle.dir_x + paddle.geo->size_x <= SCREEN_WIDTH)) {
20001972:	4bc1      	ldr	r3, [pc, #772]	@ (20001c78 <main+0x6b6>)
20001974:	68da      	ldr	r2, [r3, #12]
20001976:	4bc0      	ldr	r3, [pc, #768]	@ (20001c78 <main+0x6b6>)
20001978:	685b      	ldr	r3, [r3, #4]
2000197a:	18d2      	adds	r2, r2, r3
2000197c:	4bbe      	ldr	r3, [pc, #760]	@ (20001c78 <main+0x6b6>)
2000197e:	681b      	ldr	r3, [r3, #0]
20001980:	685b      	ldr	r3, [r3, #4]
20001982:	18d3      	adds	r3, r2, r3
        if ((paddle.pos_x + paddle.dir_x >= 1) && 
20001984:	2b80      	cmp	r3, #128	@ 0x80
20001986:	dc04      	bgt.n	20001992 <main+0x3d0>
            paddle.move(&paddle);
20001988:	4bbb      	ldr	r3, [pc, #748]	@ (20001c78 <main+0x6b6>)
2000198a:	69db      	ldr	r3, [r3, #28]
2000198c:	4aba      	ldr	r2, [pc, #744]	@ (20001c78 <main+0x6b6>)
2000198e:	0010      	movs	r0, r2
20001990:	4798      	blx	r3
        }

        // Move ball
        ball.move(&ball);
20001992:	4bba      	ldr	r3, [pc, #744]	@ (20001c7c <main+0x6ba>)
20001994:	69db      	ldr	r3, [r3, #28]
20001996:	4ab9      	ldr	r2, [pc, #740]	@ (20001c7c <main+0x6ba>)
20001998:	0010      	movs	r0, r2
2000199a:	4798      	blx	r3

        // Check for ball collision with paddle
        if (colliding_with_paddle(&ball, &paddle)) {
2000199c:	4ab6      	ldr	r2, [pc, #728]	@ (20001c78 <main+0x6b6>)
2000199e:	4bb7      	ldr	r3, [pc, #732]	@ (20001c7c <main+0x6ba>)
200019a0:	0011      	movs	r1, r2
200019a2:	0018      	movs	r0, r3
200019a4:	f7ff fa6e 	bl	20000e84 <colliding_with_paddle>
200019a8:	1e03      	subs	r3, r0, #0
200019aa:	d100      	bne.n	200019ae <main+0x3ec>
200019ac:	e073      	b.n	20001a96 <main+0x4d4>
            // Bounce ball based on where it hit the paddle
            ball.dir_y = -abs(ball.dir_y); // Always bounce up
200019ae:	4bb3      	ldr	r3, [pc, #716]	@ (20001c7c <main+0x6ba>)
200019b0:	689b      	ldr	r3, [r3, #8]
200019b2:	b25b      	sxtb	r3, r3
200019b4:	0018      	movs	r0, r3
200019b6:	f7ff f8a2 	bl	20000afe <abs>
200019ba:	0003      	movs	r3, r0
200019bc:	425a      	negs	r2, r3
200019be:	4baf      	ldr	r3, [pc, #700]	@ (20001c7c <main+0x6ba>)
200019c0:	609a      	str	r2, [r3, #8]
            
            // Adjust x direction based on where ball hit paddle
            int hit_pos = ball.pos_x - paddle.pos_x;
200019c2:	4bae      	ldr	r3, [pc, #696]	@ (20001c7c <main+0x6ba>)
200019c4:	68da      	ldr	r2, [r3, #12]
200019c6:	4bac      	ldr	r3, [pc, #688]	@ (20001c78 <main+0x6b6>)
200019c8:	68db      	ldr	r3, [r3, #12]
200019ca:	1ad3      	subs	r3, r2, r3
200019cc:	2488      	movs	r4, #136	@ 0x88
200019ce:	0064      	lsls	r4, r4, #1
200019d0:	193a      	adds	r2, r7, r4
200019d2:	6013      	str	r3, [r2, #0]
            int paddle_width = paddle.geo->size_x;
200019d4:	4ba8      	ldr	r3, [pc, #672]	@ (20001c78 <main+0x6b6>)
200019d6:	681b      	ldr	r3, [r3, #0]
200019d8:	685b      	ldr	r3, [r3, #4]
200019da:	2286      	movs	r2, #134	@ 0x86
200019dc:	0052      	lsls	r2, r2, #1
200019de:	18b9      	adds	r1, r7, r2
200019e0:	600b      	str	r3, [r1, #0]
            
            // Divide paddle into 5 segments for more precise control
            if (hit_pos < paddle_width / 5) {
200019e2:	18bb      	adds	r3, r7, r2
200019e4:	681b      	ldr	r3, [r3, #0]
200019e6:	2105      	movs	r1, #5
200019e8:	0018      	movs	r0, r3
200019ea:	f000 fcf1 	bl	200023d0 <__divsi3>
200019ee:	0003      	movs	r3, r0
200019f0:	001a      	movs	r2, r3
200019f2:	193b      	adds	r3, r7, r4
200019f4:	681b      	ldr	r3, [r3, #0]
200019f6:	4293      	cmp	r3, r2
200019f8:	da04      	bge.n	20001a04 <main+0x442>
                // Far left - sharp angle
                ball.dir_x = -3;
200019fa:	4ba0      	ldr	r3, [pc, #640]	@ (20001c7c <main+0x6ba>)
200019fc:	2203      	movs	r2, #3
200019fe:	4252      	negs	r2, r2
20001a00:	605a      	str	r2, [r3, #4]
20001a02:	e048      	b.n	20001a96 <main+0x4d4>
            } else if (hit_pos < paddle_width * 2/5) {
20001a04:	2386      	movs	r3, #134	@ 0x86
20001a06:	005b      	lsls	r3, r3, #1
20001a08:	18fb      	adds	r3, r7, r3
20001a0a:	681b      	ldr	r3, [r3, #0]
20001a0c:	005b      	lsls	r3, r3, #1
20001a0e:	2105      	movs	r1, #5
20001a10:	0018      	movs	r0, r3
20001a12:	f000 fcdd 	bl	200023d0 <__divsi3>
20001a16:	0003      	movs	r3, r0
20001a18:	001a      	movs	r2, r3
20001a1a:	2388      	movs	r3, #136	@ 0x88
20001a1c:	005b      	lsls	r3, r3, #1
20001a1e:	18fb      	adds	r3, r7, r3
20001a20:	681b      	ldr	r3, [r3, #0]
20001a22:	4293      	cmp	r3, r2
20001a24:	da04      	bge.n	20001a30 <main+0x46e>
                // Left side - medium angle
                ball.dir_x = -2;
20001a26:	4b95      	ldr	r3, [pc, #596]	@ (20001c7c <main+0x6ba>)
20001a28:	2202      	movs	r2, #2
20001a2a:	4252      	negs	r2, r2
20001a2c:	605a      	str	r2, [r3, #4]
20001a2e:	e032      	b.n	20001a96 <main+0x4d4>
            } else if (hit_pos < paddle_width * 3/5) {
20001a30:	2386      	movs	r3, #134	@ 0x86
20001a32:	005b      	lsls	r3, r3, #1
20001a34:	18fb      	adds	r3, r7, r3
20001a36:	681a      	ldr	r2, [r3, #0]
20001a38:	0013      	movs	r3, r2
20001a3a:	005b      	lsls	r3, r3, #1
20001a3c:	189b      	adds	r3, r3, r2
20001a3e:	2105      	movs	r1, #5
20001a40:	0018      	movs	r0, r3
20001a42:	f000 fcc5 	bl	200023d0 <__divsi3>
20001a46:	0003      	movs	r3, r0
20001a48:	001a      	movs	r2, r3
20001a4a:	2388      	movs	r3, #136	@ 0x88
20001a4c:	005b      	lsls	r3, r3, #1
20001a4e:	18fb      	adds	r3, r7, r3
20001a50:	681b      	ldr	r3, [r3, #0]
20001a52:	4293      	cmp	r3, r2
20001a54:	da07      	bge.n	20001a66 <main+0x4a4>
                // Center - keep current x direction but ensure it's not 0
                if (ball.dir_x == 0) ball.dir_x = 1;
20001a56:	4b89      	ldr	r3, [pc, #548]	@ (20001c7c <main+0x6ba>)
20001a58:	685b      	ldr	r3, [r3, #4]
20001a5a:	2b00      	cmp	r3, #0
20001a5c:	d11b      	bne.n	20001a96 <main+0x4d4>
20001a5e:	4b87      	ldr	r3, [pc, #540]	@ (20001c7c <main+0x6ba>)
20001a60:	2201      	movs	r2, #1
20001a62:	605a      	str	r2, [r3, #4]
20001a64:	e017      	b.n	20001a96 <main+0x4d4>
            } else if (hit_pos < paddle_width * 4/5) {
20001a66:	2386      	movs	r3, #134	@ 0x86
20001a68:	005b      	lsls	r3, r3, #1
20001a6a:	18fb      	adds	r3, r7, r3
20001a6c:	681b      	ldr	r3, [r3, #0]
20001a6e:	009b      	lsls	r3, r3, #2
20001a70:	2105      	movs	r1, #5
20001a72:	0018      	movs	r0, r3
20001a74:	f000 fcac 	bl	200023d0 <__divsi3>
20001a78:	0003      	movs	r3, r0
20001a7a:	001a      	movs	r2, r3
20001a7c:	2388      	movs	r3, #136	@ 0x88
20001a7e:	005b      	lsls	r3, r3, #1
20001a80:	18fb      	adds	r3, r7, r3
20001a82:	681b      	ldr	r3, [r3, #0]
20001a84:	4293      	cmp	r3, r2
20001a86:	da03      	bge.n	20001a90 <main+0x4ce>
                // Right side - medium angle
                ball.dir_x = 2;
20001a88:	4b7c      	ldr	r3, [pc, #496]	@ (20001c7c <main+0x6ba>)
20001a8a:	2202      	movs	r2, #2
20001a8c:	605a      	str	r2, [r3, #4]
20001a8e:	e002      	b.n	20001a96 <main+0x4d4>
            } else {
                // Far right - sharp angle
                ball.dir_x = 3;
20001a90:	4b7a      	ldr	r3, [pc, #488]	@ (20001c7c <main+0x6ba>)
20001a92:	2203      	movs	r2, #3
20001a94:	605a      	str	r2, [r3, #4]
            }
        }
        
        // Check for ball collision with bricks
        bool brick_hit = false;
20001a96:	230c      	movs	r3, #12
20001a98:	33ff      	adds	r3, #255	@ 0xff
20001a9a:	18fb      	adds	r3, r7, r3
20001a9c:	2200      	movs	r2, #0
20001a9e:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < BRICK_ROWS * BRICK_COLS; i++) {
20001aa0:	2300      	movs	r3, #0
20001aa2:	2292      	movs	r2, #146	@ 0x92
20001aa4:	0052      	lsls	r2, r2, #1
20001aa6:	18ba      	adds	r2, r7, r2
20001aa8:	6013      	str	r3, [r2, #0]
20001aaa:	e22e      	b.n	20001f0a <main+0x948>
            if (brick_active[i]) {
20001aac:	4b74      	ldr	r3, [pc, #464]	@ (20001c80 <main+0x6be>)
20001aae:	22a4      	movs	r2, #164	@ 0xa4
20001ab0:	0052      	lsls	r2, r2, #1
20001ab2:	189b      	adds	r3, r3, r2
20001ab4:	19da      	adds	r2, r3, r7
20001ab6:	2192      	movs	r1, #146	@ 0x92
20001ab8:	0049      	lsls	r1, r1, #1
20001aba:	187b      	adds	r3, r7, r1
20001abc:	681b      	ldr	r3, [r3, #0]
20001abe:	18d3      	adds	r3, r2, r3
20001ac0:	781b      	ldrb	r3, [r3, #0]
20001ac2:	2b00      	cmp	r3, #0
20001ac4:	d100      	bne.n	20001ac8 <main+0x506>
20001ac6:	e219      	b.n	20001efc <main+0x93a>
                if (colliding_with_brick(&ball, bricks[i])) {
20001ac8:	235c      	movs	r3, #92	@ 0x5c
20001aca:	18fb      	adds	r3, r7, r3
20001acc:	187a      	adds	r2, r7, r1
20001ace:	6812      	ldr	r2, [r2, #0]
20001ad0:	0092      	lsls	r2, r2, #2
20001ad2:	486a      	ldr	r0, [pc, #424]	@ (20001c7c <main+0x6ba>)
20001ad4:	58d1      	ldr	r1, [r2, r3]
20001ad6:	f7ff fb3d 	bl	20001154 <colliding_with_brick>
20001ada:	1e03      	subs	r3, r0, #0
20001adc:	d100      	bne.n	20001ae0 <main+0x51e>
20001ade:	e20d      	b.n	20001efc <main+0x93a>
                    // Determine which side of the brick was hit
                    i8 ball_cx = ball.pos_x + ball.geo->size_x / 2;
20001ae0:	4b66      	ldr	r3, [pc, #408]	@ (20001c7c <main+0x6ba>)
20001ae2:	68db      	ldr	r3, [r3, #12]
20001ae4:	b2da      	uxtb	r2, r3
20001ae6:	4b65      	ldr	r3, [pc, #404]	@ (20001c7c <main+0x6ba>)
20001ae8:	681b      	ldr	r3, [r3, #0]
20001aea:	685b      	ldr	r3, [r3, #4]
20001aec:	2b00      	cmp	r3, #0
20001aee:	da00      	bge.n	20001af2 <main+0x530>
20001af0:	3301      	adds	r3, #1
20001af2:	105b      	asrs	r3, r3, #1
20001af4:	b2db      	uxtb	r3, r3
20001af6:	18d3      	adds	r3, r2, r3
20001af8:	b2da      	uxtb	r2, r3
20001afa:	2385      	movs	r3, #133	@ 0x85
20001afc:	005b      	lsls	r3, r3, #1
20001afe:	18fb      	adds	r3, r7, r3
20001b00:	701a      	strb	r2, [r3, #0]
                    i8 ball_cy = ball.pos_y + ball.geo->size_y / 2;
20001b02:	4b5e      	ldr	r3, [pc, #376]	@ (20001c7c <main+0x6ba>)
20001b04:	691b      	ldr	r3, [r3, #16]
20001b06:	b2da      	uxtb	r2, r3
20001b08:	4b5c      	ldr	r3, [pc, #368]	@ (20001c7c <main+0x6ba>)
20001b0a:	681b      	ldr	r3, [r3, #0]
20001b0c:	689b      	ldr	r3, [r3, #8]
20001b0e:	2b00      	cmp	r3, #0
20001b10:	da00      	bge.n	20001b14 <main+0x552>
20001b12:	3301      	adds	r3, #1
20001b14:	105b      	asrs	r3, r3, #1
20001b16:	b2db      	uxtb	r3, r3
20001b18:	18d3      	adds	r3, r2, r3
20001b1a:	b2da      	uxtb	r2, r3
20001b1c:	230a      	movs	r3, #10
20001b1e:	33ff      	adds	r3, #255	@ 0xff
20001b20:	18fb      	adds	r3, r7, r3
20001b22:	701a      	strb	r2, [r3, #0]
                    i8 brick_cx = bricks[i].origin.x + bricks[i].dimen.x / 2;
20001b24:	215c      	movs	r1, #92	@ 0x5c
20001b26:	187b      	adds	r3, r7, r1
20001b28:	2092      	movs	r0, #146	@ 0x92
20001b2a:	0040      	lsls	r0, r0, #1
20001b2c:	183a      	adds	r2, r7, r0
20001b2e:	6812      	ldr	r2, [r2, #0]
20001b30:	0092      	lsls	r2, r2, #2
20001b32:	56d3      	ldrsb	r3, [r2, r3]
20001b34:	b2da      	uxtb	r2, r3
20001b36:	1879      	adds	r1, r7, r1
20001b38:	183b      	adds	r3, r7, r0
20001b3a:	681b      	ldr	r3, [r3, #0]
20001b3c:	009b      	lsls	r3, r3, #2
20001b3e:	18cb      	adds	r3, r1, r3
20001b40:	3302      	adds	r3, #2
20001b42:	781b      	ldrb	r3, [r3, #0]
20001b44:	b25b      	sxtb	r3, r3
20001b46:	2b00      	cmp	r3, #0
20001b48:	da00      	bge.n	20001b4c <main+0x58a>
20001b4a:	3301      	adds	r3, #1
20001b4c:	105b      	asrs	r3, r3, #1
20001b4e:	b25b      	sxtb	r3, r3
20001b50:	b2db      	uxtb	r3, r3
20001b52:	18d3      	adds	r3, r2, r3
20001b54:	b2da      	uxtb	r2, r3
20001b56:	2384      	movs	r3, #132	@ 0x84
20001b58:	005b      	lsls	r3, r3, #1
20001b5a:	18fb      	adds	r3, r7, r3
20001b5c:	701a      	strb	r2, [r3, #0]
                    i8 brick_cy = bricks[i].origin.y + bricks[i].dimen.y / 2;
20001b5e:	215c      	movs	r1, #92	@ 0x5c
20001b60:	187a      	adds	r2, r7, r1
20001b62:	2092      	movs	r0, #146	@ 0x92
20001b64:	0040      	lsls	r0, r0, #1
20001b66:	183b      	adds	r3, r7, r0
20001b68:	681b      	ldr	r3, [r3, #0]
20001b6a:	009b      	lsls	r3, r3, #2
20001b6c:	18d3      	adds	r3, r2, r3
20001b6e:	3301      	adds	r3, #1
20001b70:	781b      	ldrb	r3, [r3, #0]
20001b72:	b25b      	sxtb	r3, r3
20001b74:	b2da      	uxtb	r2, r3
20001b76:	1879      	adds	r1, r7, r1
20001b78:	183b      	adds	r3, r7, r0
20001b7a:	681b      	ldr	r3, [r3, #0]
20001b7c:	009b      	lsls	r3, r3, #2
20001b7e:	18cb      	adds	r3, r1, r3
20001b80:	3303      	adds	r3, #3
20001b82:	781b      	ldrb	r3, [r3, #0]
20001b84:	b25b      	sxtb	r3, r3
20001b86:	2b00      	cmp	r3, #0
20001b88:	da00      	bge.n	20001b8c <main+0x5ca>
20001b8a:	3301      	adds	r3, #1
20001b8c:	105b      	asrs	r3, r3, #1
20001b8e:	b25b      	sxtb	r3, r3
20001b90:	b2db      	uxtb	r3, r3
20001b92:	18d3      	adds	r3, r2, r3
20001b94:	b2da      	uxtb	r2, r3
20001b96:	2108      	movs	r1, #8
20001b98:	31ff      	adds	r1, #255	@ 0xff
20001b9a:	187b      	adds	r3, r7, r1
20001b9c:	701a      	strb	r2, [r3, #0]
                    
                    // Calculate distance from centers in each direction
                    i8 dx = ball_cx - brick_cx;
20001b9e:	2385      	movs	r3, #133	@ 0x85
20001ba0:	005b      	lsls	r3, r3, #1
20001ba2:	18fb      	adds	r3, r7, r3
20001ba4:	781a      	ldrb	r2, [r3, #0]
20001ba6:	2384      	movs	r3, #132	@ 0x84
20001ba8:	005b      	lsls	r3, r3, #1
20001baa:	18fb      	adds	r3, r7, r3
20001bac:	781b      	ldrb	r3, [r3, #0]
20001bae:	1ad3      	subs	r3, r2, r3
20001bb0:	b2da      	uxtb	r2, r3
20001bb2:	1dfb      	adds	r3, r7, #7
20001bb4:	33ff      	adds	r3, #255	@ 0xff
20001bb6:	701a      	strb	r2, [r3, #0]
                    i8 dy = ball_cy - brick_cy;
20001bb8:	230a      	movs	r3, #10
20001bba:	33ff      	adds	r3, #255	@ 0xff
20001bbc:	18fb      	adds	r3, r7, r3
20001bbe:	781a      	ldrb	r2, [r3, #0]
20001bc0:	187b      	adds	r3, r7, r1
20001bc2:	781b      	ldrb	r3, [r3, #0]
20001bc4:	1ad3      	subs	r3, r2, r3
20001bc6:	b2da      	uxtb	r2, r3
20001bc8:	1dbb      	adds	r3, r7, #6
20001bca:	33ff      	adds	r3, #255	@ 0xff
20001bcc:	701a      	strb	r2, [r3, #0]
                    
                    // Calculate overlap in each direction
                    i8 overlap_x = (ball.geo->size_x + bricks[i].dimen.x) / 2 - abs(dx);
20001bce:	4b2b      	ldr	r3, [pc, #172]	@ (20001c7c <main+0x6ba>)
20001bd0:	681b      	ldr	r3, [r3, #0]
20001bd2:	685b      	ldr	r3, [r3, #4]
20001bd4:	225c      	movs	r2, #92	@ 0x5c
20001bd6:	18b9      	adds	r1, r7, r2
20001bd8:	2292      	movs	r2, #146	@ 0x92
20001bda:	0052      	lsls	r2, r2, #1
20001bdc:	18ba      	adds	r2, r7, r2
20001bde:	6812      	ldr	r2, [r2, #0]
20001be0:	0092      	lsls	r2, r2, #2
20001be2:	188a      	adds	r2, r1, r2
20001be4:	3202      	adds	r2, #2
20001be6:	7812      	ldrb	r2, [r2, #0]
20001be8:	b252      	sxtb	r2, r2
20001bea:	189b      	adds	r3, r3, r2
20001bec:	2b00      	cmp	r3, #0
20001bee:	da00      	bge.n	20001bf2 <main+0x630>
20001bf0:	3301      	adds	r3, #1
20001bf2:	105b      	asrs	r3, r3, #1
20001bf4:	b2dc      	uxtb	r4, r3
20001bf6:	1dfb      	adds	r3, r7, #7
20001bf8:	33ff      	adds	r3, #255	@ 0xff
20001bfa:	781b      	ldrb	r3, [r3, #0]
20001bfc:	b25b      	sxtb	r3, r3
20001bfe:	0018      	movs	r0, r3
20001c00:	f7fe ff7d 	bl	20000afe <abs>
20001c04:	0003      	movs	r3, r0
20001c06:	b2db      	uxtb	r3, r3
20001c08:	1ae3      	subs	r3, r4, r3
20001c0a:	b2da      	uxtb	r2, r3
20001c0c:	1d7b      	adds	r3, r7, #5
20001c0e:	33ff      	adds	r3, #255	@ 0xff
20001c10:	701a      	strb	r2, [r3, #0]
                    i8 overlap_y = (ball.geo->size_y + bricks[i].dimen.y) / 2 - abs(dy);
20001c12:	4b1a      	ldr	r3, [pc, #104]	@ (20001c7c <main+0x6ba>)
20001c14:	681b      	ldr	r3, [r3, #0]
20001c16:	689b      	ldr	r3, [r3, #8]
20001c18:	225c      	movs	r2, #92	@ 0x5c
20001c1a:	18b9      	adds	r1, r7, r2
20001c1c:	2292      	movs	r2, #146	@ 0x92
20001c1e:	0052      	lsls	r2, r2, #1
20001c20:	18ba      	adds	r2, r7, r2
20001c22:	6812      	ldr	r2, [r2, #0]
20001c24:	0092      	lsls	r2, r2, #2
20001c26:	188a      	adds	r2, r1, r2
20001c28:	3203      	adds	r2, #3
20001c2a:	7812      	ldrb	r2, [r2, #0]
20001c2c:	b252      	sxtb	r2, r2
20001c2e:	189b      	adds	r3, r3, r2
20001c30:	2b00      	cmp	r3, #0
20001c32:	da00      	bge.n	20001c36 <main+0x674>
20001c34:	3301      	adds	r3, #1
20001c36:	105b      	asrs	r3, r3, #1
20001c38:	b2dc      	uxtb	r4, r3
20001c3a:	1dbb      	adds	r3, r7, #6
20001c3c:	33ff      	adds	r3, #255	@ 0xff
20001c3e:	781b      	ldrb	r3, [r3, #0]
20001c40:	b25b      	sxtb	r3, r3
20001c42:	0018      	movs	r0, r3
20001c44:	f7fe ff5b 	bl	20000afe <abs>
20001c48:	0003      	movs	r3, r0
20001c4a:	b2db      	uxtb	r3, r3
20001c4c:	1ae3      	subs	r3, r4, r3
20001c4e:	b2da      	uxtb	r2, r3
20001c50:	1d3b      	adds	r3, r7, #4
20001c52:	33ff      	adds	r3, #255	@ 0xff
20001c54:	701a      	strb	r2, [r3, #0]
                    
                    // Change direction based on smaller overlap (more likely collision side)
                    if (overlap_x < overlap_y) {
20001c56:	1d7a      	adds	r2, r7, #5
20001c58:	32ff      	adds	r2, #255	@ 0xff
20001c5a:	1d3b      	adds	r3, r7, #4
20001c5c:	33ff      	adds	r3, #255	@ 0xff
20001c5e:	7812      	ldrb	r2, [r2, #0]
20001c60:	b252      	sxtb	r2, r2
20001c62:	781b      	ldrb	r3, [r3, #0]
20001c64:	b25b      	sxtb	r3, r3
20001c66:	429a      	cmp	r2, r3
20001c68:	da0c      	bge.n	20001c84 <main+0x6c2>
                        ball.dir_x *= -1;
20001c6a:	4b04      	ldr	r3, [pc, #16]	@ (20001c7c <main+0x6ba>)
20001c6c:	685b      	ldr	r3, [r3, #4]
20001c6e:	425a      	negs	r2, r3
20001c70:	4b02      	ldr	r3, [pc, #8]	@ (20001c7c <main+0x6ba>)
20001c72:	605a      	str	r2, [r3, #4]
20001c74:	e00b      	b.n	20001c8e <main+0x6cc>
20001c76:	46c0      	nop			@ (mov r8, r8)
20001c78:	20002f94 	.word	0x20002f94
20001c7c:	20002f70 	.word	0x20002f70
20001c80:	fffffef4 	.word	0xfffffef4
                    } else {
                        ball.dir_y *= -1;
20001c84:	4be4      	ldr	r3, [pc, #912]	@ (20002018 <main+0xa56>)
20001c86:	689b      	ldr	r3, [r3, #8]
20001c88:	425a      	negs	r2, r3
20001c8a:	4be3      	ldr	r3, [pc, #908]	@ (20002018 <main+0xa56>)
20001c8c:	609a      	str	r2, [r3, #8]
                    }
                    
                    // Remove the brick and increment score
                    brick_active[i] = false;
20001c8e:	4be3      	ldr	r3, [pc, #908]	@ (2000201c <main+0xa5a>)
20001c90:	22a4      	movs	r2, #164	@ 0xa4
20001c92:	0052      	lsls	r2, r2, #1
20001c94:	189b      	adds	r3, r3, r2
20001c96:	19da      	adds	r2, r3, r7
20001c98:	2492      	movs	r4, #146	@ 0x92
20001c9a:	0064      	lsls	r4, r4, #1
20001c9c:	193b      	adds	r3, r7, r4
20001c9e:	681b      	ldr	r3, [r3, #0]
20001ca0:	18d3      	adds	r3, r2, r3
20001ca2:	2200      	movs	r2, #0
20001ca4:	701a      	strb	r2, [r3, #0]
                    score += 10;
20001ca6:	21a2      	movs	r1, #162	@ 0xa2
20001ca8:	0049      	lsls	r1, r1, #1
20001caa:	187b      	adds	r3, r7, r1
20001cac:	681b      	ldr	r3, [r3, #0]
20001cae:	330a      	adds	r3, #10
20001cb0:	187a      	adds	r2, r7, r1
20001cb2:	6013      	str	r3, [r2, #0]
                    display_game_info(score, lives);
20001cb4:	23a0      	movs	r3, #160	@ 0xa0
20001cb6:	005b      	lsls	r3, r3, #1
20001cb8:	18fb      	adds	r3, r7, r3
20001cba:	681a      	ldr	r2, [r3, #0]
20001cbc:	187b      	adds	r3, r7, r1
20001cbe:	681b      	ldr	r3, [r3, #0]
20001cc0:	0011      	movs	r1, r2
20001cc2:	0018      	movs	r0, r3
20001cc4:	f7ff fb8a 	bl	200013dc <display_game_info>
                    
                    // Clear the entire brick area properly
                    // First clear a slightly larger area to ensure all pixels are removed
                    int clear_x_start = max(0, bricks[i].origin.x - 1);
20001cc8:	255c      	movs	r5, #92	@ 0x5c
20001cca:	197b      	adds	r3, r7, r5
20001ccc:	193a      	adds	r2, r7, r4
20001cce:	6812      	ldr	r2, [r2, #0]
20001cd0:	0092      	lsls	r2, r2, #2
20001cd2:	56d3      	ldrsb	r3, [r2, r3]
20001cd4:	3b01      	subs	r3, #1
20001cd6:	0019      	movs	r1, r3
20001cd8:	2000      	movs	r0, #0
20001cda:	f7ff f841 	bl	20000d60 <max>
20001cde:	0003      	movs	r3, r0
20001ce0:	26fc      	movs	r6, #252	@ 0xfc
20001ce2:	19ba      	adds	r2, r7, r6
20001ce4:	6013      	str	r3, [r2, #0]
                    int clear_y_start = max(0, bricks[i].origin.y - 1);
20001ce6:	197a      	adds	r2, r7, r5
20001ce8:	193b      	adds	r3, r7, r4
20001cea:	681b      	ldr	r3, [r3, #0]
20001cec:	009b      	lsls	r3, r3, #2
20001cee:	18d3      	adds	r3, r2, r3
20001cf0:	3301      	adds	r3, #1
20001cf2:	781b      	ldrb	r3, [r3, #0]
20001cf4:	b25b      	sxtb	r3, r3
20001cf6:	3b01      	subs	r3, #1
20001cf8:	0019      	movs	r1, r3
20001cfa:	2000      	movs	r0, #0
20001cfc:	f7ff f830 	bl	20000d60 <max>
20001d00:	0003      	movs	r3, r0
20001d02:	22f8      	movs	r2, #248	@ 0xf8
20001d04:	18ba      	adds	r2, r7, r2
20001d06:	6013      	str	r3, [r2, #0]
                    int clear_x_end = min(SCREEN_WIDTH - 1, bricks[i].origin.x + bricks[i].dimen.x + 1);
20001d08:	197b      	adds	r3, r7, r5
20001d0a:	193a      	adds	r2, r7, r4
20001d0c:	6812      	ldr	r2, [r2, #0]
20001d0e:	0092      	lsls	r2, r2, #2
20001d10:	56d3      	ldrsb	r3, [r2, r3]
20001d12:	0019      	movs	r1, r3
20001d14:	197a      	adds	r2, r7, r5
20001d16:	193b      	adds	r3, r7, r4
20001d18:	681b      	ldr	r3, [r3, #0]
20001d1a:	009b      	lsls	r3, r3, #2
20001d1c:	18d3      	adds	r3, r2, r3
20001d1e:	3302      	adds	r3, #2
20001d20:	781b      	ldrb	r3, [r3, #0]
20001d22:	b25b      	sxtb	r3, r3
20001d24:	18cb      	adds	r3, r1, r3
20001d26:	3301      	adds	r3, #1
20001d28:	0019      	movs	r1, r3
20001d2a:	207f      	movs	r0, #127	@ 0x7f
20001d2c:	f7ff f80a 	bl	20000d44 <min>
20001d30:	0003      	movs	r3, r0
20001d32:	22f4      	movs	r2, #244	@ 0xf4
20001d34:	18ba      	adds	r2, r7, r2
20001d36:	6013      	str	r3, [r2, #0]
                    int clear_y_end = min(SCREEN_HEIGHT - 1, bricks[i].origin.y + bricks[i].dimen.y + 1);
20001d38:	197a      	adds	r2, r7, r5
20001d3a:	193b      	adds	r3, r7, r4
20001d3c:	681b      	ldr	r3, [r3, #0]
20001d3e:	009b      	lsls	r3, r3, #2
20001d40:	18d3      	adds	r3, r2, r3
20001d42:	3301      	adds	r3, #1
20001d44:	781b      	ldrb	r3, [r3, #0]
20001d46:	b25b      	sxtb	r3, r3
20001d48:	0019      	movs	r1, r3
20001d4a:	197a      	adds	r2, r7, r5
20001d4c:	193b      	adds	r3, r7, r4
20001d4e:	681b      	ldr	r3, [r3, #0]
20001d50:	009b      	lsls	r3, r3, #2
20001d52:	18d3      	adds	r3, r2, r3
20001d54:	3303      	adds	r3, #3
20001d56:	781b      	ldrb	r3, [r3, #0]
20001d58:	b25b      	sxtb	r3, r3
20001d5a:	18cb      	adds	r3, r1, r3
20001d5c:	3301      	adds	r3, #1
20001d5e:	0019      	movs	r1, r3
20001d60:	203f      	movs	r0, #63	@ 0x3f
20001d62:	f7fe ffef 	bl	20000d44 <min>
20001d66:	0003      	movs	r3, r0
20001d68:	22f0      	movs	r2, #240	@ 0xf0
20001d6a:	18ba      	adds	r2, r7, r2
20001d6c:	6013      	str	r3, [r2, #0]
                    
                    for (int j = clear_x_start; j <= clear_x_end; j++) {
20001d6e:	19bb      	adds	r3, r7, r6
20001d70:	681b      	ldr	r3, [r3, #0]
20001d72:	2290      	movs	r2, #144	@ 0x90
20001d74:	0052      	lsls	r2, r2, #1
20001d76:	18ba      	adds	r2, r7, r2
20001d78:	6013      	str	r3, [r2, #0]
20001d7a:	e028      	b.n	20001dce <main+0x80c>
                        for (int k = clear_y_start; k <= clear_y_end; k++) {
20001d7c:	23f8      	movs	r3, #248	@ 0xf8
20001d7e:	18fb      	adds	r3, r7, r3
20001d80:	681b      	ldr	r3, [r3, #0]
20001d82:	228e      	movs	r2, #142	@ 0x8e
20001d84:	0052      	lsls	r2, r2, #1
20001d86:	18ba      	adds	r2, r7, r2
20001d88:	6013      	str	r3, [r2, #0]
20001d8a:	e010      	b.n	20001dae <main+0x7ec>
                            graphic_pixel_clear(j, k);
20001d8c:	248e      	movs	r4, #142	@ 0x8e
20001d8e:	0064      	lsls	r4, r4, #1
20001d90:	193b      	adds	r3, r7, r4
20001d92:	681a      	ldr	r2, [r3, #0]
20001d94:	2390      	movs	r3, #144	@ 0x90
20001d96:	005b      	lsls	r3, r3, #1
20001d98:	18fb      	adds	r3, r7, r3
20001d9a:	681b      	ldr	r3, [r3, #0]
20001d9c:	0011      	movs	r1, r2
20001d9e:	0018      	movs	r0, r3
20001da0:	f7fe fc2d 	bl	200005fe <graphic_pixel_clear>
                        for (int k = clear_y_start; k <= clear_y_end; k++) {
20001da4:	193b      	adds	r3, r7, r4
20001da6:	681b      	ldr	r3, [r3, #0]
20001da8:	3301      	adds	r3, #1
20001daa:	193a      	adds	r2, r7, r4
20001dac:	6013      	str	r3, [r2, #0]
20001dae:	238e      	movs	r3, #142	@ 0x8e
20001db0:	005b      	lsls	r3, r3, #1
20001db2:	18fb      	adds	r3, r7, r3
20001db4:	681a      	ldr	r2, [r3, #0]
20001db6:	23f0      	movs	r3, #240	@ 0xf0
20001db8:	18fb      	adds	r3, r7, r3
20001dba:	681b      	ldr	r3, [r3, #0]
20001dbc:	429a      	cmp	r2, r3
20001dbe:	dde5      	ble.n	20001d8c <main+0x7ca>
                    for (int j = clear_x_start; j <= clear_x_end; j++) {
20001dc0:	2290      	movs	r2, #144	@ 0x90
20001dc2:	0052      	lsls	r2, r2, #1
20001dc4:	18bb      	adds	r3, r7, r2
20001dc6:	681b      	ldr	r3, [r3, #0]
20001dc8:	3301      	adds	r3, #1
20001dca:	18ba      	adds	r2, r7, r2
20001dcc:	6013      	str	r3, [r2, #0]
20001dce:	2390      	movs	r3, #144	@ 0x90
20001dd0:	005b      	lsls	r3, r3, #1
20001dd2:	18fb      	adds	r3, r7, r3
20001dd4:	681a      	ldr	r2, [r3, #0]
20001dd6:	23f4      	movs	r3, #244	@ 0xf4
20001dd8:	18fb      	adds	r3, r7, r3
20001dda:	681b      	ldr	r3, [r3, #0]
20001ddc:	429a      	cmp	r2, r3
20001dde:	ddcd      	ble.n	20001d7c <main+0x7ba>
                        }
                    }
                    
                    brick_count--;
20001de0:	219e      	movs	r1, #158	@ 0x9e
20001de2:	0049      	lsls	r1, r1, #1
20001de4:	187b      	adds	r3, r7, r1
20001de6:	681b      	ldr	r3, [r3, #0]
20001de8:	3b01      	subs	r3, #1
20001dea:	187a      	adds	r2, r7, r1
20001dec:	6013      	str	r3, [r2, #0]
                    brick_hit = true;
20001dee:	230c      	movs	r3, #12
20001df0:	33ff      	adds	r3, #255	@ 0xff
20001df2:	18fb      	adds	r3, r7, r3
20001df4:	2201      	movs	r2, #1
20001df6:	701a      	strb	r2, [r3, #0]
                    
                    // Check if all bricks are cleared
                    if (brick_count <= 0) {
20001df8:	187b      	adds	r3, r7, r1
20001dfa:	681b      	ldr	r3, [r3, #0]
20001dfc:	2b00      	cmp	r3, #0
20001dfe:	dd00      	ble.n	20001e02 <main+0x840>
20001e00:	e08b      	b.n	20001f1a <main+0x958>
                        // Level complete
                        level++;
20001e02:	229c      	movs	r2, #156	@ 0x9c
20001e04:	0052      	lsls	r2, r2, #1
20001e06:	18bb      	adds	r3, r7, r2
20001e08:	681b      	ldr	r3, [r3, #0]
20001e0a:	3301      	adds	r3, #1
20001e0c:	18ba      	adds	r2, r7, r2
20001e0e:	6013      	str	r3, [r2, #0]
                        graphic_clear_screen();
20001e10:	f7fe fbef 	bl	200005f2 <graphic_clear_screen>
                        
                        // Display level complete message
                        ascii_command(0b00000001, delay_milli, 2);
20001e14:	4b82      	ldr	r3, [pc, #520]	@ (20002020 <main+0xa5e>)
20001e16:	2202      	movs	r2, #2
20001e18:	0019      	movs	r1, r3
20001e1a:	2001      	movs	r0, #1
20001e1c:	f7fe f9de 	bl	200001dc <ascii_command>
                        char level_complete[] = "Level Complete!";
20001e20:	4b80      	ldr	r3, [pc, #512]	@ (20002024 <main+0xa62>)
20001e22:	22a4      	movs	r2, #164	@ 0xa4
20001e24:	0052      	lsls	r2, r2, #1
20001e26:	189b      	adds	r3, r3, r2
20001e28:	19db      	adds	r3, r3, r7
20001e2a:	4a7f      	ldr	r2, [pc, #508]	@ (20002028 <main+0xa66>)
20001e2c:	ca13      	ldmia	r2!, {r0, r1, r4}
20001e2e:	c313      	stmia	r3!, {r0, r1, r4}
20001e30:	6812      	ldr	r2, [r2, #0]
20001e32:	601a      	str	r2, [r3, #0]
                        ascii_goto(1, 1);
20001e34:	2101      	movs	r1, #1
20001e36:	2001      	movs	r0, #1
20001e38:	f7fe fa38 	bl	200002ac <ascii_goto>
                        s = level_complete;
20001e3c:	2310      	movs	r3, #16
20001e3e:	18fb      	adds	r3, r7, r3
20001e40:	2296      	movs	r2, #150	@ 0x96
20001e42:	0052      	lsls	r2, r2, #1
20001e44:	18ba      	adds	r2, r7, r2
20001e46:	6013      	str	r3, [r2, #0]
                        while (*s)
20001e48:	e00a      	b.n	20001e60 <main+0x89e>
                            ascii_write_char(*s++);
20001e4a:	2196      	movs	r1, #150	@ 0x96
20001e4c:	0049      	lsls	r1, r1, #1
20001e4e:	187b      	adds	r3, r7, r1
20001e50:	681b      	ldr	r3, [r3, #0]
20001e52:	1c5a      	adds	r2, r3, #1
20001e54:	1879      	adds	r1, r7, r1
20001e56:	600a      	str	r2, [r1, #0]
20001e58:	781b      	ldrb	r3, [r3, #0]
20001e5a:	0018      	movs	r0, r3
20001e5c:	f7fe fa41 	bl	200002e2 <ascii_write_char>
                        while (*s)
20001e60:	2596      	movs	r5, #150	@ 0x96
20001e62:	006d      	lsls	r5, r5, #1
20001e64:	197b      	adds	r3, r7, r5
20001e66:	681b      	ldr	r3, [r3, #0]
20001e68:	781b      	ldrb	r3, [r3, #0]
20001e6a:	2b00      	cmp	r3, #0
20001e6c:	d1ed      	bne.n	20001e4a <main+0x888>
                            
                        char next_level[] = "Next Level...";
20001e6e:	4b6f      	ldr	r3, [pc, #444]	@ (2000202c <main+0xa6a>)
20001e70:	22a4      	movs	r2, #164	@ 0xa4
20001e72:	0052      	lsls	r2, r2, #1
20001e74:	189b      	adds	r3, r3, r2
20001e76:	19db      	adds	r3, r3, r7
20001e78:	4a6d      	ldr	r2, [pc, #436]	@ (20002030 <main+0xa6e>)
20001e7a:	ca13      	ldmia	r2!, {r0, r1, r4}
20001e7c:	c313      	stmia	r3!, {r0, r1, r4}
20001e7e:	8812      	ldrh	r2, [r2, #0]
20001e80:	801a      	strh	r2, [r3, #0]
                        ascii_goto(1, 2);
20001e82:	2102      	movs	r1, #2
20001e84:	2001      	movs	r0, #1
20001e86:	f7fe fa11 	bl	200002ac <ascii_goto>
                        s = next_level;
20001e8a:	003b      	movs	r3, r7
20001e8c:	197a      	adds	r2, r7, r5
20001e8e:	6013      	str	r3, [r2, #0]
                        while (*s)
20001e90:	e00a      	b.n	20001ea8 <main+0x8e6>
                            ascii_write_char(*s++);
20001e92:	2196      	movs	r1, #150	@ 0x96
20001e94:	0049      	lsls	r1, r1, #1
20001e96:	187b      	adds	r3, r7, r1
20001e98:	681b      	ldr	r3, [r3, #0]
20001e9a:	1c5a      	adds	r2, r3, #1
20001e9c:	1879      	adds	r1, r7, r1
20001e9e:	600a      	str	r2, [r1, #0]
20001ea0:	781b      	ldrb	r3, [r3, #0]
20001ea2:	0018      	movs	r0, r3
20001ea4:	f7fe fa1d 	bl	200002e2 <ascii_write_char>
                        while (*s)
20001ea8:	2396      	movs	r3, #150	@ 0x96
20001eaa:	005b      	lsls	r3, r3, #1
20001eac:	18fb      	adds	r3, r7, r3
20001eae:	681b      	ldr	r3, [r3, #0]
20001eb0:	781b      	ldrb	r3, [r3, #0]
20001eb2:	2b00      	cmp	r3, #0
20001eb4:	d1ed      	bne.n	20001e92 <main+0x8d0>
                            
                        delay_milli(2000);
20001eb6:	23fa      	movs	r3, #250	@ 0xfa
20001eb8:	00db      	lsls	r3, r3, #3
20001eba:	0018      	movs	r0, r3
20001ebc:	f7fe fb69 	bl	20000592 <delay_milli>
                        
                        // Increase difficulty
                        game_speed = game_speed > 10 ? game_speed - 5 : 10;
20001ec0:	229a      	movs	r2, #154	@ 0x9a
20001ec2:	0052      	lsls	r2, r2, #1
20001ec4:	18bb      	adds	r3, r7, r2
20001ec6:	681b      	ldr	r3, [r3, #0]
20001ec8:	2b0a      	cmp	r3, #10
20001eca:	dd03      	ble.n	20001ed4 <main+0x912>
20001ecc:	18bb      	adds	r3, r7, r2
20001ece:	681b      	ldr	r3, [r3, #0]
20001ed0:	3b05      	subs	r3, #5
20001ed2:	e000      	b.n	20001ed6 <main+0x914>
20001ed4:	230a      	movs	r3, #10
20001ed6:	229a      	movs	r2, #154	@ 0x9a
20001ed8:	0052      	lsls	r2, r2, #1
20001eda:	18ba      	adds	r2, r7, r2
20001edc:	6013      	str	r3, [r2, #0]
                        
                        // Reset bricks for next level
                        brick_count = init_bricks(bricks, brick_active);
20001ede:	233c      	movs	r3, #60	@ 0x3c
20001ee0:	18fa      	adds	r2, r7, r3
20001ee2:	235c      	movs	r3, #92	@ 0x5c
20001ee4:	18fb      	adds	r3, r7, r3
20001ee6:	0011      	movs	r1, r2
20001ee8:	0018      	movs	r0, r3
20001eea:	f7ff fae9 	bl	200014c0 <init_bricks>
20001eee:	0003      	movs	r3, r0
20001ef0:	229e      	movs	r2, #158	@ 0x9e
20001ef2:	0052      	lsls	r2, r2, #1
20001ef4:	18ba      	adds	r2, r7, r2
20001ef6:	6013      	str	r3, [r2, #0]
20001ef8:	f7ff fbb7 	bl	2000166a <main+0xa8>
        for (int i = 0; i < BRICK_ROWS * BRICK_COLS; i++) {
20001efc:	2292      	movs	r2, #146	@ 0x92
20001efe:	0052      	lsls	r2, r2, #1
20001f00:	18bb      	adds	r3, r7, r2
20001f02:	681b      	ldr	r3, [r3, #0]
20001f04:	3301      	adds	r3, #1
20001f06:	18ba      	adds	r2, r7, r2
20001f08:	6013      	str	r3, [r2, #0]
20001f0a:	2392      	movs	r3, #146	@ 0x92
20001f0c:	005b      	lsls	r3, r3, #1
20001f0e:	18fb      	adds	r3, r7, r3
20001f10:	681b      	ldr	r3, [r3, #0]
20001f12:	2b1f      	cmp	r3, #31
20001f14:	dc00      	bgt.n	20001f18 <main+0x956>
20001f16:	e5c9      	b.n	20001aac <main+0x4ea>
20001f18:	e000      	b.n	20001f1c <main+0x95a>
                        goto new_life;
                    }
                    
                    // Only handle one brick collision per frame
                    break;
20001f1a:	46c0      	nop			@ (mov r8, r8)
                }
            }
        }

        // Checks for ball collision with walls with repositioning fixes
        WallCollision wc = check_wall_collision(&ball);
20001f1c:	4b3e      	ldr	r3, [pc, #248]	@ (20002018 <main+0xa56>)
20001f1e:	0018      	movs	r0, r3
20001f20:	f7ff f853 	bl	20000fca <check_wall_collision>
20001f24:	1c03      	adds	r3, r0, #0
20001f26:	1c1a      	adds	r2, r3, #0
20001f28:	4b42      	ldr	r3, [pc, #264]	@ (20002034 <main+0xa72>)
20001f2a:	21a4      	movs	r1, #164	@ 0xa4
20001f2c:	0049      	lsls	r1, r1, #1
20001f2e:	185b      	adds	r3, r3, r1
20001f30:	19db      	adds	r3, r3, r7
20001f32:	801a      	strh	r2, [r3, #0]
        if (wc.is_colliding)
20001f34:	4b3f      	ldr	r3, [pc, #252]	@ (20002034 <main+0xa72>)
20001f36:	000a      	movs	r2, r1
20001f38:	189b      	adds	r3, r3, r2
20001f3a:	19db      	adds	r3, r3, r7
20001f3c:	781b      	ldrb	r3, [r3, #0]
20001f3e:	2b00      	cmp	r3, #0
20001f40:	d053      	beq.n	20001fea <main+0xa28>
        {
            switch (wc.which)
20001f42:	4b3c      	ldr	r3, [pc, #240]	@ (20002034 <main+0xa72>)
20001f44:	189b      	adds	r3, r3, r2
20001f46:	19db      	adds	r3, r3, r7
20001f48:	785b      	ldrb	r3, [r3, #1]
20001f4a:	b25b      	sxtb	r3, r3
20001f4c:	2b75      	cmp	r3, #117	@ 0x75
20001f4e:	d008      	beq.n	20001f62 <main+0x9a0>
20001f50:	dc4a      	bgt.n	20001fe8 <main+0xa26>
20001f52:	2b72      	cmp	r3, #114	@ 0x72
20001f54:	d017      	beq.n	20001f86 <main+0x9c4>
20001f56:	dc47      	bgt.n	20001fe8 <main+0xa26>
20001f58:	2b64      	cmp	r3, #100	@ 0x64
20001f5a:	d021      	beq.n	20001fa0 <main+0x9de>
20001f5c:	2b6c      	cmp	r3, #108	@ 0x6c
20001f5e:	d009      	beq.n	20001f74 <main+0x9b2>
                    
                    // Small pause before continuing
                    delay_milli(1000);
                    goto new_life;
                default:
                    break;
20001f60:	e042      	b.n	20001fe8 <main+0xa26>
                    ball.pos_y = 1;
20001f62:	4b2d      	ldr	r3, [pc, #180]	@ (20002018 <main+0xa56>)
20001f64:	2201      	movs	r2, #1
20001f66:	611a      	str	r2, [r3, #16]
                    ball.dir_y *= -1;
20001f68:	4b2b      	ldr	r3, [pc, #172]	@ (20002018 <main+0xa56>)
20001f6a:	689b      	ldr	r3, [r3, #8]
20001f6c:	425a      	negs	r2, r3
20001f6e:	4b2a      	ldr	r3, [pc, #168]	@ (20002018 <main+0xa56>)
20001f70:	609a      	str	r2, [r3, #8]
                    break;
20001f72:	e03a      	b.n	20001fea <main+0xa28>
                    ball.pos_x = 1;
20001f74:	4b28      	ldr	r3, [pc, #160]	@ (20002018 <main+0xa56>)
20001f76:	2201      	movs	r2, #1
20001f78:	60da      	str	r2, [r3, #12]
                    ball.dir_x *= -1;
20001f7a:	4b27      	ldr	r3, [pc, #156]	@ (20002018 <main+0xa56>)
20001f7c:	685b      	ldr	r3, [r3, #4]
20001f7e:	425a      	negs	r2, r3
20001f80:	4b25      	ldr	r3, [pc, #148]	@ (20002018 <main+0xa56>)
20001f82:	605a      	str	r2, [r3, #4]
                    break;
20001f84:	e031      	b.n	20001fea <main+0xa28>
                    ball.pos_x = SCREEN_WIDTH - ball.geo->size_x - 1;
20001f86:	4b24      	ldr	r3, [pc, #144]	@ (20002018 <main+0xa56>)
20001f88:	681b      	ldr	r3, [r3, #0]
20001f8a:	685b      	ldr	r3, [r3, #4]
20001f8c:	227f      	movs	r2, #127	@ 0x7f
20001f8e:	1ad2      	subs	r2, r2, r3
20001f90:	4b21      	ldr	r3, [pc, #132]	@ (20002018 <main+0xa56>)
20001f92:	60da      	str	r2, [r3, #12]
                    ball.dir_x *= -1;
20001f94:	4b20      	ldr	r3, [pc, #128]	@ (20002018 <main+0xa56>)
20001f96:	685b      	ldr	r3, [r3, #4]
20001f98:	425a      	negs	r2, r3
20001f9a:	4b1f      	ldr	r3, [pc, #124]	@ (20002018 <main+0xa56>)
20001f9c:	605a      	str	r2, [r3, #4]
                    break;
20001f9e:	e024      	b.n	20001fea <main+0xa28>
                    lives--;
20001fa0:	24a0      	movs	r4, #160	@ 0xa0
20001fa2:	0064      	lsls	r4, r4, #1
20001fa4:	193b      	adds	r3, r7, r4
20001fa6:	681b      	ldr	r3, [r3, #0]
20001fa8:	3b01      	subs	r3, #1
20001faa:	193a      	adds	r2, r7, r4
20001fac:	6013      	str	r3, [r2, #0]
                    display_game_info(score, lives);
20001fae:	193b      	adds	r3, r7, r4
20001fb0:	681a      	ldr	r2, [r3, #0]
20001fb2:	25a2      	movs	r5, #162	@ 0xa2
20001fb4:	006d      	lsls	r5, r5, #1
20001fb6:	197b      	adds	r3, r7, r5
20001fb8:	681b      	ldr	r3, [r3, #0]
20001fba:	0011      	movs	r1, r2
20001fbc:	0018      	movs	r0, r3
20001fbe:	f7ff fa0d 	bl	200013dc <display_game_info>
                    if (lives <= 0) {
20001fc2:	193b      	adds	r3, r7, r4
20001fc4:	681b      	ldr	r3, [r3, #0]
20001fc6:	2b00      	cmp	r3, #0
20001fc8:	dc07      	bgt.n	20001fda <main+0xa18>
                        game_over(score, false);
20001fca:	197b      	adds	r3, r7, r5
20001fcc:	681b      	ldr	r3, [r3, #0]
20001fce:	2100      	movs	r1, #0
20001fd0:	0018      	movs	r0, r3
20001fd2:	f7ff f936 	bl	20001242 <game_over>
                        goto init_game;
20001fd6:	f7ff fb21 	bl	2000161c <main+0x5a>
                    delay_milli(1000);
20001fda:	23fa      	movs	r3, #250	@ 0xfa
20001fdc:	009b      	lsls	r3, r3, #2
20001fde:	0018      	movs	r0, r3
20001fe0:	f7fe fad7 	bl	20000592 <delay_milli>
                    goto new_life;
20001fe4:	f7ff fb41 	bl	2000166a <main+0xa8>
                    break;
20001fe8:	46c0      	nop			@ (mov r8, r8)
            }
        }
        
        // If player has reached level 3 and cleared all bricks, they win!
        if (level >= 3 && brick_count <= 0) {
20001fea:	239c      	movs	r3, #156	@ 0x9c
20001fec:	005b      	lsls	r3, r3, #1
20001fee:	18fb      	adds	r3, r7, r3
20001ff0:	681b      	ldr	r3, [r3, #0]
20001ff2:	2b02      	cmp	r3, #2
20001ff4:	dd20      	ble.n	20002038 <main+0xa76>
20001ff6:	239e      	movs	r3, #158	@ 0x9e
20001ff8:	005b      	lsls	r3, r3, #1
20001ffa:	18fb      	adds	r3, r7, r3
20001ffc:	681b      	ldr	r3, [r3, #0]
20001ffe:	2b00      	cmp	r3, #0
20002000:	dc1a      	bgt.n	20002038 <main+0xa76>
            game_over(score, true);
20002002:	23a2      	movs	r3, #162	@ 0xa2
20002004:	005b      	lsls	r3, r3, #1
20002006:	18fb      	adds	r3, r7, r3
20002008:	681b      	ldr	r3, [r3, #0]
2000200a:	2101      	movs	r1, #1
2000200c:	0018      	movs	r0, r3
2000200e:	f7ff f918 	bl	20001242 <game_over>
            goto init_game;
20002012:	f7ff fb03 	bl	2000161c <main+0x5a>
20002016:	46c0      	nop			@ (mov r8, r8)
20002018:	20002f70 	.word	0x20002f70
2000201c:	fffffef4 	.word	0xfffffef4
20002020:	20000593 	.word	0x20000593
20002024:	fffffec8 	.word	0xfffffec8
20002028:	200030e8 	.word	0x200030e8
2000202c:	fffffeb8 	.word	0xfffffeb8
20002030:	200030f8 	.word	0x200030f8
20002034:	fffffed8 	.word	0xfffffed8
        }
        
        // Add a small delay to control game speed
        delay_milli(game_speed);
20002038:	239a      	movs	r3, #154	@ 0x9a
2000203a:	005b      	lsls	r3, r3, #1
2000203c:	18fb      	adds	r3, r7, r3
2000203e:	681b      	ldr	r3, [r3, #0]
20002040:	0018      	movs	r0, r3
20002042:	f7fe faa6 	bl	20000592 <delay_milli>
    {
20002046:	e41d      	b.n	20001884 <main+0x2c2>

20002048 <_sbrk>:
20002048:	4a0b      	ldr	r2, [pc, #44]	@ (20002078 <_sbrk+0x30>)
2000204a:	b508      	push	{r3, lr}
2000204c:	4603      	mov	r3, r0
2000204e:	6810      	ldr	r0, [r2, #0]
20002050:	b128      	cbz	r0, 2000205e <_sbrk+0x16>
20002052:	490a      	ldr	r1, [pc, #40]	@ (2000207c <_sbrk+0x34>)
20002054:	4403      	add	r3, r0
20002056:	428b      	cmp	r3, r1
20002058:	d807      	bhi.n	2000206a <_sbrk+0x22>
2000205a:	6013      	str	r3, [r2, #0]
2000205c:	bd08      	pop	{r3, pc}
2000205e:	4808      	ldr	r0, [pc, #32]	@ (20002080 <_sbrk+0x38>)
20002060:	4906      	ldr	r1, [pc, #24]	@ (2000207c <_sbrk+0x34>)
20002062:	6010      	str	r0, [r2, #0]
20002064:	4403      	add	r3, r0
20002066:	428b      	cmp	r3, r1
20002068:	d9f7      	bls.n	2000205a <_sbrk+0x12>
2000206a:	f000 fcf7 	bl	20002a5c <__errno>
2000206e:	230c      	movs	r3, #12
20002070:	6003      	str	r3, [r0, #0]
20002072:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20002076:	bd08      	pop	{r3, pc}
20002078:	20003118 	.word	0x20003118
2000207c:	20004400 	.word	0x20004400
20002080:	20004000 	.word	0x20004000

20002084 <_crt_init>:
20002084:	4b13      	ldr	r3, [pc, #76]	@ (200020d4 <_crt_init+0x50>)
20002086:	4a14      	ldr	r2, [pc, #80]	@ (200020d8 <_crt_init+0x54>)
20002088:	b510      	push	{r4, lr}
2000208a:	4c14      	ldr	r4, [pc, #80]	@ (200020dc <_crt_init+0x58>)
2000208c:	2100      	movs	r1, #0
2000208e:	4293      	cmp	r3, r2
20002090:	6021      	str	r1, [r4, #0]
20002092:	4604      	mov	r4, r0
20002094:	d203      	bcs.n	2000209e <_crt_init+0x1a>
20002096:	1ad2      	subs	r2, r2, r3
20002098:	4618      	mov	r0, r3
2000209a:	f000 fcc6 	bl	20002a2a <memset>
2000209e:	4620      	mov	r0, r4
200020a0:	4c0f      	ldr	r4, [pc, #60]	@ (200020e0 <_crt_init+0x5c>)
200020a2:	f000 f889 	bl	200021b8 <runtime_usart_init>
200020a6:	6821      	ldr	r1, [r4, #0]
200020a8:	2300      	movs	r3, #0
200020aa:	6848      	ldr	r0, [r1, #4]
200020ac:	2202      	movs	r2, #2
200020ae:	4619      	mov	r1, r3
200020b0:	f000 fa60 	bl	20002574 <setvbuf>
200020b4:	6820      	ldr	r0, [r4, #0]
200020b6:	2300      	movs	r3, #0
200020b8:	4619      	mov	r1, r3
200020ba:	2202      	movs	r2, #2
200020bc:	6880      	ldr	r0, [r0, #8]
200020be:	f000 fa59 	bl	20002574 <setvbuf>
200020c2:	6820      	ldr	r0, [r4, #0]
200020c4:	2300      	movs	r3, #0
200020c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
200020ca:	68c0      	ldr	r0, [r0, #12]
200020cc:	2202      	movs	r2, #2
200020ce:	4619      	mov	r1, r3
200020d0:	f000 ba50 	b.w	20002574 <setvbuf>
200020d4:	20003108 	.word	0x20003108
200020d8:	2000326c 	.word	0x2000326c
200020dc:	20003118 	.word	0x20003118
200020e0:	20002fc4 	.word	0x20002fc4

200020e4 <_crt_deinit>:
200020e4:	f000 b872 	b.w	200021cc <runtime_usart_deinit>

200020e8 <_write>:
200020e8:	1e43      	subs	r3, r0, #1
200020ea:	2b01      	cmp	r3, #1
200020ec:	4608      	mov	r0, r1
200020ee:	d901      	bls.n	200020f4 <_write+0xc>
200020f0:	2000      	movs	r0, #0
200020f2:	4770      	bx	lr
200020f4:	4611      	mov	r1, r2
200020f6:	f000 b899 	b.w	2000222c <runtime_usart_write>
200020fa:	bf00      	nop

200020fc <_read>:
200020fc:	460b      	mov	r3, r1
200020fe:	b108      	cbz	r0, 20002104 <_read+0x8>
20002100:	2000      	movs	r0, #0
20002102:	4770      	bx	lr
20002104:	4611      	mov	r1, r2
20002106:	4618      	mov	r0, r3
20002108:	f000 b86e 	b.w	200021e8 <runtime_usart_read>

2000210c <_close>:
2000210c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20002110:	4770      	bx	lr
20002112:	bf00      	nop

20002114 <_open>:
20002114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
20002118:	4770      	bx	lr
2000211a:	bf00      	nop

2000211c <_fstat>:
2000211c:	2000      	movs	r0, #0
2000211e:	4770      	bx	lr

20002120 <_lseek>:
20002120:	2000      	movs	r0, #0
20002122:	4770      	bx	lr

20002124 <_isatty>:
20002124:	3801      	subs	r0, #1
20002126:	2801      	cmp	r0, #1
20002128:	d901      	bls.n	2000212e <_isatty+0xa>
2000212a:	2000      	movs	r0, #0
2000212c:	4770      	bx	lr
2000212e:	f000 b895 	b.w	2000225c <runtime_usart_isatty>
20002132:	bf00      	nop

20002134 <md407_runtime_uartinit>:
20002134:	4b18      	ldr	r3, [pc, #96]	@ (20002198 <md407_runtime_uartinit+0x64>)
20002136:	4a19      	ldr	r2, [pc, #100]	@ (2000219c <md407_runtime_uartinit+0x68>)
20002138:	6c59      	ldr	r1, [r3, #68]	@ 0x44
2000213a:	4819      	ldr	r0, [pc, #100]	@ (200021a0 <md407_runtime_uartinit+0x6c>)
2000213c:	f041 0110 	orr.w	r1, r1, #16
20002140:	b410      	push	{r4}
20002142:	6459      	str	r1, [r3, #68]	@ 0x44
20002144:	6b19      	ldr	r1, [r3, #48]	@ 0x30
20002146:	f041 0101 	orr.w	r1, r1, #1
2000214a:	6319      	str	r1, [r3, #48]	@ 0x30
2000214c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
2000214e:	f041 0110 	orr.w	r1, r1, #16
20002152:	6259      	str	r1, [r3, #36]	@ 0x24
20002154:	6a59      	ldr	r1, [r3, #36]	@ 0x24
20002156:	f021 0110 	bic.w	r1, r1, #16
2000215a:	6259      	str	r1, [r3, #36]	@ 0x24
2000215c:	6919      	ldr	r1, [r3, #16]
2000215e:	f041 0101 	orr.w	r1, r1, #1
20002162:	6119      	str	r1, [r3, #16]
20002164:	6919      	ldr	r1, [r3, #16]
20002166:	f021 0101 	bic.w	r1, r1, #1
2000216a:	6119      	str	r1, [r3, #16]
2000216c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
2000216e:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
20002172:	6253      	str	r3, [r2, #36]	@ 0x24
20002174:	6813      	ldr	r3, [r2, #0]
20002176:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
2000217a:	6013      	str	r3, [r2, #0]
2000217c:	68d3      	ldr	r3, [r2, #12]
2000217e:	f240 24d9 	movw	r4, #729	@ 0x2d9
20002182:	f242 010c 	movw	r1, #8204	@ 0x200c
20002186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
2000218a:	60d3      	str	r3, [r2, #12]
2000218c:	6084      	str	r4, [r0, #8]
2000218e:	f85d 4b04 	ldr.w	r4, [sp], #4
20002192:	60c1      	str	r1, [r0, #12]
20002194:	4770      	bx	lr
20002196:	bf00      	nop
20002198:	40023800 	.word	0x40023800
2000219c:	40020000 	.word	0x40020000
200021a0:	40011000 	.word	0x40011000

200021a4 <runtime_tstchar>:
200021a4:	4b03      	ldr	r3, [pc, #12]	@ (200021b4 <runtime_tstchar+0x10>)
200021a6:	6818      	ldr	r0, [r3, #0]
200021a8:	f010 0020 	ands.w	r0, r0, #32
200021ac:	bf1c      	itt	ne
200021ae:	6858      	ldrne	r0, [r3, #4]
200021b0:	b2c0      	uxtbne	r0, r0
200021b2:	4770      	bx	lr
200021b4:	40011000 	.word	0x40011000

200021b8 <runtime_usart_init>:
200021b8:	4b03      	ldr	r3, [pc, #12]	@ (200021c8 <runtime_usart_init+0x10>)
200021ba:	2000      	movs	r0, #0
200021bc:	f240 22d9 	movw	r2, #729	@ 0x2d9
200021c0:	609a      	str	r2, [r3, #8]
200021c2:	6158      	str	r0, [r3, #20]
200021c4:	6118      	str	r0, [r3, #16]
200021c6:	4770      	bx	lr
200021c8:	40011000 	.word	0x40011000

200021cc <runtime_usart_deinit>:
200021cc:	b508      	push	{r3, lr}
200021ce:	4b04      	ldr	r3, [pc, #16]	@ (200021e0 <runtime_usart_deinit+0x14>)
200021d0:	681b      	ldr	r3, [r3, #0]
200021d2:	6898      	ldr	r0, [r3, #8]
200021d4:	f000 f9ba 	bl	2000254c <fflush>
200021d8:	4b02      	ldr	r3, [pc, #8]	@ (200021e4 <runtime_usart_deinit+0x18>)
200021da:	2200      	movs	r2, #0
200021dc:	60da      	str	r2, [r3, #12]
200021de:	bd08      	pop	{r3, pc}
200021e0:	20002fc4 	.word	0x20002fc4
200021e4:	40011000 	.word	0x40011000

200021e8 <runtime_usart_read>:
200021e8:	4a09      	ldr	r2, [pc, #36]	@ (20002210 <runtime_usart_read+0x28>)
200021ea:	b500      	push	{lr}
200021ec:	4686      	mov	lr, r0
200021ee:	2000      	movs	r0, #0
200021f0:	6813      	ldr	r3, [r2, #0]
200021f2:	069b      	lsls	r3, r3, #26
200021f4:	d508      	bpl.n	20002208 <runtime_usart_read+0x20>
200021f6:	6853      	ldr	r3, [r2, #4]
200021f8:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
200021fc:	46f4      	mov	ip, lr
200021fe:	d003      	beq.n	20002208 <runtime_usart_read+0x20>
20002200:	f80c 3b01 	strb.w	r3, [ip], #1
20002204:	3001      	adds	r0, #1
20002206:	46e6      	mov	lr, ip
20002208:	4288      	cmp	r0, r1
2000220a:	d1f1      	bne.n	200021f0 <runtime_usart_read+0x8>
2000220c:	f85d fb04 	ldr.w	pc, [sp], #4
20002210:	40011000 	.word	0x40011000

20002214 <runtime_outchar>:
20002214:	4a04      	ldr	r2, [pc, #16]	@ (20002228 <runtime_outchar+0x14>)
20002216:	6813      	ldr	r3, [r2, #0]
20002218:	061b      	lsls	r3, r3, #24
2000221a:	d5fc      	bpl.n	20002216 <runtime_outchar+0x2>
2000221c:	280a      	cmp	r0, #10
2000221e:	6050      	str	r0, [r2, #4]
20002220:	d101      	bne.n	20002226 <runtime_outchar+0x12>
20002222:	200d      	movs	r0, #13
20002224:	e7f7      	b.n	20002216 <runtime_outchar+0x2>
20002226:	4770      	bx	lr
20002228:	40011000 	.word	0x40011000

2000222c <runtime_usart_write>:
2000222c:	4684      	mov	ip, r0
2000222e:	4608      	mov	r0, r1
20002230:	b189      	cbz	r1, 20002256 <runtime_usart_write+0x2a>
20002232:	4a09      	ldr	r2, [pc, #36]	@ (20002258 <runtime_usart_write+0x2c>)
20002234:	b500      	push	{lr}
20002236:	eb0c 0e01 	add.w	lr, ip, r1
2000223a:	f81c 1b01 	ldrb.w	r1, [ip], #1
2000223e:	6813      	ldr	r3, [r2, #0]
20002240:	061b      	lsls	r3, r3, #24
20002242:	d5fc      	bpl.n	2000223e <runtime_usart_write+0x12>
20002244:	290a      	cmp	r1, #10
20002246:	6051      	str	r1, [r2, #4]
20002248:	d101      	bne.n	2000224e <runtime_usart_write+0x22>
2000224a:	210d      	movs	r1, #13
2000224c:	e7f7      	b.n	2000223e <runtime_usart_write+0x12>
2000224e:	45e6      	cmp	lr, ip
20002250:	d1f3      	bne.n	2000223a <runtime_usart_write+0xe>
20002252:	f85d fb04 	ldr.w	pc, [sp], #4
20002256:	4770      	bx	lr
20002258:	40011000 	.word	0x40011000

2000225c <runtime_usart_isatty>:
2000225c:	2001      	movs	r0, #1
2000225e:	4770      	bx	lr

20002260 <md407_runtime_portinit>:
20002260:	4b16      	ldr	r3, [pc, #88]	@ (200022bc <md407_runtime_portinit+0x5c>)
20002262:	4817      	ldr	r0, [pc, #92]	@ (200022c0 <md407_runtime_portinit+0x60>)
20002264:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
20002266:	4917      	ldr	r1, [pc, #92]	@ (200022c4 <md407_runtime_portinit+0x64>)
20002268:	f042 0218 	orr.w	r2, r2, #24
2000226c:	b410      	push	{r4}
2000226e:	631a      	str	r2, [r3, #48]	@ 0x30
20002270:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
20002272:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
20002276:	645c      	str	r4, [r3, #68]	@ 0x44
20002278:	691c      	ldr	r4, [r3, #16]
2000227a:	f044 0418 	orr.w	r4, r4, #24
2000227e:	611c      	str	r4, [r3, #16]
20002280:	691c      	ldr	r4, [r3, #16]
20002282:	f024 0418 	bic.w	r4, r4, #24
20002286:	611c      	str	r4, [r3, #16]
20002288:	695c      	ldr	r4, [r3, #20]
2000228a:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
2000228e:	615c      	str	r4, [r3, #20]
20002290:	695c      	ldr	r4, [r3, #20]
20002292:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
20002296:	615c      	str	r4, [r3, #20]
20002298:	2200      	movs	r2, #0
2000229a:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
2000229e:	6002      	str	r2, [r0, #0]
200022a0:	f85d 4b04 	ldr.w	r4, [sp], #4
200022a4:	60c3      	str	r3, [r0, #12]
200022a6:	6042      	str	r2, [r0, #4]
200022a8:	6082      	str	r2, [r0, #8]
200022aa:	6102      	str	r2, [r0, #16]
200022ac:	6142      	str	r2, [r0, #20]
200022ae:	600a      	str	r2, [r1, #0]
200022b0:	60cb      	str	r3, [r1, #12]
200022b2:	604a      	str	r2, [r1, #4]
200022b4:	608a      	str	r2, [r1, #8]
200022b6:	610a      	str	r2, [r1, #16]
200022b8:	614a      	str	r2, [r1, #20]
200022ba:	4770      	bx	lr
200022bc:	40023800 	.word	0x40023800
200022c0:	40021000 	.word	0x40021000
200022c4:	40020c00 	.word	0x40020c00

200022c8 <md407_runtime_clockinit>:
200022c8:	4a33      	ldr	r2, [pc, #204]	@ (20002398 <md407_runtime_clockinit+0xd0>)
200022ca:	4834      	ldr	r0, [pc, #208]	@ (2000239c <md407_runtime_clockinit+0xd4>)
200022cc:	6813      	ldr	r3, [r2, #0]
200022ce:	2100      	movs	r1, #0
200022d0:	f043 0301 	orr.w	r3, r3, #1
200022d4:	b082      	sub	sp, #8
200022d6:	6013      	str	r3, [r2, #0]
200022d8:	6091      	str	r1, [r2, #8]
200022da:	6813      	ldr	r3, [r2, #0]
200022dc:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
200022e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
200022e4:	6013      	str	r3, [r2, #0]
200022e6:	6050      	str	r0, [r2, #4]
200022e8:	6813      	ldr	r3, [r2, #0]
200022ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
200022ee:	6013      	str	r3, [r2, #0]
200022f0:	60d1      	str	r1, [r2, #12]
200022f2:	9100      	str	r1, [sp, #0]
200022f4:	9101      	str	r1, [sp, #4]
200022f6:	6813      	ldr	r3, [r2, #0]
200022f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
200022fc:	6013      	str	r3, [r2, #0]
200022fe:	e003      	b.n	20002308 <md407_runtime_clockinit+0x40>
20002300:	9b00      	ldr	r3, [sp, #0]
20002302:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
20002306:	d009      	beq.n	2000231c <md407_runtime_clockinit+0x54>
20002308:	6813      	ldr	r3, [r2, #0]
2000230a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2000230e:	9301      	str	r3, [sp, #4]
20002310:	9b00      	ldr	r3, [sp, #0]
20002312:	3301      	adds	r3, #1
20002314:	9300      	str	r3, [sp, #0]
20002316:	9b01      	ldr	r3, [sp, #4]
20002318:	2b00      	cmp	r3, #0
2000231a:	d0f1      	beq.n	20002300 <md407_runtime_clockinit+0x38>
2000231c:	4b1e      	ldr	r3, [pc, #120]	@ (20002398 <md407_runtime_clockinit+0xd0>)
2000231e:	681b      	ldr	r3, [r3, #0]
20002320:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
20002324:	bf18      	it	ne
20002326:	2301      	movne	r3, #1
20002328:	9301      	str	r3, [sp, #4]
2000232a:	9b01      	ldr	r3, [sp, #4]
2000232c:	2b01      	cmp	r3, #1
2000232e:	d001      	beq.n	20002334 <md407_runtime_clockinit+0x6c>
20002330:	b002      	add	sp, #8
20002332:	4770      	bx	lr
20002334:	4b18      	ldr	r3, [pc, #96]	@ (20002398 <md407_runtime_clockinit+0xd0>)
20002336:	491a      	ldr	r1, [pc, #104]	@ (200023a0 <md407_runtime_clockinit+0xd8>)
20002338:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
2000233a:	481a      	ldr	r0, [pc, #104]	@ (200023a4 <md407_runtime_clockinit+0xdc>)
2000233c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
20002340:	641a      	str	r2, [r3, #64]	@ 0x40
20002342:	680a      	ldr	r2, [r1, #0]
20002344:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
20002348:	600a      	str	r2, [r1, #0]
2000234a:	689a      	ldr	r2, [r3, #8]
2000234c:	609a      	str	r2, [r3, #8]
2000234e:	689a      	ldr	r2, [r3, #8]
20002350:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
20002354:	609a      	str	r2, [r3, #8]
20002356:	689a      	ldr	r2, [r3, #8]
20002358:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
2000235c:	609a      	str	r2, [r3, #8]
2000235e:	6058      	str	r0, [r3, #4]
20002360:	681a      	ldr	r2, [r3, #0]
20002362:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
20002366:	601a      	str	r2, [r3, #0]
20002368:	681a      	ldr	r2, [r3, #0]
2000236a:	0192      	lsls	r2, r2, #6
2000236c:	d5fc      	bpl.n	20002368 <md407_runtime_clockinit+0xa0>
2000236e:	4a0e      	ldr	r2, [pc, #56]	@ (200023a8 <md407_runtime_clockinit+0xe0>)
20002370:	f240 6105 	movw	r1, #1541	@ 0x605
20002374:	6011      	str	r1, [r2, #0]
20002376:	6899      	ldr	r1, [r3, #8]
20002378:	f021 0103 	bic.w	r1, r1, #3
2000237c:	6099      	str	r1, [r3, #8]
2000237e:	6899      	ldr	r1, [r3, #8]
20002380:	f041 0102 	orr.w	r1, r1, #2
20002384:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
20002388:	6099      	str	r1, [r3, #8]
2000238a:	6893      	ldr	r3, [r2, #8]
2000238c:	f003 030c 	and.w	r3, r3, #12
20002390:	2b08      	cmp	r3, #8
20002392:	d1fa      	bne.n	2000238a <md407_runtime_clockinit+0xc2>
20002394:	b002      	add	sp, #8
20002396:	4770      	bx	lr
20002398:	40023800 	.word	0x40023800
2000239c:	24003010 	.word	0x24003010
200023a0:	40007000 	.word	0x40007000
200023a4:	08405408 	.word	0x08405408
200023a8:	40023c00 	.word	0x40023c00

200023ac <__udivsi3>:
200023ac:	2900      	cmp	r1, #0
200023ae:	d002      	beq.n	200023b6 <__udivsi3+0xa>
200023b0:	fbb0 f0f1 	udiv	r0, r0, r1
200023b4:	4770      	bx	lr
200023b6:	b108      	cbz	r0, 200023bc <__udivsi3+0x10>
200023b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
200023bc:	f000 b81e 	b.w	200023fc <__aeabi_idiv0>

200023c0 <__aeabi_uidivmod>:
200023c0:	2900      	cmp	r1, #0
200023c2:	d0f8      	beq.n	200023b6 <__udivsi3+0xa>
200023c4:	4602      	mov	r2, r0
200023c6:	fbb0 f0f1 	udiv	r0, r0, r1
200023ca:	fb00 2111 	mls	r1, r0, r1, r2
200023ce:	4770      	bx	lr

200023d0 <__divsi3>:
200023d0:	2900      	cmp	r1, #0
200023d2:	d002      	beq.n	200023da <__divsi3+0xa>
200023d4:	fb90 f0f1 	sdiv	r0, r0, r1
200023d8:	4770      	bx	lr
200023da:	2800      	cmp	r0, #0
200023dc:	bfc8      	it	gt
200023de:	f06f 4000 	mvngt.w	r0, #2147483648	@ 0x80000000
200023e2:	bfb8      	it	lt
200023e4:	f04f 4000 	movlt.w	r0, #2147483648	@ 0x80000000
200023e8:	f000 b808 	b.w	200023fc <__aeabi_idiv0>

200023ec <__aeabi_idivmod>:
200023ec:	2900      	cmp	r1, #0
200023ee:	d0f4      	beq.n	200023da <__divsi3+0xa>
200023f0:	4602      	mov	r2, r0
200023f2:	fb90 f0f1 	sdiv	r0, r0, r1
200023f6:	fb00 2111 	mls	r1, r0, r1, r2
200023fa:	4770      	bx	lr

200023fc <__aeabi_idiv0>:
200023fc:	4770      	bx	lr
200023fe:	bf00      	nop

20002400 <__sflush_r>:
20002400:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
20002404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20002406:	0716      	lsls	r6, r2, #28
20002408:	4605      	mov	r5, r0
2000240a:	460c      	mov	r4, r1
2000240c:	d451      	bmi.n	200024b2 <__sflush_r+0xb2>
2000240e:	684b      	ldr	r3, [r1, #4]
20002410:	2b00      	cmp	r3, #0
20002412:	dc02      	bgt.n	2000241a <__sflush_r+0x1a>
20002414:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
20002416:	2b00      	cmp	r3, #0
20002418:	dd49      	ble.n	200024ae <__sflush_r+0xae>
2000241a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
2000241c:	2e00      	cmp	r6, #0
2000241e:	d046      	beq.n	200024ae <__sflush_r+0xae>
20002420:	2300      	movs	r3, #0
20002422:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
20002426:	682f      	ldr	r7, [r5, #0]
20002428:	602b      	str	r3, [r5, #0]
2000242a:	d031      	beq.n	20002490 <__sflush_r+0x90>
2000242c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
2000242e:	89a3      	ldrh	r3, [r4, #12]
20002430:	0759      	lsls	r1, r3, #29
20002432:	d505      	bpl.n	20002440 <__sflush_r+0x40>
20002434:	6863      	ldr	r3, [r4, #4]
20002436:	1ad2      	subs	r2, r2, r3
20002438:	6b63      	ldr	r3, [r4, #52]	@ 0x34
2000243a:	b10b      	cbz	r3, 20002440 <__sflush_r+0x40>
2000243c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
2000243e:	1ad2      	subs	r2, r2, r3
20002440:	2300      	movs	r3, #0
20002442:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
20002444:	6a21      	ldr	r1, [r4, #32]
20002446:	4628      	mov	r0, r5
20002448:	47b0      	blx	r6
2000244a:	1c42      	adds	r2, r0, #1
2000244c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
20002450:	d106      	bne.n	20002460 <__sflush_r+0x60>
20002452:	6829      	ldr	r1, [r5, #0]
20002454:	291d      	cmp	r1, #29
20002456:	d845      	bhi.n	200024e4 <__sflush_r+0xe4>
20002458:	4a27      	ldr	r2, [pc, #156]	@ (200024f8 <__sflush_r+0xf8>)
2000245a:	40ca      	lsrs	r2, r1
2000245c:	07d6      	lsls	r6, r2, #31
2000245e:	d541      	bpl.n	200024e4 <__sflush_r+0xe4>
20002460:	2200      	movs	r2, #0
20002462:	6062      	str	r2, [r4, #4]
20002464:	04d9      	lsls	r1, r3, #19
20002466:	6922      	ldr	r2, [r4, #16]
20002468:	6022      	str	r2, [r4, #0]
2000246a:	d504      	bpl.n	20002476 <__sflush_r+0x76>
2000246c:	1c42      	adds	r2, r0, #1
2000246e:	d101      	bne.n	20002474 <__sflush_r+0x74>
20002470:	682b      	ldr	r3, [r5, #0]
20002472:	b903      	cbnz	r3, 20002476 <__sflush_r+0x76>
20002474:	6560      	str	r0, [r4, #84]	@ 0x54
20002476:	6b61      	ldr	r1, [r4, #52]	@ 0x34
20002478:	602f      	str	r7, [r5, #0]
2000247a:	b1c1      	cbz	r1, 200024ae <__sflush_r+0xae>
2000247c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
20002480:	4299      	cmp	r1, r3
20002482:	d002      	beq.n	2000248a <__sflush_r+0x8a>
20002484:	4628      	mov	r0, r5
20002486:	f000 fb79 	bl	20002b7c <_free_r>
2000248a:	2300      	movs	r3, #0
2000248c:	6363      	str	r3, [r4, #52]	@ 0x34
2000248e:	e00e      	b.n	200024ae <__sflush_r+0xae>
20002490:	6a21      	ldr	r1, [r4, #32]
20002492:	2301      	movs	r3, #1
20002494:	4628      	mov	r0, r5
20002496:	47b0      	blx	r6
20002498:	4602      	mov	r2, r0
2000249a:	1c50      	adds	r0, r2, #1
2000249c:	d1c7      	bne.n	2000242e <__sflush_r+0x2e>
2000249e:	682b      	ldr	r3, [r5, #0]
200024a0:	2b00      	cmp	r3, #0
200024a2:	d0c4      	beq.n	2000242e <__sflush_r+0x2e>
200024a4:	2b1d      	cmp	r3, #29
200024a6:	d001      	beq.n	200024ac <__sflush_r+0xac>
200024a8:	2b16      	cmp	r3, #22
200024aa:	d119      	bne.n	200024e0 <__sflush_r+0xe0>
200024ac:	602f      	str	r7, [r5, #0]
200024ae:	2000      	movs	r0, #0
200024b0:	e01d      	b.n	200024ee <__sflush_r+0xee>
200024b2:	690f      	ldr	r7, [r1, #16]
200024b4:	2f00      	cmp	r7, #0
200024b6:	d0fa      	beq.n	200024ae <__sflush_r+0xae>
200024b8:	0793      	lsls	r3, r2, #30
200024ba:	680e      	ldr	r6, [r1, #0]
200024bc:	bf08      	it	eq
200024be:	694b      	ldreq	r3, [r1, #20]
200024c0:	600f      	str	r7, [r1, #0]
200024c2:	bf18      	it	ne
200024c4:	2300      	movne	r3, #0
200024c6:	1bf6      	subs	r6, r6, r7
200024c8:	608b      	str	r3, [r1, #8]
200024ca:	2e00      	cmp	r6, #0
200024cc:	ddef      	ble.n	200024ae <__sflush_r+0xae>
200024ce:	6a21      	ldr	r1, [r4, #32]
200024d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
200024d4:	4633      	mov	r3, r6
200024d6:	463a      	mov	r2, r7
200024d8:	4628      	mov	r0, r5
200024da:	47e0      	blx	ip
200024dc:	2800      	cmp	r0, #0
200024de:	dc07      	bgt.n	200024f0 <__sflush_r+0xf0>
200024e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
200024e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200024e8:	81a3      	strh	r3, [r4, #12]
200024ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
200024ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200024f0:	4407      	add	r7, r0
200024f2:	1a36      	subs	r6, r6, r0
200024f4:	e7e9      	b.n	200024ca <__sflush_r+0xca>
200024f6:	bf00      	nop
200024f8:	20400001 	.word	0x20400001

200024fc <_fflush_r>:
200024fc:	b538      	push	{r3, r4, r5, lr}
200024fe:	690b      	ldr	r3, [r1, #16]
20002500:	4605      	mov	r5, r0
20002502:	460c      	mov	r4, r1
20002504:	b913      	cbnz	r3, 2000250c <_fflush_r+0x10>
20002506:	2500      	movs	r5, #0
20002508:	4628      	mov	r0, r5
2000250a:	bd38      	pop	{r3, r4, r5, pc}
2000250c:	b118      	cbz	r0, 20002516 <_fflush_r+0x1a>
2000250e:	6a03      	ldr	r3, [r0, #32]
20002510:	b90b      	cbnz	r3, 20002516 <_fflush_r+0x1a>
20002512:	f000 f9db 	bl	200028cc <__sinit>
20002516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2000251a:	2b00      	cmp	r3, #0
2000251c:	d0f3      	beq.n	20002506 <_fflush_r+0xa>
2000251e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
20002520:	07d0      	lsls	r0, r2, #31
20002522:	d404      	bmi.n	2000252e <_fflush_r+0x32>
20002524:	0599      	lsls	r1, r3, #22
20002526:	d402      	bmi.n	2000252e <_fflush_r+0x32>
20002528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
2000252a:	f000 faa2 	bl	20002a72 <__retarget_lock_acquire_recursive>
2000252e:	4628      	mov	r0, r5
20002530:	4621      	mov	r1, r4
20002532:	f7ff ff65 	bl	20002400 <__sflush_r>
20002536:	6e63      	ldr	r3, [r4, #100]	@ 0x64
20002538:	07da      	lsls	r2, r3, #31
2000253a:	4605      	mov	r5, r0
2000253c:	d4e4      	bmi.n	20002508 <_fflush_r+0xc>
2000253e:	89a3      	ldrh	r3, [r4, #12]
20002540:	059b      	lsls	r3, r3, #22
20002542:	d4e1      	bmi.n	20002508 <_fflush_r+0xc>
20002544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
20002546:	f000 fa9a 	bl	20002a7e <__retarget_lock_release_recursive>
2000254a:	e7dd      	b.n	20002508 <_fflush_r+0xc>

2000254c <fflush>:
2000254c:	4601      	mov	r1, r0
2000254e:	b920      	cbnz	r0, 2000255a <fflush+0xe>
20002550:	4a04      	ldr	r2, [pc, #16]	@ (20002564 <fflush+0x18>)
20002552:	4905      	ldr	r1, [pc, #20]	@ (20002568 <fflush+0x1c>)
20002554:	4805      	ldr	r0, [pc, #20]	@ (2000256c <fflush+0x20>)
20002556:	f000 b9ed 	b.w	20002934 <_fwalk_sglue>
2000255a:	4b05      	ldr	r3, [pc, #20]	@ (20002570 <fflush+0x24>)
2000255c:	6818      	ldr	r0, [r3, #0]
2000255e:	f7ff bfcd 	b.w	200024fc <_fflush_r>
20002562:	bf00      	nop
20002564:	20002fb8 	.word	0x20002fb8
20002568:	200024fd 	.word	0x200024fd
2000256c:	20002fc8 	.word	0x20002fc8
20002570:	20002fc4 	.word	0x20002fc4

20002574 <setvbuf>:
20002574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
20002578:	461d      	mov	r5, r3
2000257a:	4b57      	ldr	r3, [pc, #348]	@ (200026d8 <setvbuf+0x164>)
2000257c:	681f      	ldr	r7, [r3, #0]
2000257e:	4604      	mov	r4, r0
20002580:	460e      	mov	r6, r1
20002582:	4690      	mov	r8, r2
20002584:	b127      	cbz	r7, 20002590 <setvbuf+0x1c>
20002586:	6a3b      	ldr	r3, [r7, #32]
20002588:	b913      	cbnz	r3, 20002590 <setvbuf+0x1c>
2000258a:	4638      	mov	r0, r7
2000258c:	f000 f99e 	bl	200028cc <__sinit>
20002590:	f1b8 0f02 	cmp.w	r8, #2
20002594:	d006      	beq.n	200025a4 <setvbuf+0x30>
20002596:	f1b8 0f01 	cmp.w	r8, #1
2000259a:	f200 809a 	bhi.w	200026d2 <setvbuf+0x15e>
2000259e:	2d00      	cmp	r5, #0
200025a0:	f2c0 8097 	blt.w	200026d2 <setvbuf+0x15e>
200025a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
200025a6:	07d9      	lsls	r1, r3, #31
200025a8:	d405      	bmi.n	200025b6 <setvbuf+0x42>
200025aa:	89a3      	ldrh	r3, [r4, #12]
200025ac:	059a      	lsls	r2, r3, #22
200025ae:	d402      	bmi.n	200025b6 <setvbuf+0x42>
200025b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
200025b2:	f000 fa5e 	bl	20002a72 <__retarget_lock_acquire_recursive>
200025b6:	4621      	mov	r1, r4
200025b8:	4638      	mov	r0, r7
200025ba:	f7ff ff9f 	bl	200024fc <_fflush_r>
200025be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
200025c0:	b141      	cbz	r1, 200025d4 <setvbuf+0x60>
200025c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
200025c6:	4299      	cmp	r1, r3
200025c8:	d002      	beq.n	200025d0 <setvbuf+0x5c>
200025ca:	4638      	mov	r0, r7
200025cc:	f000 fad6 	bl	20002b7c <_free_r>
200025d0:	2300      	movs	r3, #0
200025d2:	6363      	str	r3, [r4, #52]	@ 0x34
200025d4:	2300      	movs	r3, #0
200025d6:	61a3      	str	r3, [r4, #24]
200025d8:	6063      	str	r3, [r4, #4]
200025da:	89a3      	ldrh	r3, [r4, #12]
200025dc:	061b      	lsls	r3, r3, #24
200025de:	d503      	bpl.n	200025e8 <setvbuf+0x74>
200025e0:	6921      	ldr	r1, [r4, #16]
200025e2:	4638      	mov	r0, r7
200025e4:	f000 faca 	bl	20002b7c <_free_r>
200025e8:	89a3      	ldrh	r3, [r4, #12]
200025ea:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
200025ee:	f023 0303 	bic.w	r3, r3, #3
200025f2:	f1b8 0f02 	cmp.w	r8, #2
200025f6:	81a3      	strh	r3, [r4, #12]
200025f8:	d061      	beq.n	200026be <setvbuf+0x14a>
200025fa:	ab01      	add	r3, sp, #4
200025fc:	466a      	mov	r2, sp
200025fe:	4621      	mov	r1, r4
20002600:	4638      	mov	r0, r7
20002602:	f000 f9b5 	bl	20002970 <__swhatbuf_r>
20002606:	89a3      	ldrh	r3, [r4, #12]
20002608:	4318      	orrs	r0, r3
2000260a:	81a0      	strh	r0, [r4, #12]
2000260c:	bb2d      	cbnz	r5, 2000265a <setvbuf+0xe6>
2000260e:	9d00      	ldr	r5, [sp, #0]
20002610:	4628      	mov	r0, r5
20002612:	f000 fafd 	bl	20002c10 <malloc>
20002616:	4606      	mov	r6, r0
20002618:	2800      	cmp	r0, #0
2000261a:	d152      	bne.n	200026c2 <setvbuf+0x14e>
2000261c:	f8dd 9000 	ldr.w	r9, [sp]
20002620:	45a9      	cmp	r9, r5
20002622:	d140      	bne.n	200026a6 <setvbuf+0x132>
20002624:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
20002628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2000262c:	f043 0202 	orr.w	r2, r3, #2
20002630:	81a2      	strh	r2, [r4, #12]
20002632:	2200      	movs	r2, #0
20002634:	60a2      	str	r2, [r4, #8]
20002636:	f104 0247 	add.w	r2, r4, #71	@ 0x47
2000263a:	6022      	str	r2, [r4, #0]
2000263c:	6122      	str	r2, [r4, #16]
2000263e:	2201      	movs	r2, #1
20002640:	6162      	str	r2, [r4, #20]
20002642:	6e62      	ldr	r2, [r4, #100]	@ 0x64
20002644:	07d6      	lsls	r6, r2, #31
20002646:	d404      	bmi.n	20002652 <setvbuf+0xde>
20002648:	0598      	lsls	r0, r3, #22
2000264a:	d402      	bmi.n	20002652 <setvbuf+0xde>
2000264c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
2000264e:	f000 fa16 	bl	20002a7e <__retarget_lock_release_recursive>
20002652:	4628      	mov	r0, r5
20002654:	b003      	add	sp, #12
20002656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
2000265a:	2e00      	cmp	r6, #0
2000265c:	d0d8      	beq.n	20002610 <setvbuf+0x9c>
2000265e:	6a3b      	ldr	r3, [r7, #32]
20002660:	b913      	cbnz	r3, 20002668 <setvbuf+0xf4>
20002662:	4638      	mov	r0, r7
20002664:	f000 f932 	bl	200028cc <__sinit>
20002668:	f1b8 0f01 	cmp.w	r8, #1
2000266c:	bf08      	it	eq
2000266e:	89a3      	ldrheq	r3, [r4, #12]
20002670:	6026      	str	r6, [r4, #0]
20002672:	bf04      	itt	eq
20002674:	f043 0301 	orreq.w	r3, r3, #1
20002678:	81a3      	strheq	r3, [r4, #12]
2000267a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2000267e:	f013 0208 	ands.w	r2, r3, #8
20002682:	e9c4 6504 	strd	r6, r5, [r4, #16]
20002686:	d01e      	beq.n	200026c6 <setvbuf+0x152>
20002688:	07d9      	lsls	r1, r3, #31
2000268a:	bf41      	itttt	mi
2000268c:	2200      	movmi	r2, #0
2000268e:	426d      	negmi	r5, r5
20002690:	60a2      	strmi	r2, [r4, #8]
20002692:	61a5      	strmi	r5, [r4, #24]
20002694:	bf58      	it	pl
20002696:	60a5      	strpl	r5, [r4, #8]
20002698:	6e62      	ldr	r2, [r4, #100]	@ 0x64
2000269a:	07d2      	lsls	r2, r2, #31
2000269c:	d401      	bmi.n	200026a2 <setvbuf+0x12e>
2000269e:	059b      	lsls	r3, r3, #22
200026a0:	d513      	bpl.n	200026ca <setvbuf+0x156>
200026a2:	2500      	movs	r5, #0
200026a4:	e7d5      	b.n	20002652 <setvbuf+0xde>
200026a6:	4648      	mov	r0, r9
200026a8:	f000 fab2 	bl	20002c10 <malloc>
200026ac:	4606      	mov	r6, r0
200026ae:	2800      	cmp	r0, #0
200026b0:	d0b8      	beq.n	20002624 <setvbuf+0xb0>
200026b2:	89a3      	ldrh	r3, [r4, #12]
200026b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
200026b8:	81a3      	strh	r3, [r4, #12]
200026ba:	464d      	mov	r5, r9
200026bc:	e7cf      	b.n	2000265e <setvbuf+0xea>
200026be:	2500      	movs	r5, #0
200026c0:	e7b2      	b.n	20002628 <setvbuf+0xb4>
200026c2:	46a9      	mov	r9, r5
200026c4:	e7f5      	b.n	200026b2 <setvbuf+0x13e>
200026c6:	60a2      	str	r2, [r4, #8]
200026c8:	e7e6      	b.n	20002698 <setvbuf+0x124>
200026ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
200026cc:	f000 f9d7 	bl	20002a7e <__retarget_lock_release_recursive>
200026d0:	e7e7      	b.n	200026a2 <setvbuf+0x12e>
200026d2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
200026d6:	e7bc      	b.n	20002652 <setvbuf+0xde>
200026d8:	20002fc4 	.word	0x20002fc4

200026dc <std>:
200026dc:	2300      	movs	r3, #0
200026de:	b510      	push	{r4, lr}
200026e0:	4604      	mov	r4, r0
200026e2:	e9c0 3300 	strd	r3, r3, [r0]
200026e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
200026ea:	6083      	str	r3, [r0, #8]
200026ec:	8181      	strh	r1, [r0, #12]
200026ee:	6643      	str	r3, [r0, #100]	@ 0x64
200026f0:	81c2      	strh	r2, [r0, #14]
200026f2:	6183      	str	r3, [r0, #24]
200026f4:	4619      	mov	r1, r3
200026f6:	2208      	movs	r2, #8
200026f8:	305c      	adds	r0, #92	@ 0x5c
200026fa:	f000 f996 	bl	20002a2a <memset>
200026fe:	4b0d      	ldr	r3, [pc, #52]	@ (20002734 <std+0x58>)
20002700:	6263      	str	r3, [r4, #36]	@ 0x24
20002702:	4b0d      	ldr	r3, [pc, #52]	@ (20002738 <std+0x5c>)
20002704:	62a3      	str	r3, [r4, #40]	@ 0x28
20002706:	4b0d      	ldr	r3, [pc, #52]	@ (2000273c <std+0x60>)
20002708:	62e3      	str	r3, [r4, #44]	@ 0x2c
2000270a:	4b0d      	ldr	r3, [pc, #52]	@ (20002740 <std+0x64>)
2000270c:	6323      	str	r3, [r4, #48]	@ 0x30
2000270e:	4b0d      	ldr	r3, [pc, #52]	@ (20002744 <std+0x68>)
20002710:	6224      	str	r4, [r4, #32]
20002712:	429c      	cmp	r4, r3
20002714:	d006      	beq.n	20002724 <std+0x48>
20002716:	f103 0268 	add.w	r2, r3, #104	@ 0x68
2000271a:	4294      	cmp	r4, r2
2000271c:	d002      	beq.n	20002724 <std+0x48>
2000271e:	33d0      	adds	r3, #208	@ 0xd0
20002720:	429c      	cmp	r4, r3
20002722:	d105      	bne.n	20002730 <std+0x54>
20002724:	f104 0058 	add.w	r0, r4, #88	@ 0x58
20002728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2000272c:	f000 b99d 	b.w	20002a6a <__retarget_lock_init_recursive>
20002730:	bd10      	pop	{r4, pc}
20002732:	bf00      	nop
20002734:	20002d8d 	.word	0x20002d8d
20002738:	20002db3 	.word	0x20002db3
2000273c:	20002deb 	.word	0x20002deb
20002740:	20002e11 	.word	0x20002e11
20002744:	2000311c 	.word	0x2000311c

20002748 <stdio_exit_handler>:
20002748:	4a02      	ldr	r2, [pc, #8]	@ (20002754 <stdio_exit_handler+0xc>)
2000274a:	4903      	ldr	r1, [pc, #12]	@ (20002758 <stdio_exit_handler+0x10>)
2000274c:	4803      	ldr	r0, [pc, #12]	@ (2000275c <stdio_exit_handler+0x14>)
2000274e:	f000 b8f1 	b.w	20002934 <_fwalk_sglue>
20002752:	bf00      	nop
20002754:	20002fb8 	.word	0x20002fb8
20002758:	200024fd 	.word	0x200024fd
2000275c:	20002fc8 	.word	0x20002fc8

20002760 <cleanup_stdio>:
20002760:	6841      	ldr	r1, [r0, #4]
20002762:	4b0c      	ldr	r3, [pc, #48]	@ (20002794 <cleanup_stdio+0x34>)
20002764:	4299      	cmp	r1, r3
20002766:	b510      	push	{r4, lr}
20002768:	4604      	mov	r4, r0
2000276a:	d001      	beq.n	20002770 <cleanup_stdio+0x10>
2000276c:	f7ff fec6 	bl	200024fc <_fflush_r>
20002770:	68a1      	ldr	r1, [r4, #8]
20002772:	4b09      	ldr	r3, [pc, #36]	@ (20002798 <cleanup_stdio+0x38>)
20002774:	4299      	cmp	r1, r3
20002776:	d002      	beq.n	2000277e <cleanup_stdio+0x1e>
20002778:	4620      	mov	r0, r4
2000277a:	f7ff febf 	bl	200024fc <_fflush_r>
2000277e:	68e1      	ldr	r1, [r4, #12]
20002780:	4b06      	ldr	r3, [pc, #24]	@ (2000279c <cleanup_stdio+0x3c>)
20002782:	4299      	cmp	r1, r3
20002784:	d004      	beq.n	20002790 <cleanup_stdio+0x30>
20002786:	4620      	mov	r0, r4
20002788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2000278c:	f7ff beb6 	b.w	200024fc <_fflush_r>
20002790:	bd10      	pop	{r4, pc}
20002792:	bf00      	nop
20002794:	2000311c 	.word	0x2000311c
20002798:	20003184 	.word	0x20003184
2000279c:	200031ec 	.word	0x200031ec

200027a0 <__fp_lock>:
200027a0:	b508      	push	{r3, lr}
200027a2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
200027a4:	07da      	lsls	r2, r3, #31
200027a6:	d405      	bmi.n	200027b4 <__fp_lock+0x14>
200027a8:	898b      	ldrh	r3, [r1, #12]
200027aa:	059b      	lsls	r3, r3, #22
200027ac:	d402      	bmi.n	200027b4 <__fp_lock+0x14>
200027ae:	6d88      	ldr	r0, [r1, #88]	@ 0x58
200027b0:	f000 f95f 	bl	20002a72 <__retarget_lock_acquire_recursive>
200027b4:	2000      	movs	r0, #0
200027b6:	bd08      	pop	{r3, pc}

200027b8 <__fp_unlock>:
200027b8:	b508      	push	{r3, lr}
200027ba:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
200027bc:	07da      	lsls	r2, r3, #31
200027be:	d405      	bmi.n	200027cc <__fp_unlock+0x14>
200027c0:	898b      	ldrh	r3, [r1, #12]
200027c2:	059b      	lsls	r3, r3, #22
200027c4:	d402      	bmi.n	200027cc <__fp_unlock+0x14>
200027c6:	6d88      	ldr	r0, [r1, #88]	@ 0x58
200027c8:	f000 f959 	bl	20002a7e <__retarget_lock_release_recursive>
200027cc:	2000      	movs	r0, #0
200027ce:	bd08      	pop	{r3, pc}

200027d0 <global_stdio_init.part.0>:
200027d0:	4b0c      	ldr	r3, [pc, #48]	@ (20002804 <global_stdio_init.part.0+0x34>)
200027d2:	4a0d      	ldr	r2, [pc, #52]	@ (20002808 <global_stdio_init.part.0+0x38>)
200027d4:	480d      	ldr	r0, [pc, #52]	@ (2000280c <global_stdio_init.part.0+0x3c>)
200027d6:	b510      	push	{r4, lr}
200027d8:	2104      	movs	r1, #4
200027da:	601a      	str	r2, [r3, #0]
200027dc:	2200      	movs	r2, #0
200027de:	f7ff ff7d 	bl	200026dc <std>
200027e2:	4b0a      	ldr	r3, [pc, #40]	@ (2000280c <global_stdio_init.part.0+0x3c>)
200027e4:	2201      	movs	r2, #1
200027e6:	461c      	mov	r4, r3
200027e8:	2109      	movs	r1, #9
200027ea:	f103 0068 	add.w	r0, r3, #104	@ 0x68
200027ee:	f7ff ff75 	bl	200026dc <std>
200027f2:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
200027f6:	2202      	movs	r2, #2
200027f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
200027fc:	2112      	movs	r1, #18
200027fe:	f7ff bf6d 	b.w	200026dc <std>
20002802:	bf00      	nop
20002804:	20003254 	.word	0x20003254
20002808:	20002749 	.word	0x20002749
2000280c:	2000311c 	.word	0x2000311c

20002810 <__sfp_lock_acquire>:
20002810:	4801      	ldr	r0, [pc, #4]	@ (20002818 <__sfp_lock_acquire+0x8>)
20002812:	f000 b92e 	b.w	20002a72 <__retarget_lock_acquire_recursive>
20002816:	bf00      	nop
20002818:	2000325f 	.word	0x2000325f

2000281c <__sfp_lock_release>:
2000281c:	4801      	ldr	r0, [pc, #4]	@ (20002824 <__sfp_lock_release+0x8>)
2000281e:	f000 b92e 	b.w	20002a7e <__retarget_lock_release_recursive>
20002822:	bf00      	nop
20002824:	2000325f 	.word	0x2000325f

20002828 <__sfp>:
20002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000282a:	4607      	mov	r7, r0
2000282c:	f7ff fff0 	bl	20002810 <__sfp_lock_acquire>
20002830:	4b23      	ldr	r3, [pc, #140]	@ (200028c0 <__sfp+0x98>)
20002832:	681b      	ldr	r3, [r3, #0]
20002834:	b90b      	cbnz	r3, 2000283a <__sfp+0x12>
20002836:	f7ff ffcb 	bl	200027d0 <global_stdio_init.part.0>
2000283a:	4e22      	ldr	r6, [pc, #136]	@ (200028c4 <__sfp+0x9c>)
2000283c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
20002840:	3b01      	subs	r3, #1
20002842:	d50f      	bpl.n	20002864 <__sfp+0x3c>
20002844:	6835      	ldr	r5, [r6, #0]
20002846:	2d00      	cmp	r5, #0
20002848:	d138      	bne.n	200028bc <__sfp+0x94>
2000284a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
2000284e:	4638      	mov	r0, r7
20002850:	f000 fa10 	bl	20002c74 <_malloc_r>
20002854:	4604      	mov	r4, r0
20002856:	bb28      	cbnz	r0, 200028a4 <__sfp+0x7c>
20002858:	6030      	str	r0, [r6, #0]
2000285a:	f7ff ffdf 	bl	2000281c <__sfp_lock_release>
2000285e:	230c      	movs	r3, #12
20002860:	603b      	str	r3, [r7, #0]
20002862:	e01b      	b.n	2000289c <__sfp+0x74>
20002864:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
20002868:	b9d5      	cbnz	r5, 200028a0 <__sfp+0x78>
2000286a:	4b17      	ldr	r3, [pc, #92]	@ (200028c8 <__sfp+0xa0>)
2000286c:	60e3      	str	r3, [r4, #12]
2000286e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
20002872:	6665      	str	r5, [r4, #100]	@ 0x64
20002874:	f000 f8f9 	bl	20002a6a <__retarget_lock_init_recursive>
20002878:	f7ff ffd0 	bl	2000281c <__sfp_lock_release>
2000287c:	e9c4 5501 	strd	r5, r5, [r4, #4]
20002880:	e9c4 5504 	strd	r5, r5, [r4, #16]
20002884:	6025      	str	r5, [r4, #0]
20002886:	61a5      	str	r5, [r4, #24]
20002888:	2208      	movs	r2, #8
2000288a:	4629      	mov	r1, r5
2000288c:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
20002890:	f000 f8cb 	bl	20002a2a <memset>
20002894:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
20002898:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
2000289c:	4620      	mov	r0, r4
2000289e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200028a0:	3468      	adds	r4, #104	@ 0x68
200028a2:	e7cd      	b.n	20002840 <__sfp+0x18>
200028a4:	2304      	movs	r3, #4
200028a6:	6005      	str	r5, [r0, #0]
200028a8:	6043      	str	r3, [r0, #4]
200028aa:	300c      	adds	r0, #12
200028ac:	4629      	mov	r1, r5
200028ae:	60a0      	str	r0, [r4, #8]
200028b0:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
200028b4:	f000 f8b9 	bl	20002a2a <memset>
200028b8:	4625      	mov	r5, r4
200028ba:	6034      	str	r4, [r6, #0]
200028bc:	462e      	mov	r6, r5
200028be:	e7bd      	b.n	2000283c <__sfp+0x14>
200028c0:	20003254 	.word	0x20003254
200028c4:	20002fb8 	.word	0x20002fb8
200028c8:	ffff0001 	.word	0xffff0001

200028cc <__sinit>:
200028cc:	b510      	push	{r4, lr}
200028ce:	4604      	mov	r4, r0
200028d0:	f7ff ff9e 	bl	20002810 <__sfp_lock_acquire>
200028d4:	6a23      	ldr	r3, [r4, #32]
200028d6:	b11b      	cbz	r3, 200028e0 <__sinit+0x14>
200028d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
200028dc:	f7ff bf9e 	b.w	2000281c <__sfp_lock_release>
200028e0:	4b04      	ldr	r3, [pc, #16]	@ (200028f4 <__sinit+0x28>)
200028e2:	6223      	str	r3, [r4, #32]
200028e4:	4b04      	ldr	r3, [pc, #16]	@ (200028f8 <__sinit+0x2c>)
200028e6:	681b      	ldr	r3, [r3, #0]
200028e8:	2b00      	cmp	r3, #0
200028ea:	d1f5      	bne.n	200028d8 <__sinit+0xc>
200028ec:	f7ff ff70 	bl	200027d0 <global_stdio_init.part.0>
200028f0:	e7f2      	b.n	200028d8 <__sinit+0xc>
200028f2:	bf00      	nop
200028f4:	20002761 	.word	0x20002761
200028f8:	20003254 	.word	0x20003254

200028fc <__fp_lock_all>:
200028fc:	b508      	push	{r3, lr}
200028fe:	f7ff ff87 	bl	20002810 <__sfp_lock_acquire>
20002902:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
20002906:	4a02      	ldr	r2, [pc, #8]	@ (20002910 <__fp_lock_all+0x14>)
20002908:	4902      	ldr	r1, [pc, #8]	@ (20002914 <__fp_lock_all+0x18>)
2000290a:	2000      	movs	r0, #0
2000290c:	f000 b812 	b.w	20002934 <_fwalk_sglue>
20002910:	20002fb8 	.word	0x20002fb8
20002914:	200027a1 	.word	0x200027a1

20002918 <__fp_unlock_all>:
20002918:	b508      	push	{r3, lr}
2000291a:	4a04      	ldr	r2, [pc, #16]	@ (2000292c <__fp_unlock_all+0x14>)
2000291c:	4904      	ldr	r1, [pc, #16]	@ (20002930 <__fp_unlock_all+0x18>)
2000291e:	2000      	movs	r0, #0
20002920:	f000 f808 	bl	20002934 <_fwalk_sglue>
20002924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
20002928:	f7ff bf78 	b.w	2000281c <__sfp_lock_release>
2000292c:	20002fb8 	.word	0x20002fb8
20002930:	200027b9 	.word	0x200027b9

20002934 <_fwalk_sglue>:
20002934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
20002938:	4607      	mov	r7, r0
2000293a:	4688      	mov	r8, r1
2000293c:	4614      	mov	r4, r2
2000293e:	2600      	movs	r6, #0
20002940:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
20002944:	f1b9 0901 	subs.w	r9, r9, #1
20002948:	d505      	bpl.n	20002956 <_fwalk_sglue+0x22>
2000294a:	6824      	ldr	r4, [r4, #0]
2000294c:	2c00      	cmp	r4, #0
2000294e:	d1f7      	bne.n	20002940 <_fwalk_sglue+0xc>
20002950:	4630      	mov	r0, r6
20002952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
20002956:	89ab      	ldrh	r3, [r5, #12]
20002958:	2b01      	cmp	r3, #1
2000295a:	d907      	bls.n	2000296c <_fwalk_sglue+0x38>
2000295c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
20002960:	3301      	adds	r3, #1
20002962:	d003      	beq.n	2000296c <_fwalk_sglue+0x38>
20002964:	4629      	mov	r1, r5
20002966:	4638      	mov	r0, r7
20002968:	47c0      	blx	r8
2000296a:	4306      	orrs	r6, r0
2000296c:	3568      	adds	r5, #104	@ 0x68
2000296e:	e7e9      	b.n	20002944 <_fwalk_sglue+0x10>

20002970 <__swhatbuf_r>:
20002970:	b570      	push	{r4, r5, r6, lr}
20002972:	460c      	mov	r4, r1
20002974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20002978:	2900      	cmp	r1, #0
2000297a:	b096      	sub	sp, #88	@ 0x58
2000297c:	4615      	mov	r5, r2
2000297e:	461e      	mov	r6, r3
20002980:	da0a      	bge.n	20002998 <__swhatbuf_r+0x28>
20002982:	89a1      	ldrh	r1, [r4, #12]
20002984:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
20002988:	d113      	bne.n	200029b2 <__swhatbuf_r+0x42>
2000298a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
2000298e:	2000      	movs	r0, #0
20002990:	6031      	str	r1, [r6, #0]
20002992:	602a      	str	r2, [r5, #0]
20002994:	b016      	add	sp, #88	@ 0x58
20002996:	bd70      	pop	{r4, r5, r6, pc}
20002998:	466a      	mov	r2, sp
2000299a:	f000 f8cf 	bl	20002b3c <_fstat_r>
2000299e:	2800      	cmp	r0, #0
200029a0:	dbef      	blt.n	20002982 <__swhatbuf_r+0x12>
200029a2:	9901      	ldr	r1, [sp, #4]
200029a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
200029a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
200029ac:	4259      	negs	r1, r3
200029ae:	4159      	adcs	r1, r3
200029b0:	e7eb      	b.n	2000298a <__swhatbuf_r+0x1a>
200029b2:	2100      	movs	r1, #0
200029b4:	2240      	movs	r2, #64	@ 0x40
200029b6:	e7ea      	b.n	2000298e <__swhatbuf_r+0x1e>

200029b8 <__smakebuf_r>:
200029b8:	898b      	ldrh	r3, [r1, #12]
200029ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
200029bc:	079e      	lsls	r6, r3, #30
200029be:	4605      	mov	r5, r0
200029c0:	460c      	mov	r4, r1
200029c2:	d507      	bpl.n	200029d4 <__smakebuf_r+0x1c>
200029c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
200029c8:	6023      	str	r3, [r4, #0]
200029ca:	6123      	str	r3, [r4, #16]
200029cc:	2301      	movs	r3, #1
200029ce:	6163      	str	r3, [r4, #20]
200029d0:	b002      	add	sp, #8
200029d2:	bd70      	pop	{r4, r5, r6, pc}
200029d4:	ab01      	add	r3, sp, #4
200029d6:	466a      	mov	r2, sp
200029d8:	f7ff ffca 	bl	20002970 <__swhatbuf_r>
200029dc:	9e00      	ldr	r6, [sp, #0]
200029de:	4628      	mov	r0, r5
200029e0:	4631      	mov	r1, r6
200029e2:	f000 f947 	bl	20002c74 <_malloc_r>
200029e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
200029ea:	b938      	cbnz	r0, 200029fc <__smakebuf_r+0x44>
200029ec:	059a      	lsls	r2, r3, #22
200029ee:	d4ef      	bmi.n	200029d0 <__smakebuf_r+0x18>
200029f0:	f023 0303 	bic.w	r3, r3, #3
200029f4:	f043 0302 	orr.w	r3, r3, #2
200029f8:	81a3      	strh	r3, [r4, #12]
200029fa:	e7e3      	b.n	200029c4 <__smakebuf_r+0xc>
200029fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
20002a00:	81a3      	strh	r3, [r4, #12]
20002a02:	9b01      	ldr	r3, [sp, #4]
20002a04:	6020      	str	r0, [r4, #0]
20002a06:	e9c4 0604 	strd	r0, r6, [r4, #16]
20002a0a:	2b00      	cmp	r3, #0
20002a0c:	d0e0      	beq.n	200029d0 <__smakebuf_r+0x18>
20002a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
20002a12:	4628      	mov	r0, r5
20002a14:	f000 f812 	bl	20002a3c <_isatty_r>
20002a18:	2800      	cmp	r0, #0
20002a1a:	d0d9      	beq.n	200029d0 <__smakebuf_r+0x18>
20002a1c:	89a3      	ldrh	r3, [r4, #12]
20002a1e:	f023 0303 	bic.w	r3, r3, #3
20002a22:	f043 0301 	orr.w	r3, r3, #1
20002a26:	81a3      	strh	r3, [r4, #12]
20002a28:	e7d2      	b.n	200029d0 <__smakebuf_r+0x18>

20002a2a <memset>:
20002a2a:	4402      	add	r2, r0
20002a2c:	4603      	mov	r3, r0
20002a2e:	4293      	cmp	r3, r2
20002a30:	d100      	bne.n	20002a34 <memset+0xa>
20002a32:	4770      	bx	lr
20002a34:	f803 1b01 	strb.w	r1, [r3], #1
20002a38:	e7f9      	b.n	20002a2e <memset+0x4>
	...

20002a3c <_isatty_r>:
20002a3c:	b538      	push	{r3, r4, r5, lr}
20002a3e:	4d06      	ldr	r5, [pc, #24]	@ (20002a58 <_isatty_r+0x1c>)
20002a40:	2300      	movs	r3, #0
20002a42:	4604      	mov	r4, r0
20002a44:	4608      	mov	r0, r1
20002a46:	602b      	str	r3, [r5, #0]
20002a48:	f7ff fb6c 	bl	20002124 <_isatty>
20002a4c:	1c43      	adds	r3, r0, #1
20002a4e:	d102      	bne.n	20002a56 <_isatty_r+0x1a>
20002a50:	682b      	ldr	r3, [r5, #0]
20002a52:	b103      	cbz	r3, 20002a56 <_isatty_r+0x1a>
20002a54:	6023      	str	r3, [r4, #0]
20002a56:	bd38      	pop	{r3, r4, r5, pc}
20002a58:	20003260 	.word	0x20003260

20002a5c <__errno>:
20002a5c:	4b01      	ldr	r3, [pc, #4]	@ (20002a64 <__errno+0x8>)
20002a5e:	6818      	ldr	r0, [r3, #0]
20002a60:	4770      	bx	lr
20002a62:	bf00      	nop
20002a64:	20002fc4 	.word	0x20002fc4

20002a68 <__retarget_lock_init>:
20002a68:	4770      	bx	lr

20002a6a <__retarget_lock_init_recursive>:
20002a6a:	4770      	bx	lr

20002a6c <__retarget_lock_close>:
20002a6c:	4770      	bx	lr

20002a6e <__retarget_lock_close_recursive>:
20002a6e:	4770      	bx	lr

20002a70 <__retarget_lock_acquire>:
20002a70:	4770      	bx	lr

20002a72 <__retarget_lock_acquire_recursive>:
20002a72:	4770      	bx	lr

20002a74 <__retarget_lock_try_acquire>:
20002a74:	2001      	movs	r0, #1
20002a76:	4770      	bx	lr

20002a78 <__retarget_lock_try_acquire_recursive>:
20002a78:	2001      	movs	r0, #1
20002a7a:	4770      	bx	lr

20002a7c <__retarget_lock_release>:
20002a7c:	4770      	bx	lr

20002a7e <__retarget_lock_release_recursive>:
20002a7e:	4770      	bx	lr

20002a80 <_reclaim_reent>:
20002a80:	4b2d      	ldr	r3, [pc, #180]	@ (20002b38 <_reclaim_reent+0xb8>)
20002a82:	681b      	ldr	r3, [r3, #0]
20002a84:	4283      	cmp	r3, r0
20002a86:	b570      	push	{r4, r5, r6, lr}
20002a88:	4604      	mov	r4, r0
20002a8a:	d053      	beq.n	20002b34 <_reclaim_reent+0xb4>
20002a8c:	69c3      	ldr	r3, [r0, #28]
20002a8e:	b31b      	cbz	r3, 20002ad8 <_reclaim_reent+0x58>
20002a90:	68db      	ldr	r3, [r3, #12]
20002a92:	b163      	cbz	r3, 20002aae <_reclaim_reent+0x2e>
20002a94:	2500      	movs	r5, #0
20002a96:	69e3      	ldr	r3, [r4, #28]
20002a98:	68db      	ldr	r3, [r3, #12]
20002a9a:	5959      	ldr	r1, [r3, r5]
20002a9c:	b9b1      	cbnz	r1, 20002acc <_reclaim_reent+0x4c>
20002a9e:	3504      	adds	r5, #4
20002aa0:	2d80      	cmp	r5, #128	@ 0x80
20002aa2:	d1f8      	bne.n	20002a96 <_reclaim_reent+0x16>
20002aa4:	69e3      	ldr	r3, [r4, #28]
20002aa6:	4620      	mov	r0, r4
20002aa8:	68d9      	ldr	r1, [r3, #12]
20002aaa:	f000 f867 	bl	20002b7c <_free_r>
20002aae:	69e3      	ldr	r3, [r4, #28]
20002ab0:	6819      	ldr	r1, [r3, #0]
20002ab2:	b111      	cbz	r1, 20002aba <_reclaim_reent+0x3a>
20002ab4:	4620      	mov	r0, r4
20002ab6:	f000 f861 	bl	20002b7c <_free_r>
20002aba:	69e3      	ldr	r3, [r4, #28]
20002abc:	689d      	ldr	r5, [r3, #8]
20002abe:	b15d      	cbz	r5, 20002ad8 <_reclaim_reent+0x58>
20002ac0:	4629      	mov	r1, r5
20002ac2:	4620      	mov	r0, r4
20002ac4:	682d      	ldr	r5, [r5, #0]
20002ac6:	f000 f859 	bl	20002b7c <_free_r>
20002aca:	e7f8      	b.n	20002abe <_reclaim_reent+0x3e>
20002acc:	680e      	ldr	r6, [r1, #0]
20002ace:	4620      	mov	r0, r4
20002ad0:	f000 f854 	bl	20002b7c <_free_r>
20002ad4:	4631      	mov	r1, r6
20002ad6:	e7e1      	b.n	20002a9c <_reclaim_reent+0x1c>
20002ad8:	6961      	ldr	r1, [r4, #20]
20002ada:	b111      	cbz	r1, 20002ae2 <_reclaim_reent+0x62>
20002adc:	4620      	mov	r0, r4
20002ade:	f000 f84d 	bl	20002b7c <_free_r>
20002ae2:	69e1      	ldr	r1, [r4, #28]
20002ae4:	b111      	cbz	r1, 20002aec <_reclaim_reent+0x6c>
20002ae6:	4620      	mov	r0, r4
20002ae8:	f000 f848 	bl	20002b7c <_free_r>
20002aec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
20002aee:	b111      	cbz	r1, 20002af6 <_reclaim_reent+0x76>
20002af0:	4620      	mov	r0, r4
20002af2:	f000 f843 	bl	20002b7c <_free_r>
20002af6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
20002af8:	b111      	cbz	r1, 20002b00 <_reclaim_reent+0x80>
20002afa:	4620      	mov	r0, r4
20002afc:	f000 f83e 	bl	20002b7c <_free_r>
20002b00:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
20002b02:	b111      	cbz	r1, 20002b0a <_reclaim_reent+0x8a>
20002b04:	4620      	mov	r0, r4
20002b06:	f000 f839 	bl	20002b7c <_free_r>
20002b0a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
20002b0c:	b111      	cbz	r1, 20002b14 <_reclaim_reent+0x94>
20002b0e:	4620      	mov	r0, r4
20002b10:	f000 f834 	bl	20002b7c <_free_r>
20002b14:	6c61      	ldr	r1, [r4, #68]	@ 0x44
20002b16:	b111      	cbz	r1, 20002b1e <_reclaim_reent+0x9e>
20002b18:	4620      	mov	r0, r4
20002b1a:	f000 f82f 	bl	20002b7c <_free_r>
20002b1e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
20002b20:	b111      	cbz	r1, 20002b28 <_reclaim_reent+0xa8>
20002b22:	4620      	mov	r0, r4
20002b24:	f000 f82a 	bl	20002b7c <_free_r>
20002b28:	6a23      	ldr	r3, [r4, #32]
20002b2a:	b11b      	cbz	r3, 20002b34 <_reclaim_reent+0xb4>
20002b2c:	4620      	mov	r0, r4
20002b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
20002b32:	4718      	bx	r3
20002b34:	bd70      	pop	{r4, r5, r6, pc}
20002b36:	bf00      	nop
20002b38:	20002fc4 	.word	0x20002fc4

20002b3c <_fstat_r>:
20002b3c:	b538      	push	{r3, r4, r5, lr}
20002b3e:	4d07      	ldr	r5, [pc, #28]	@ (20002b5c <_fstat_r+0x20>)
20002b40:	2300      	movs	r3, #0
20002b42:	4604      	mov	r4, r0
20002b44:	4608      	mov	r0, r1
20002b46:	4611      	mov	r1, r2
20002b48:	602b      	str	r3, [r5, #0]
20002b4a:	f7ff fae7 	bl	2000211c <_fstat>
20002b4e:	1c43      	adds	r3, r0, #1
20002b50:	d102      	bne.n	20002b58 <_fstat_r+0x1c>
20002b52:	682b      	ldr	r3, [r5, #0]
20002b54:	b103      	cbz	r3, 20002b58 <_fstat_r+0x1c>
20002b56:	6023      	str	r3, [r4, #0]
20002b58:	bd38      	pop	{r3, r4, r5, pc}
20002b5a:	bf00      	nop
20002b5c:	20003260 	.word	0x20003260

20002b60 <memcpy>:
20002b60:	440a      	add	r2, r1
20002b62:	4291      	cmp	r1, r2
20002b64:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
20002b68:	d100      	bne.n	20002b6c <memcpy+0xc>
20002b6a:	4770      	bx	lr
20002b6c:	b510      	push	{r4, lr}
20002b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
20002b72:	f803 4f01 	strb.w	r4, [r3, #1]!
20002b76:	4291      	cmp	r1, r2
20002b78:	d1f9      	bne.n	20002b6e <memcpy+0xe>
20002b7a:	bd10      	pop	{r4, pc}

20002b7c <_free_r>:
20002b7c:	b538      	push	{r3, r4, r5, lr}
20002b7e:	4605      	mov	r5, r0
20002b80:	2900      	cmp	r1, #0
20002b82:	d041      	beq.n	20002c08 <_free_r+0x8c>
20002b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
20002b88:	1f0c      	subs	r4, r1, #4
20002b8a:	2b00      	cmp	r3, #0
20002b8c:	bfb8      	it	lt
20002b8e:	18e4      	addlt	r4, r4, r3
20002b90:	f000 f8f0 	bl	20002d74 <__malloc_lock>
20002b94:	4a1d      	ldr	r2, [pc, #116]	@ (20002c0c <_free_r+0x90>)
20002b96:	6813      	ldr	r3, [r2, #0]
20002b98:	b933      	cbnz	r3, 20002ba8 <_free_r+0x2c>
20002b9a:	6063      	str	r3, [r4, #4]
20002b9c:	6014      	str	r4, [r2, #0]
20002b9e:	4628      	mov	r0, r5
20002ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
20002ba4:	f000 b8ec 	b.w	20002d80 <__malloc_unlock>
20002ba8:	42a3      	cmp	r3, r4
20002baa:	d908      	bls.n	20002bbe <_free_r+0x42>
20002bac:	6820      	ldr	r0, [r4, #0]
20002bae:	1821      	adds	r1, r4, r0
20002bb0:	428b      	cmp	r3, r1
20002bb2:	bf01      	itttt	eq
20002bb4:	6819      	ldreq	r1, [r3, #0]
20002bb6:	685b      	ldreq	r3, [r3, #4]
20002bb8:	1809      	addeq	r1, r1, r0
20002bba:	6021      	streq	r1, [r4, #0]
20002bbc:	e7ed      	b.n	20002b9a <_free_r+0x1e>
20002bbe:	461a      	mov	r2, r3
20002bc0:	685b      	ldr	r3, [r3, #4]
20002bc2:	b10b      	cbz	r3, 20002bc8 <_free_r+0x4c>
20002bc4:	42a3      	cmp	r3, r4
20002bc6:	d9fa      	bls.n	20002bbe <_free_r+0x42>
20002bc8:	6811      	ldr	r1, [r2, #0]
20002bca:	1850      	adds	r0, r2, r1
20002bcc:	42a0      	cmp	r0, r4
20002bce:	d10b      	bne.n	20002be8 <_free_r+0x6c>
20002bd0:	6820      	ldr	r0, [r4, #0]
20002bd2:	4401      	add	r1, r0
20002bd4:	1850      	adds	r0, r2, r1
20002bd6:	4283      	cmp	r3, r0
20002bd8:	6011      	str	r1, [r2, #0]
20002bda:	d1e0      	bne.n	20002b9e <_free_r+0x22>
20002bdc:	6818      	ldr	r0, [r3, #0]
20002bde:	685b      	ldr	r3, [r3, #4]
20002be0:	6053      	str	r3, [r2, #4]
20002be2:	4408      	add	r0, r1
20002be4:	6010      	str	r0, [r2, #0]
20002be6:	e7da      	b.n	20002b9e <_free_r+0x22>
20002be8:	d902      	bls.n	20002bf0 <_free_r+0x74>
20002bea:	230c      	movs	r3, #12
20002bec:	602b      	str	r3, [r5, #0]
20002bee:	e7d6      	b.n	20002b9e <_free_r+0x22>
20002bf0:	6820      	ldr	r0, [r4, #0]
20002bf2:	1821      	adds	r1, r4, r0
20002bf4:	428b      	cmp	r3, r1
20002bf6:	bf04      	itt	eq
20002bf8:	6819      	ldreq	r1, [r3, #0]
20002bfa:	685b      	ldreq	r3, [r3, #4]
20002bfc:	6063      	str	r3, [r4, #4]
20002bfe:	bf04      	itt	eq
20002c00:	1809      	addeq	r1, r1, r0
20002c02:	6021      	streq	r1, [r4, #0]
20002c04:	6054      	str	r4, [r2, #4]
20002c06:	e7ca      	b.n	20002b9e <_free_r+0x22>
20002c08:	bd38      	pop	{r3, r4, r5, pc}
20002c0a:	bf00      	nop
20002c0c:	20003268 	.word	0x20003268

20002c10 <malloc>:
20002c10:	4b02      	ldr	r3, [pc, #8]	@ (20002c1c <malloc+0xc>)
20002c12:	4601      	mov	r1, r0
20002c14:	6818      	ldr	r0, [r3, #0]
20002c16:	f000 b82d 	b.w	20002c74 <_malloc_r>
20002c1a:	bf00      	nop
20002c1c:	20002fc4 	.word	0x20002fc4

20002c20 <free>:
20002c20:	4b02      	ldr	r3, [pc, #8]	@ (20002c2c <free+0xc>)
20002c22:	4601      	mov	r1, r0
20002c24:	6818      	ldr	r0, [r3, #0]
20002c26:	f7ff bfa9 	b.w	20002b7c <_free_r>
20002c2a:	bf00      	nop
20002c2c:	20002fc4 	.word	0x20002fc4

20002c30 <sbrk_aligned>:
20002c30:	b570      	push	{r4, r5, r6, lr}
20002c32:	4e0f      	ldr	r6, [pc, #60]	@ (20002c70 <sbrk_aligned+0x40>)
20002c34:	460c      	mov	r4, r1
20002c36:	6831      	ldr	r1, [r6, #0]
20002c38:	4605      	mov	r5, r0
20002c3a:	b911      	cbnz	r1, 20002c42 <sbrk_aligned+0x12>
20002c3c:	f000 f910 	bl	20002e60 <_sbrk_r>
20002c40:	6030      	str	r0, [r6, #0]
20002c42:	4621      	mov	r1, r4
20002c44:	4628      	mov	r0, r5
20002c46:	f000 f90b 	bl	20002e60 <_sbrk_r>
20002c4a:	1c43      	adds	r3, r0, #1
20002c4c:	d103      	bne.n	20002c56 <sbrk_aligned+0x26>
20002c4e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
20002c52:	4620      	mov	r0, r4
20002c54:	bd70      	pop	{r4, r5, r6, pc}
20002c56:	1cc4      	adds	r4, r0, #3
20002c58:	f024 0403 	bic.w	r4, r4, #3
20002c5c:	42a0      	cmp	r0, r4
20002c5e:	d0f8      	beq.n	20002c52 <sbrk_aligned+0x22>
20002c60:	1a21      	subs	r1, r4, r0
20002c62:	4628      	mov	r0, r5
20002c64:	f000 f8fc 	bl	20002e60 <_sbrk_r>
20002c68:	3001      	adds	r0, #1
20002c6a:	d1f2      	bne.n	20002c52 <sbrk_aligned+0x22>
20002c6c:	e7ef      	b.n	20002c4e <sbrk_aligned+0x1e>
20002c6e:	bf00      	nop
20002c70:	20003264 	.word	0x20003264

20002c74 <_malloc_r>:
20002c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
20002c78:	1ccd      	adds	r5, r1, #3
20002c7a:	f025 0503 	bic.w	r5, r5, #3
20002c7e:	3508      	adds	r5, #8
20002c80:	2d0c      	cmp	r5, #12
20002c82:	bf38      	it	cc
20002c84:	250c      	movcc	r5, #12
20002c86:	2d00      	cmp	r5, #0
20002c88:	4606      	mov	r6, r0
20002c8a:	db01      	blt.n	20002c90 <_malloc_r+0x1c>
20002c8c:	42a9      	cmp	r1, r5
20002c8e:	d904      	bls.n	20002c9a <_malloc_r+0x26>
20002c90:	230c      	movs	r3, #12
20002c92:	6033      	str	r3, [r6, #0]
20002c94:	2000      	movs	r0, #0
20002c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
20002c9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 20002d70 <_malloc_r+0xfc>
20002c9e:	f000 f869 	bl	20002d74 <__malloc_lock>
20002ca2:	f8d8 3000 	ldr.w	r3, [r8]
20002ca6:	461c      	mov	r4, r3
20002ca8:	bb44      	cbnz	r4, 20002cfc <_malloc_r+0x88>
20002caa:	4629      	mov	r1, r5
20002cac:	4630      	mov	r0, r6
20002cae:	f7ff ffbf 	bl	20002c30 <sbrk_aligned>
20002cb2:	1c43      	adds	r3, r0, #1
20002cb4:	4604      	mov	r4, r0
20002cb6:	d158      	bne.n	20002d6a <_malloc_r+0xf6>
20002cb8:	f8d8 4000 	ldr.w	r4, [r8]
20002cbc:	4627      	mov	r7, r4
20002cbe:	2f00      	cmp	r7, #0
20002cc0:	d143      	bne.n	20002d4a <_malloc_r+0xd6>
20002cc2:	2c00      	cmp	r4, #0
20002cc4:	d04b      	beq.n	20002d5e <_malloc_r+0xea>
20002cc6:	6823      	ldr	r3, [r4, #0]
20002cc8:	4639      	mov	r1, r7
20002cca:	4630      	mov	r0, r6
20002ccc:	eb04 0903 	add.w	r9, r4, r3
20002cd0:	f000 f8c6 	bl	20002e60 <_sbrk_r>
20002cd4:	4581      	cmp	r9, r0
20002cd6:	d142      	bne.n	20002d5e <_malloc_r+0xea>
20002cd8:	6821      	ldr	r1, [r4, #0]
20002cda:	1a6d      	subs	r5, r5, r1
20002cdc:	4629      	mov	r1, r5
20002cde:	4630      	mov	r0, r6
20002ce0:	f7ff ffa6 	bl	20002c30 <sbrk_aligned>
20002ce4:	3001      	adds	r0, #1
20002ce6:	d03a      	beq.n	20002d5e <_malloc_r+0xea>
20002ce8:	6823      	ldr	r3, [r4, #0]
20002cea:	442b      	add	r3, r5
20002cec:	6023      	str	r3, [r4, #0]
20002cee:	f8d8 3000 	ldr.w	r3, [r8]
20002cf2:	685a      	ldr	r2, [r3, #4]
20002cf4:	bb62      	cbnz	r2, 20002d50 <_malloc_r+0xdc>
20002cf6:	f8c8 7000 	str.w	r7, [r8]
20002cfa:	e00f      	b.n	20002d1c <_malloc_r+0xa8>
20002cfc:	6822      	ldr	r2, [r4, #0]
20002cfe:	1b52      	subs	r2, r2, r5
20002d00:	d420      	bmi.n	20002d44 <_malloc_r+0xd0>
20002d02:	2a0b      	cmp	r2, #11
20002d04:	d917      	bls.n	20002d36 <_malloc_r+0xc2>
20002d06:	1961      	adds	r1, r4, r5
20002d08:	42a3      	cmp	r3, r4
20002d0a:	6025      	str	r5, [r4, #0]
20002d0c:	bf18      	it	ne
20002d0e:	6059      	strne	r1, [r3, #4]
20002d10:	6863      	ldr	r3, [r4, #4]
20002d12:	bf08      	it	eq
20002d14:	f8c8 1000 	streq.w	r1, [r8]
20002d18:	5162      	str	r2, [r4, r5]
20002d1a:	604b      	str	r3, [r1, #4]
20002d1c:	4630      	mov	r0, r6
20002d1e:	f000 f82f 	bl	20002d80 <__malloc_unlock>
20002d22:	f104 000b 	add.w	r0, r4, #11
20002d26:	1d23      	adds	r3, r4, #4
20002d28:	f020 0007 	bic.w	r0, r0, #7
20002d2c:	1ac2      	subs	r2, r0, r3
20002d2e:	bf1c      	itt	ne
20002d30:	1a1b      	subne	r3, r3, r0
20002d32:	50a3      	strne	r3, [r4, r2]
20002d34:	e7af      	b.n	20002c96 <_malloc_r+0x22>
20002d36:	6862      	ldr	r2, [r4, #4]
20002d38:	42a3      	cmp	r3, r4
20002d3a:	bf0c      	ite	eq
20002d3c:	f8c8 2000 	streq.w	r2, [r8]
20002d40:	605a      	strne	r2, [r3, #4]
20002d42:	e7eb      	b.n	20002d1c <_malloc_r+0xa8>
20002d44:	4623      	mov	r3, r4
20002d46:	6864      	ldr	r4, [r4, #4]
20002d48:	e7ae      	b.n	20002ca8 <_malloc_r+0x34>
20002d4a:	463c      	mov	r4, r7
20002d4c:	687f      	ldr	r7, [r7, #4]
20002d4e:	e7b6      	b.n	20002cbe <_malloc_r+0x4a>
20002d50:	461a      	mov	r2, r3
20002d52:	685b      	ldr	r3, [r3, #4]
20002d54:	42a3      	cmp	r3, r4
20002d56:	d1fb      	bne.n	20002d50 <_malloc_r+0xdc>
20002d58:	2300      	movs	r3, #0
20002d5a:	6053      	str	r3, [r2, #4]
20002d5c:	e7de      	b.n	20002d1c <_malloc_r+0xa8>
20002d5e:	230c      	movs	r3, #12
20002d60:	6033      	str	r3, [r6, #0]
20002d62:	4630      	mov	r0, r6
20002d64:	f000 f80c 	bl	20002d80 <__malloc_unlock>
20002d68:	e794      	b.n	20002c94 <_malloc_r+0x20>
20002d6a:	6005      	str	r5, [r0, #0]
20002d6c:	e7d6      	b.n	20002d1c <_malloc_r+0xa8>
20002d6e:	bf00      	nop
20002d70:	20003268 	.word	0x20003268

20002d74 <__malloc_lock>:
20002d74:	4801      	ldr	r0, [pc, #4]	@ (20002d7c <__malloc_lock+0x8>)
20002d76:	f7ff be7c 	b.w	20002a72 <__retarget_lock_acquire_recursive>
20002d7a:	bf00      	nop
20002d7c:	2000325c 	.word	0x2000325c

20002d80 <__malloc_unlock>:
20002d80:	4801      	ldr	r0, [pc, #4]	@ (20002d88 <__malloc_unlock+0x8>)
20002d82:	f7ff be7c 	b.w	20002a7e <__retarget_lock_release_recursive>
20002d86:	bf00      	nop
20002d88:	2000325c 	.word	0x2000325c

20002d8c <__sread>:
20002d8c:	b510      	push	{r4, lr}
20002d8e:	460c      	mov	r4, r1
20002d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20002d94:	f000 f852 	bl	20002e3c <_read_r>
20002d98:	2800      	cmp	r0, #0
20002d9a:	bfab      	itete	ge
20002d9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
20002d9e:	89a3      	ldrhlt	r3, [r4, #12]
20002da0:	181b      	addge	r3, r3, r0
20002da2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
20002da6:	bfac      	ite	ge
20002da8:	6563      	strge	r3, [r4, #84]	@ 0x54
20002daa:	81a3      	strhlt	r3, [r4, #12]
20002dac:	bd10      	pop	{r4, pc}

20002dae <__seofread>:
20002dae:	2000      	movs	r0, #0
20002db0:	4770      	bx	lr

20002db2 <__swrite>:
20002db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20002db6:	461f      	mov	r7, r3
20002db8:	898b      	ldrh	r3, [r1, #12]
20002dba:	05db      	lsls	r3, r3, #23
20002dbc:	4605      	mov	r5, r0
20002dbe:	460c      	mov	r4, r1
20002dc0:	4616      	mov	r6, r2
20002dc2:	d505      	bpl.n	20002dd0 <__swrite+0x1e>
20002dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20002dc8:	2302      	movs	r3, #2
20002dca:	2200      	movs	r2, #0
20002dcc:	f000 f824 	bl	20002e18 <_lseek_r>
20002dd0:	89a3      	ldrh	r3, [r4, #12]
20002dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
20002dd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
20002dda:	81a3      	strh	r3, [r4, #12]
20002ddc:	4632      	mov	r2, r6
20002dde:	463b      	mov	r3, r7
20002de0:	4628      	mov	r0, r5
20002de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
20002de6:	f000 b84b 	b.w	20002e80 <_write_r>

20002dea <__sseek>:
20002dea:	b510      	push	{r4, lr}
20002dec:	460c      	mov	r4, r1
20002dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20002df2:	f000 f811 	bl	20002e18 <_lseek_r>
20002df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
20002dfa:	1c42      	adds	r2, r0, #1
20002dfc:	bf0b      	itete	eq
20002dfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
20002e02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
20002e06:	81a3      	strheq	r3, [r4, #12]
20002e08:	81a3      	strhne	r3, [r4, #12]
20002e0a:	bf18      	it	ne
20002e0c:	6560      	strne	r0, [r4, #84]	@ 0x54
20002e0e:	bd10      	pop	{r4, pc}

20002e10 <__sclose>:
20002e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20002e14:	f000 b846 	b.w	20002ea4 <_close_r>

20002e18 <_lseek_r>:
20002e18:	b538      	push	{r3, r4, r5, lr}
20002e1a:	4d07      	ldr	r5, [pc, #28]	@ (20002e38 <_lseek_r+0x20>)
20002e1c:	4604      	mov	r4, r0
20002e1e:	4608      	mov	r0, r1
20002e20:	4611      	mov	r1, r2
20002e22:	2200      	movs	r2, #0
20002e24:	602a      	str	r2, [r5, #0]
20002e26:	461a      	mov	r2, r3
20002e28:	f7ff f97a 	bl	20002120 <_lseek>
20002e2c:	1c43      	adds	r3, r0, #1
20002e2e:	d102      	bne.n	20002e36 <_lseek_r+0x1e>
20002e30:	682b      	ldr	r3, [r5, #0]
20002e32:	b103      	cbz	r3, 20002e36 <_lseek_r+0x1e>
20002e34:	6023      	str	r3, [r4, #0]
20002e36:	bd38      	pop	{r3, r4, r5, pc}
20002e38:	20003260 	.word	0x20003260

20002e3c <_read_r>:
20002e3c:	b538      	push	{r3, r4, r5, lr}
20002e3e:	4d07      	ldr	r5, [pc, #28]	@ (20002e5c <_read_r+0x20>)
20002e40:	4604      	mov	r4, r0
20002e42:	4608      	mov	r0, r1
20002e44:	4611      	mov	r1, r2
20002e46:	2200      	movs	r2, #0
20002e48:	602a      	str	r2, [r5, #0]
20002e4a:	461a      	mov	r2, r3
20002e4c:	f7ff f956 	bl	200020fc <_read>
20002e50:	1c43      	adds	r3, r0, #1
20002e52:	d102      	bne.n	20002e5a <_read_r+0x1e>
20002e54:	682b      	ldr	r3, [r5, #0]
20002e56:	b103      	cbz	r3, 20002e5a <_read_r+0x1e>
20002e58:	6023      	str	r3, [r4, #0]
20002e5a:	bd38      	pop	{r3, r4, r5, pc}
20002e5c:	20003260 	.word	0x20003260

20002e60 <_sbrk_r>:
20002e60:	b538      	push	{r3, r4, r5, lr}
20002e62:	4d06      	ldr	r5, [pc, #24]	@ (20002e7c <_sbrk_r+0x1c>)
20002e64:	2300      	movs	r3, #0
20002e66:	4604      	mov	r4, r0
20002e68:	4608      	mov	r0, r1
20002e6a:	602b      	str	r3, [r5, #0]
20002e6c:	f7ff f8ec 	bl	20002048 <_sbrk>
20002e70:	1c43      	adds	r3, r0, #1
20002e72:	d102      	bne.n	20002e7a <_sbrk_r+0x1a>
20002e74:	682b      	ldr	r3, [r5, #0]
20002e76:	b103      	cbz	r3, 20002e7a <_sbrk_r+0x1a>
20002e78:	6023      	str	r3, [r4, #0]
20002e7a:	bd38      	pop	{r3, r4, r5, pc}
20002e7c:	20003260 	.word	0x20003260

20002e80 <_write_r>:
20002e80:	b538      	push	{r3, r4, r5, lr}
20002e82:	4d07      	ldr	r5, [pc, #28]	@ (20002ea0 <_write_r+0x20>)
20002e84:	4604      	mov	r4, r0
20002e86:	4608      	mov	r0, r1
20002e88:	4611      	mov	r1, r2
20002e8a:	2200      	movs	r2, #0
20002e8c:	602a      	str	r2, [r5, #0]
20002e8e:	461a      	mov	r2, r3
20002e90:	f7ff f92a 	bl	200020e8 <_write>
20002e94:	1c43      	adds	r3, r0, #1
20002e96:	d102      	bne.n	20002e9e <_write_r+0x1e>
20002e98:	682b      	ldr	r3, [r5, #0]
20002e9a:	b103      	cbz	r3, 20002e9e <_write_r+0x1e>
20002e9c:	6023      	str	r3, [r4, #0]
20002e9e:	bd38      	pop	{r3, r4, r5, pc}
20002ea0:	20003260 	.word	0x20003260

20002ea4 <_close_r>:
20002ea4:	b538      	push	{r3, r4, r5, lr}
20002ea6:	4d06      	ldr	r5, [pc, #24]	@ (20002ec0 <_close_r+0x1c>)
20002ea8:	2300      	movs	r3, #0
20002eaa:	4604      	mov	r4, r0
20002eac:	4608      	mov	r0, r1
20002eae:	602b      	str	r3, [r5, #0]
20002eb0:	f7ff f92c 	bl	2000210c <_close>
20002eb4:	1c43      	adds	r3, r0, #1
20002eb6:	d102      	bne.n	20002ebe <_close_r+0x1a>
20002eb8:	682b      	ldr	r3, [r5, #0]
20002eba:	b103      	cbz	r3, 20002ebe <_close_r+0x1a>
20002ebc:	6023      	str	r3, [r4, #0]
20002ebe:	bd38      	pop	{r3, r4, r5, pc}
20002ec0:	20003260 	.word	0x20003260

20002ec4 <gpio_d>:
20002ec4:	40020c00                                ...@

20002ec8 <gpio_e>:
20002ec8:	40021000                                ...@

20002ecc <gpiod>:
20002ecc:	40020c00                                ...@

20002ed0 <gpioe>:
20002ed0:	40021000                                ...@

20002ed4 <systick>:
20002ed4:	e000e010                                ....

20002ed8 <ball_geometry>:
20002ed8:	0000000c 00000004 00000004 02000100     ................
20002ee8:	01010001 03010201 01020002 03020202     ................
20002ef8:	02030103 00000000 00000000 00000000     ................
	...

20002f24 <paddle_geometry>:
20002f24:	0000000a 0000000a 00000002 00010000     ................
20002f34:	00030002 00050004 00070006 00090008     ................
	...

20002f70 <ball>:
20002f70:	20002ed8 00000000 00000000 00000001     ... ............
20002f80:	00000001 200009d7 20000a75 20000f6d     ....... u.. m.. 
20002f90:	20000fab                                ... 

20002f94 <paddle>:
20002f94:	20002f24 00000000 00000000 0000003b     $/. ........;...
20002fa4:	0000003a 200009d7 20000a75 20000f6d     :...... u.. m.. 
20002fb4:	20000fab                                ... 

20002fb8 <__sglue>:
20002fb8:	00000000 00000003 2000311c              .........1. 

20002fc4 <_impure_ptr>:
20002fc4:	20002fc8                                ./. 

20002fc8 <_impure_data>:
20002fc8:	00000000 2000311c 20003184 200031ec     .....1. .1. .1. 
	...
20003014:	726f6353 00203a65 736e6977 00000021     Score: .wins!...
20003024:	636c6557 20656d6f 53206f74 72657075     Welcome to Super
20003034:	676e6f70 00000021 73657250 20352073     pong!...Press 5 
20003044:	73206f74 74726174 0000002e              to start....

20003050 <DELAY_VALUE>:
20003050:	00000029                                )...

20003054 <KEYCODE>:
20003054:	0a030201 0b060504 0c090807 0d0f000e     ................

20003064 <KEYCODE>:
20003064:	0a030201 0b060504 0c090807 0d0f000e     ................
20003074:	00006c01 00007201 00007501 00006401     .l...r...u...d..
20003084:	20756f59 216e6957 00000000 656d6147     You Win!....Game
20003094:	65764f20 00002172 726f6353 00203a65      Over!..Score: .
200030a4:	636c6557 20656d6f 42206f74 6b616572     Welcome to Break
200030b4:	2174756f 00000000 73657250 20352073     out!....Press 5 
200030c4:	73206f74 74726174 0000002e 6576694c     to start....Live
200030d4:	00203a73 61657242 74756f6b 4c202d20     s: .Breakout - L
200030e4:	00206c76 6576654c 6f43206c 656c706d     vl .Level Comple
200030f4:	00216574 7478654e 76654c20 2e2e6c65     te!.Next Level..
20003104:	0000002e                                ....

20003108 <__bss_start__>:
	...

20003110 <col_buffer>:
20003110:	00000000 	.word	0x00000000

20003114 <col_count>:
20003114:	00000000 	.word	0x00000000

20003118 <heap_end>:
20003118:	00000000                                ....

2000311c <__sf>:
	...

20003254 <__stdio_exit_handler>:
20003254:	00000000                                ....

20003258 <__lock___arc4random_mutex>:
	...

20003259 <__lock___dd_hash_mutex>:
	...

2000325a <__lock___tz_mutex>:
	...

2000325b <__lock___env_recursive_mutex>:
	...

2000325c <__lock___malloc_recursive_mutex>:
	...

2000325d <__lock___at_quick_exit_mutex>:
	...

2000325e <__lock___atexit_recursive_mutex>:
	...

2000325f <__lock___sfp_recursive_mutex>:
	...

20003260 <errno>:
20003260:	00000000                                ....

20003264 <__malloc_sbrk_start>:
20003264:	00000000                                ....

20003268 <__malloc_free_list>:
20003268:	00000000                                ....

2000326c <__bss_end__>:
	...

20004000 <__heap_low>:
	...

20004400 <__heap_top>:
	...
